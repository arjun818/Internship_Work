
UART_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002b84  08002b84  00003b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be4  08002be4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be4  08002be4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be4  08002be4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be4  08002be4  00003be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002be8  08002be8  00003be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002bf8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002bf8  00004120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007be7  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e5  00000000  00000000  0000bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0000d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b3  00000000  00000000  0000d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fceb  00000000  00000000  0000dbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008747  00000000  00000000  0001d8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff3a  00000000  00000000  00025ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00085f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001490  00000000  00000000  00085f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0008740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b6c 	.word	0x08002b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b6c 	.word	0x08002b6c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa40 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f810 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f88a 	bl	8000358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f858 	bl	80002f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,rx_data,1);
 8000248:	4903      	ldr	r1, [pc, #12]	@ (8000258 <main+0x24>)
 800024a:	4b04      	ldr	r3, [pc, #16]	@ (800025c <main+0x28>)
 800024c:	2201      	movs	r2, #1
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fad9 	bl	8001806 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7fd      	b.n	8000254 <main+0x20>
 8000258:	2000002c 	.word	0x2000002c
 800025c:	20000094 	.word	0x20000094

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b091      	sub	sp, #68	@ 0x44
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2410      	movs	r4, #16
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	@ 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 fc4f 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2310      	movs	r3, #16
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 fc48 	bl	8002b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2201      	movs	r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2210      	movs	r2, #16
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	0212      	lsls	r2, r2, #8
 80002a4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2280      	movs	r2, #128	@ 0x80
 80002aa:	0352      	lsls	r2, r2, #13
 80002ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fd4e 	bl	8000d58 <HAL_RCC_OscConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002c0:	f000 f928 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	003b      	movs	r3, r7
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	003b      	movs	r3, r7
 80002cc:	2202      	movs	r2, #2
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	003b      	movs	r3, r7
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	003b      	movs	r3, r7
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f857 	bl	8001394 <HAL_RCC_ClockConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ea:	f000 f913 	bl	8000514 <Error_Handler>
  }
}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b011      	add	sp, #68	@ 0x44
 80002f4:	bd90      	pop	{r4, r7, pc}
	...

080002f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 80002fe:	4a15      	ldr	r2, [pc, #84]	@ (8000354 <MX_USART2_UART_Init+0x5c>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000302:	4b13      	ldr	r3, [pc, #76]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000304:	2296      	movs	r2, #150	@ 0x96
 8000306:	0212      	lsls	r2, r2, #8
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f96f 	bl	8001620 <HAL_UART_Init>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000346:	f000 f8e5 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000094 	.word	0x20000094
 8000354:	40004400 	.word	0x40004400

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b089      	sub	sp, #36	@ 0x24
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	240c      	movs	r4, #12
 8000360:	193b      	adds	r3, r7, r4
 8000362:	0018      	movs	r0, r3
 8000364:	2314      	movs	r3, #20
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f002 fbd3 	bl	8002b14 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <MX_GPIO_Init+0xcc>)
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <MX_GPIO_Init+0xcc>)
 8000374:	2180      	movs	r1, #128	@ 0x80
 8000376:	0309      	lsls	r1, r1, #12
 8000378:	430a      	orrs	r2, r1
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <MX_GPIO_Init+0xcc>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	2380      	movs	r3, #128	@ 0x80
 8000382:	031b      	lsls	r3, r3, #12
 8000384:	4013      	ands	r3, r2
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b26      	ldr	r3, [pc, #152]	@ (8000424 <MX_GPIO_Init+0xcc>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <MX_GPIO_Init+0xcc>)
 8000390:	2180      	movs	r1, #128	@ 0x80
 8000392:	03c9      	lsls	r1, r1, #15
 8000394:	430a      	orrs	r2, r1
 8000396:	615a      	str	r2, [r3, #20]
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <MX_GPIO_Init+0xcc>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	2380      	movs	r3, #128	@ 0x80
 800039e:	03db      	lsls	r3, r3, #15
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003a8:	695a      	ldr	r2, [r3, #20]
 80003aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003ac:	2180      	movs	r1, #128	@ 0x80
 80003ae:	0289      	lsls	r1, r1, #10
 80003b0:	430a      	orrs	r2, r1
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	2380      	movs	r3, #128	@ 0x80
 80003ba:	029b      	lsls	r3, r3, #10
 80003bc:	4013      	ands	r3, r2
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003c2:	2390      	movs	r3, #144	@ 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fca6 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	0192      	lsls	r2, r2, #6
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2284      	movs	r2, #132	@ 0x84
 80003dc:	0392      	lsls	r2, r2, #14
 80003de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000428 <MX_GPIO_Init+0xd0>)
 80003ea:	0019      	movs	r1, r3
 80003ec:	0010      	movs	r0, r2
 80003ee:	f000 fb25 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f2:	0021      	movs	r1, r4
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2220      	movs	r2, #32
 80003f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040c:	187a      	adds	r2, r7, r1
 800040e:	2390      	movs	r3, #144	@ 0x90
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fb11 	bl	8000a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b009      	add	sp, #36	@ 0x24
 8000420:	bd90      	pop	{r4, r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	40021000 	.word	0x40021000
 8000428:	48000800 	.word	0x48000800

0800042c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
//  HAL_UART_Transmit(&huart2, rx_data, 10, 10);
  if(huart->Instance==USART2)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a2e      	ldr	r2, [pc, #184]	@ (80004f4 <HAL_UART_RxCpltCallback+0xc8>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d156      	bne.n	80004ec <HAL_UART_RxCpltCallback+0xc0>
  {
	  if(rx_index>=100-1)// Check for buffer overflow
 800043e:	4b2e      	ldr	r3, [pc, #184]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b62      	cmp	r3, #98	@ 0x62
 8000444:	d902      	bls.n	800044c <HAL_UART_RxCpltCallback+0x20>
	  {
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		  rx_index=0;
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	  }
	  if(rx_data[0]!='\r')// Check if the received character is not Carriage Return
 800044c:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <HAL_UART_RxCpltCallback+0xd0>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b0d      	cmp	r3, #13
 8000452:	d00b      	beq.n	800046c <HAL_UART_RxCpltCallback+0x40>
	  {
		  rx_buffer[rx_index++]=rx_data[0];
 8000454:	4b28      	ldr	r3, [pc, #160]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	b2d1      	uxtb	r1, r2
 800045c:	4a26      	ldr	r2, [pc, #152]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 800045e:	7011      	strb	r1, [r2, #0]
 8000460:	001a      	movs	r2, r3
 8000462:	4b26      	ldr	r3, [pc, #152]	@ (80004fc <HAL_UART_RxCpltCallback+0xd0>)
 8000464:	7819      	ldrb	r1, [r3, #0]
 8000466:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 8000468:	5499      	strb	r1, [r3, r2]
 800046a:	e033      	b.n	80004d4 <HAL_UART_RxCpltCallback+0xa8>
	  }
	  else
	  {
          rx_buffer[rx_index] = '\0'; // Null-terminate the string
 800046c:	4b22      	ldr	r3, [pc, #136]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	001a      	movs	r2, r3
 8000472:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]

          if(strcmp((char*)rx_buffer, "LED ON") == 0)
 8000478:	4a22      	ldr	r2, [pc, #136]	@ (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 800047a:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f7ff fe42 	bl	8000108 <strcmp>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d107      	bne.n	8000498 <HAL_UART_RxCpltCallback+0x6c>
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn LED ON
 8000488:	2390      	movs	r3, #144	@ 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2201      	movs	r2, #1
 800048e:	2120      	movs	r1, #32
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fc43 	bl	8000d1c <HAL_GPIO_WritePin>
 8000496:	e00e      	b.n	80004b6 <HAL_UART_RxCpltCallback+0x8a>
          }
          else if(strcmp((char*)rx_buffer, "LED OFF") == 0)
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <HAL_UART_RxCpltCallback+0xdc>)
 800049a:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff fe32 	bl	8000108 <strcmp>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d106      	bne.n	80004b6 <HAL_UART_RxCpltCallback+0x8a>
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
 80004a8:	2390      	movs	r3, #144	@ 0x90
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2200      	movs	r2, #0
 80004ae:	2120      	movs	r1, #32
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fc33 	bl	8000d1c <HAL_GPIO_WritePin>
          }

          // Reset index and buffer for the next command
          rx_index = 0;
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
          memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear buffer
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 80004be:	2264      	movs	r2, #100	@ 0x64
 80004c0:	2100      	movs	r1, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fb26 	bl	8002b14 <memset>

          // Acknowledge the command (Optional)
          HAL_UART_Transmit(&huart2, (uint8_t*)"\n\rCommand received\r\n", 22, 100);
 80004c8:	4910      	ldr	r1, [pc, #64]	@ (800050c <HAL_UART_RxCpltCallback+0xe0>)
 80004ca:	4811      	ldr	r0, [pc, #68]	@ (8000510 <HAL_UART_RxCpltCallback+0xe4>)
 80004cc:	2364      	movs	r3, #100	@ 0x64
 80004ce:	2216      	movs	r2, #22
 80004d0:	f001 f8fa 	bl	80016c8 <HAL_UART_Transmit>

	  }
	  HAL_UART_Receive_IT(&huart2, rx_data,1);
 80004d4:	4909      	ldr	r1, [pc, #36]	@ (80004fc <HAL_UART_RxCpltCallback+0xd0>)
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <HAL_UART_RxCpltCallback+0xe4>)
 80004d8:	2201      	movs	r2, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 f993 	bl	8001806 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, sizeof(rx_data),100);
 80004e0:	4906      	ldr	r1, [pc, #24]	@ (80004fc <HAL_UART_RxCpltCallback+0xd0>)
 80004e2:	480b      	ldr	r0, [pc, #44]	@ (8000510 <HAL_UART_RxCpltCallback+0xe4>)
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	2201      	movs	r2, #1
 80004e8:	f001 f8ee 	bl	80016c8 <HAL_UART_Transmit>
  }
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40004400 	.word	0x40004400
 80004f8:	20000028 	.word	0x20000028
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000030 	.word	0x20000030
 8000504:	08002b84 	.word	0x08002b84
 8000508:	08002b8c 	.word	0x08002b8c
 800050c:	08002b94 	.word	0x08002b94
 8000510:	20000094 	.word	0x20000094

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7fd      	b.n	800051c <Error_Handler+0x8>

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <HAL_MspInit+0x44>)
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <HAL_MspInit+0x44>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	619a      	str	r2, [r3, #24]
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <HAL_MspInit+0x44>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <HAL_MspInit+0x44>)
 8000540:	69da      	ldr	r2, [r3, #28]
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_MspInit+0x44>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0549      	lsls	r1, r1, #21
 8000548:	430a      	orrs	r2, r1
 800054a:	61da      	str	r2, [r3, #28]
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_MspInit+0x44>)
 800054e:	69da      	ldr	r2, [r3, #28]
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	055b      	lsls	r3, r3, #21
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b08b      	sub	sp, #44	@ 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	2414      	movs	r4, #20
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0018      	movs	r0, r3
 8000576:	2314      	movs	r3, #20
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f002 faca 	bl	8002b14 <memset>
  if(huart->Instance==USART2)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <HAL_UART_MspInit+0xa0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d13a      	bne.n	8000600 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800058a:	4b20      	ldr	r3, [pc, #128]	@ (800060c <HAL_UART_MspInit+0xa4>)
 800058c:	69da      	ldr	r2, [r3, #28]
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <HAL_UART_MspInit+0xa4>)
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	0289      	lsls	r1, r1, #10
 8000594:	430a      	orrs	r2, r1
 8000596:	61da      	str	r2, [r3, #28]
 8000598:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <HAL_UART_MspInit+0xa4>)
 800059a:	69da      	ldr	r2, [r3, #28]
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	029b      	lsls	r3, r3, #10
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <HAL_UART_MspInit+0xa4>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_UART_MspInit+0xa4>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <HAL_UART_MspInit+0xa4>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2202      	movs	r2, #2
 80005ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	187a      	adds	r2, r7, r1
 80005e4:	2390      	movs	r3, #144	@ 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fa26 	bl	8000a3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	201c      	movs	r0, #28
 80005f6:	f000 f971 	bl	80008dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005fa:	201c      	movs	r0, #28
 80005fc:	f000 f983 	bl	8000906 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	@ 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40004400 	.word	0x40004400
 800060c:	40021000 	.word	0x40021000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000638:	f000 f888 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <USART2_IRQHandler+0x14>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 f932 	bl	80018b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	20000094 	.word	0x20000094

0800065c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800066c:	f7ff fff6 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000696:	f002 fa45 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fdcb 	bl	8000234 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ac:	08002bec 	.word	0x08002bec
  ldr r2, =_sbss
 80006b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b4:	20000120 	.word	0x20000120

080006b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_IRQHandler>
	...

080006bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <HAL_Init+0x24>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_Init+0x24>)
 80006c6:	2110      	movs	r1, #16
 80006c8:	430a      	orrs	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f809 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d2:	f7ff ff25 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <HAL_InitTick+0x5c>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <HAL_InitTick+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	0019      	movs	r1, r3
 80006f6:	23fa      	movs	r3, #250	@ 0xfa
 80006f8:	0098      	lsls	r0, r3, #2
 80006fa:	f7ff fd0f 	bl	800011c <__udivsi3>
 80006fe:	0003      	movs	r3, r0
 8000700:	0019      	movs	r1, r3
 8000702:	0020      	movs	r0, r4
 8000704:	f7ff fd0a 	bl	800011c <__udivsi3>
 8000708:	0003      	movs	r3, r0
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f90b 	bl	8000926 <HAL_SYSTICK_Config>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e00f      	b.n	8000738 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d80b      	bhi.n	8000736 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2301      	movs	r3, #1
 8000722:	425b      	negs	r3, r3
 8000724:	2200      	movs	r2, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f8d8 	bl	80008dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_InitTick+0x64>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b003      	add	sp, #12
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_IncTick+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_IncTick+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	18d2      	adds	r2, r2, r3
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_IncTick+0x20>)
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	20000008 	.word	0x20000008
 800076c:	2000011c 	.word	0x2000011c

08000770 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  return uwTick;
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <HAL_GetTick+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	2000011c 	.word	0x2000011c

08000784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b7f      	cmp	r3, #127	@ 0x7f
 8000796:	d809      	bhi.n	80007ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	001a      	movs	r2, r3
 800079e:	231f      	movs	r3, #31
 80007a0:	401a      	ands	r2, r3
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_EnableIRQ+0x30>)
 80007a4:	2101      	movs	r1, #1
 80007a6:	4091      	lsls	r1, r2
 80007a8:	000a      	movs	r2, r1
 80007aa:	601a      	str	r2, [r3, #0]
  }
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80007cc:	d828      	bhi.n	8000820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ce:	4a2f      	ldr	r2, [pc, #188]	@ (800088c <__NVIC_SetPriority+0xd4>)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	33c0      	adds	r3, #192	@ 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	589b      	ldr	r3, [r3, r2]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	@ 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	@ 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	481f      	ldr	r0, [pc, #124]	@ (800088c <__NVIC_SetPriority+0xd4>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	33c0      	adds	r3, #192	@ 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800081e:	e031      	b.n	8000884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0019      	movs	r1, r3
 8000828:	230f      	movs	r3, #15
 800082a:	400b      	ands	r3, r1
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	3306      	adds	r3, #6
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	0011      	movs	r1, r2
 8000840:	2203      	movs	r2, #3
 8000842:	400a      	ands	r2, r1
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	21ff      	movs	r1, #255	@ 0xff
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	22ff      	movs	r2, #255	@ 0xff
 8000858:	401a      	ands	r2, r3
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	4003      	ands	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <__NVIC_SetPriority+0xd8>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	001c      	movs	r4, r3
 8000870:	230f      	movs	r3, #15
 8000872:	4023      	ands	r3, r4
 8000874:	3b08      	subs	r3, #8
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	430a      	orrs	r2, r1
 800087a:	3306      	adds	r3, #6
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18c3      	adds	r3, r0, r3
 8000880:	3304      	adds	r3, #4
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	045b      	lsls	r3, r3, #17
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d301      	bcc.n	80008ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a8:	2301      	movs	r3, #1
 80008aa:	e010      	b.n	80008ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <SysTick_Config+0x44>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	3a01      	subs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	2103      	movs	r1, #3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ff7c 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <SysTick_Config+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <SysTick_Config+0x44>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	210f      	movs	r1, #15
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	0002      	movs	r2, r0
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b25b      	sxtb	r3, r3
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff33 	bl	8000784 <__NVIC_EnableIRQ>
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ffaf 	bl	8000894 <SysTick_Config>
 8000936:	0003      	movs	r3, r0
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2221      	movs	r2, #33	@ 0x21
 800094c:	5c9b      	ldrb	r3, [r3, r2]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d008      	beq.n	8000966 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e020      	b.n	80009a8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	210e      	movs	r1, #14
 8000972:	438a      	bics	r2, r1
 8000974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	438a      	bics	r2, r1
 8000984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800098e:	2101      	movs	r1, #1
 8000990:	4091      	lsls	r1, r2
 8000992:	000a      	movs	r2, r1
 8000994:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2221      	movs	r2, #33	@ 0x21
 800099a:	2101      	movs	r1, #1
 800099c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b8:	210f      	movs	r1, #15
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2221      	movs	r2, #33	@ 0x21
 80009c4:	5c9b      	ldrb	r3, [r3, r2]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d006      	beq.n	80009da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2204      	movs	r2, #4
 80009d0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e028      	b.n	8000a2c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	210e      	movs	r1, #14
 80009e6:	438a      	bics	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	438a      	bics	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a02:	2101      	movs	r1, #1
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2221      	movs	r2, #33	@ 0x21
 8000a0e:	2101      	movs	r1, #1
 8000a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d004      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	0010      	movs	r0, r2
 8000a2a:	4798      	blx	r3
    }
  }
  return status;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	781b      	ldrb	r3, [r3, #0]
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	e14f      	b.n	8000cec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <HAL_GPIO_Init+0x28>
 8000a62:	e140      	b.n	8000ce6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d005      	beq.n	8000a7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2203      	movs	r2, #3
 8000a76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d017      	beq.n	8000b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d123      	bne.n	8000b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	58d3      	ldr	r3, [r2, r3]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2207      	movs	r2, #7
 8000b38:	4013      	ands	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691a      	ldr	r2, [r3, #16]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2107      	movs	r1, #7
 8000b52:	400b      	ands	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	08da      	lsrs	r2, r3, #3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3208      	adds	r2, #8
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	6939      	ldr	r1, [r7, #16]
 8000b6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	23c0      	movs	r3, #192	@ 0xc0
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4013      	ands	r3, r2
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x174>
 8000bae:	e09a      	b.n	8000ce6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb0:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000bb2:	699a      	ldr	r2, [r3, #24]
 8000bb4:	4b53      	ldr	r3, [pc, #332]	@ (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	619a      	str	r2, [r3, #24]
 8000bbc:	4b51      	ldr	r3, [pc, #324]	@ (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8000d08 <HAL_GPIO_Init+0x2cc>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	589b      	ldr	r3, [r3, r2]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4013      	ands	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	2390      	movs	r3, #144	@ 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0x1e2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a44      	ldr	r2, [pc, #272]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d00d      	beq.n	8000c1a <HAL_GPIO_Init+0x1de>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a43      	ldr	r2, [pc, #268]	@ (8000d10 <HAL_GPIO_Init+0x2d4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d007      	beq.n	8000c16 <HAL_GPIO_Init+0x1da>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a42      	ldr	r2, [pc, #264]	@ (8000d14 <HAL_GPIO_Init+0x2d8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x1e4>
 8000c12:	2305      	movs	r3, #5
 8000c14:	e004      	b.n	8000c20 <HAL_GPIO_Init+0x1e4>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_Init+0x1e4>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x1e4>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	2103      	movs	r1, #3
 8000c24:	400a      	ands	r2, r1
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	4093      	lsls	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c30:	4935      	ldr	r1, [pc, #212]	@ (8000d08 <HAL_GPIO_Init+0x2cc>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c3e:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	2380      	movs	r3, #128	@ 0x80
 8000c54:	035b      	lsls	r3, r3, #13
 8000c56:	4013      	ands	r3, r2
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c62:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43da      	mvns	r2, r3
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	039b      	lsls	r3, r3, #14
 8000c80:	4013      	ands	r3, r2
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	029b      	lsls	r3, r3, #10
 8000caa:	4013      	ands	r3, r2
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	2380      	movs	r3, #128	@ 0x80
 8000cd2:	025b      	lsls	r3, r3, #9
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	40da      	lsrs	r2, r3
 8000cf4:	1e13      	subs	r3, r2, #0
 8000cf6:	d000      	beq.n	8000cfa <HAL_GPIO_Init+0x2be>
 8000cf8:	e6a8      	b.n	8000a4c <HAL_GPIO_Init+0x10>
  } 
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b006      	add	sp, #24
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	0008      	movs	r0, r1
 8000d26:	0011      	movs	r1, r2
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	1c02      	adds	r2, r0, #0
 8000d2c:	801a      	strh	r2, [r3, #0]
 8000d2e:	1c7b      	adds	r3, r7, #1
 8000d30:	1c0a      	adds	r2, r1, #0
 8000d32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d34:	1c7b      	adds	r3, r7, #1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d44:	e003      	b.n	8000d4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d46:	1cbb      	adds	r3, r7, #2
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e305      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	d100      	bne.n	8000d76 <HAL_RCC_OscConfig+0x1e>
 8000d74:	e08d      	b.n	8000e92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d76:	4bc5      	ldr	r3, [pc, #788]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d00e      	beq.n	8000da0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d82:	4bc2      	ldr	r3, [pc, #776]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	220c      	movs	r2, #12
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d116      	bne.n	8000dbc <HAL_RCC_OscConfig+0x64>
 8000d8e:	4bbf      	ldr	r3, [pc, #764]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	23c0      	movs	r3, #192	@ 0xc0
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	401a      	ands	r2, r3
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	025b      	lsls	r3, r3, #9
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d10d      	bne.n	8000dbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	4bba      	ldr	r3, [pc, #744]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	4013      	ands	r3, r2
 8000daa:	d100      	bne.n	8000dae <HAL_RCC_OscConfig+0x56>
 8000dac:	e070      	b.n	8000e90 <HAL_RCC_OscConfig+0x138>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d000      	beq.n	8000db8 <HAL_RCC_OscConfig+0x60>
 8000db6:	e06b      	b.n	8000e90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e2dc      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d107      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x7c>
 8000dc4:	4bb1      	ldr	r3, [pc, #708]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4bb0      	ldr	r3, [pc, #704]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e02f      	b.n	8000e34 <HAL_RCC_OscConfig+0xdc>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10c      	bne.n	8000df6 <HAL_RCC_OscConfig+0x9e>
 8000ddc:	4bab      	ldr	r3, [pc, #684]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4baa      	ldr	r3, [pc, #680]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000de2:	49ab      	ldr	r1, [pc, #684]	@ (8001090 <HAL_RCC_OscConfig+0x338>)
 8000de4:	400a      	ands	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	4ba8      	ldr	r3, [pc, #672]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4ba7      	ldr	r3, [pc, #668]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000dee:	49a9      	ldr	r1, [pc, #676]	@ (8001094 <HAL_RCC_OscConfig+0x33c>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e01e      	b.n	8000e34 <HAL_RCC_OscConfig+0xdc>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	d10e      	bne.n	8000e1c <HAL_RCC_OscConfig+0xc4>
 8000dfe:	4ba3      	ldr	r3, [pc, #652]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4ba2      	ldr	r3, [pc, #648]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	02c9      	lsls	r1, r1, #11
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	4b9f      	ldr	r3, [pc, #636]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b9e      	ldr	r3, [pc, #632]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e12:	2180      	movs	r1, #128	@ 0x80
 8000e14:	0249      	lsls	r1, r1, #9
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0xdc>
 8000e1c:	4b9b      	ldr	r3, [pc, #620]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b9a      	ldr	r3, [pc, #616]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e22:	499b      	ldr	r1, [pc, #620]	@ (8001090 <HAL_RCC_OscConfig+0x338>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	4b98      	ldr	r3, [pc, #608]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b97      	ldr	r3, [pc, #604]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e2e:	4999      	ldr	r1, [pc, #612]	@ (8001094 <HAL_RCC_OscConfig+0x33c>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d014      	beq.n	8000e66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc98 	bl	8000770 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e46:	f7ff fc93 	bl	8000770 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b64      	cmp	r3, #100	@ 0x64
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e28e      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	4b8c      	ldr	r3, [pc, #560]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	4013      	ands	r3, r2
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0xee>
 8000e64:	e015      	b.n	8000e92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fc83 	bl	8000770 <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fc7e 	bl	8000770 <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	@ 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e279      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	4b82      	ldr	r3, [pc, #520]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x118>
 8000e8e:	e000      	b.n	8000e92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e90:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d100      	bne.n	8000e9e <HAL_RCC_OscConfig+0x146>
 8000e9c:	e06c      	b.n	8000f78 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d00e      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ea8:	4b78      	ldr	r3, [pc, #480]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	220c      	movs	r2, #12
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d11f      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x19c>
 8000eb4:	4b75      	ldr	r3, [pc, #468]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	23c0      	movs	r3, #192	@ 0xc0
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b71      	ldr	r3, [pc, #452]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d005      	beq.n	8000edc <HAL_RCC_OscConfig+0x184>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e24c      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4b6b      	ldr	r3, [pc, #428]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	22f8      	movs	r2, #248	@ 0xf8
 8000ee2:	4393      	bics	r3, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	00da      	lsls	r2, r3, #3
 8000eec:	4b67      	ldr	r3, [pc, #412]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	e041      	b.n	8000f78 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d024      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efc:	4b63      	ldr	r3, [pc, #396]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b62      	ldr	r3, [pc, #392]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc32 	bl	8000770 <HAL_GetTick>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fc2d 	bl	8000770 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e228      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	4b59      	ldr	r3, [pc, #356]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2202      	movs	r2, #2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f1      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b57      	ldr	r3, [pc, #348]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	22f8      	movs	r2, #248	@ 0xf8
 8000f34:	4393      	bics	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4b53      	ldr	r3, [pc, #332]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e018      	b.n	8000f78 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc0d 	bl	8000770 <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fc08 	bl	8000770 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e203      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	4b47      	ldr	r3, [pc, #284]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2202      	movs	r2, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	d1f1      	bne.n	8000f5c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d036      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d019      	beq.n	8000fbe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f8a:	4b40      	ldr	r3, [pc, #256]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	430a      	orrs	r2, r1
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbeb 	bl	8000770 <HAL_GetTick>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbe6 	bl	8000770 <HAL_GetTick>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1e1      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d0f1      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x248>
 8000fbc:	e018      	b.n	8000ff0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000fc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fc2:	4b32      	ldr	r3, [pc, #200]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fbd1 	bl	8000770 <HAL_GetTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fbcc 	bl	8000770 <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1c7      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe6:	4b29      	ldr	r3, [pc, #164]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d1f1      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_RCC_OscConfig+0x2a4>
 8000ffa:	e0b5      	b.n	8001168 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffc:	201f      	movs	r0, #31
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	055b      	lsls	r3, r3, #21
 800100c:	4013      	ands	r3, r2
 800100e:	d110      	bne.n	8001032 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	0549      	lsls	r1, r1, #21
 800101a:	430a      	orrs	r2, r1
 800101c:	61da      	str	r2, [r3, #28]
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8001020:	69da      	ldr	r2, [r3, #28]
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	055b      	lsls	r3, r3, #21
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800102c:	183b      	adds	r3, r7, r0
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_RCC_OscConfig+0x340>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4013      	ands	r3, r2
 800103c:	d11a      	bne.n	8001074 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_RCC_OscConfig+0x340>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_RCC_OscConfig+0x340>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	0049      	lsls	r1, r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104c:	f7ff fb90 	bl	8000770 <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001056:	f7ff fb8b 	bl	8000770 <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b64      	cmp	r3, #100	@ 0x64
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e186      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_RCC_OscConfig+0x340>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4013      	ands	r3, r2
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10f      	bne.n	800109c <HAL_RCC_OscConfig+0x344>
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	4b02      	ldr	r3, [pc, #8]	@ (800108c <HAL_RCC_OscConfig+0x334>)
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	621a      	str	r2, [r3, #32]
 8001088:	e036      	b.n	80010f8 <HAL_RCC_OscConfig+0x3a0>
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	40021000 	.word	0x40021000
 8001090:	fffeffff 	.word	0xfffeffff
 8001094:	fffbffff 	.word	0xfffbffff
 8001098:	40007000 	.word	0x40007000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x366>
 80010a4:	4bb6      	ldr	r3, [pc, #728]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4bb5      	ldr	r3, [pc, #724]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	438a      	bics	r2, r1
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4bb2      	ldr	r3, [pc, #712]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	e01c      	b.n	80010f8 <HAL_RCC_OscConfig+0x3a0>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x388>
 80010c6:	4bae      	ldr	r3, [pc, #696]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	4bad      	ldr	r3, [pc, #692]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	621a      	str	r2, [r3, #32]
 80010d2:	4bab      	ldr	r3, [pc, #684]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	4baa      	ldr	r3, [pc, #680]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	621a      	str	r2, [r3, #32]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x3a0>
 80010e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4ba6      	ldr	r3, [pc, #664]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	621a      	str	r2, [r3, #32]
 80010ec:	4ba4      	ldr	r3, [pc, #656]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4ba3      	ldr	r3, [pc, #652]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	438a      	bics	r2, r1
 80010f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d014      	beq.n	800112a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fb36 	bl	8000770 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e009      	b.n	800111e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb31 	bl	8000770 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a9b      	ldr	r2, [pc, #620]	@ (8001384 <HAL_RCC_OscConfig+0x62c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e12b      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111e:	4b98      	ldr	r3, [pc, #608]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x3b2>
 8001128:	e013      	b.n	8001152 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fb21 	bl	8000770 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	e009      	b.n	8001148 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001134:	f7ff fb1c 	bl	8000770 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	4a91      	ldr	r2, [pc, #580]	@ (8001384 <HAL_RCC_OscConfig+0x62c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e116      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	4b8d      	ldr	r3, [pc, #564]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001152:	231f      	movs	r3, #31
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d105      	bne.n	8001168 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115c:	4b88      	ldr	r3, [pc, #544]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	4b87      	ldr	r3, [pc, #540]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001162:	4989      	ldr	r1, [pc, #548]	@ (8001388 <HAL_RCC_OscConfig+0x630>)
 8001164:	400a      	ands	r2, r1
 8001166:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2210      	movs	r2, #16
 800116e:	4013      	ands	r3, r2
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d12a      	bne.n	80011d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800117a:	4b81      	ldr	r3, [pc, #516]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117e:	4b80      	ldr	r3, [pc, #512]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001180:	2104      	movs	r1, #4
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001186:	4b7e      	ldr	r3, [pc, #504]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800118a:	4b7d      	ldr	r3, [pc, #500]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff faed 	bl	8000770 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800119c:	f7ff fae8 	bl	8000770 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0e3      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ae:	4b74      	ldr	r3, [pc, #464]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f1      	beq.n	800119c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011b8:	4b71      	ldr	r3, [pc, #452]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011bc:	22f8      	movs	r2, #248	@ 0xf8
 80011be:	4393      	bics	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ce:	e034      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	3305      	adds	r3, #5
 80011d6:	d111      	bne.n	80011fc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011d8:	4b69      	ldr	r3, [pc, #420]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011dc:	4b68      	ldr	r3, [pc, #416]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011de:	2104      	movs	r1, #4
 80011e0:	438a      	bics	r2, r1
 80011e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e4:	4b66      	ldr	r3, [pc, #408]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	22f8      	movs	r2, #248	@ 0xf8
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4b62      	ldr	r3, [pc, #392]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011fc:	4b60      	ldr	r3, [pc, #384]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001200:	4b5f      	ldr	r3, [pc, #380]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001202:	2104      	movs	r1, #4
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001208:	4b5d      	ldr	r3, [pc, #372]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120c:	4b5c      	ldr	r3, [pc, #368]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800120e:	2101      	movs	r1, #1
 8001210:	438a      	bics	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff faac 	bl	8000770 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800121e:	f7ff faa7 	bl	8000770 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0a2      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001230:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001234:	2202      	movs	r2, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d1f1      	bne.n	800121e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x4ec>
 8001242:	e097      	b.n	8001374 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b4e      	ldr	r3, [pc, #312]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	2b08      	cmp	r3, #8
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x4fa>
 8001250:	e06b      	b.n	800132a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d14c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b48      	ldr	r3, [pc, #288]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001260:	494a      	ldr	r1, [pc, #296]	@ (800138c <HAL_RCC_OscConfig+0x634>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fa83 	bl	8000770 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fa7e 	bl	8000770 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e079      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	220f      	movs	r2, #15
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800129c:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012a2:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001390 <HAL_RCC_OscConfig+0x638>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	0449      	lsls	r1, r1, #17
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fa51 	bl	8000770 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fa4c 	bl	8000770 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e047      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	049b      	lsls	r3, r3, #18
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x57c>
 80012f2:	e03f      	b.n	8001374 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 80012fa:	4924      	ldr	r1, [pc, #144]	@ (800138c <HAL_RCC_OscConfig+0x634>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fa36 	bl	8000770 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fa31 	bl	8000770 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e02c      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	049b      	lsls	r3, r3, #18
 8001324:	4013      	ands	r3, r2
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x5b2>
 8001328:	e024      	b.n	8001374 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e01f      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_RCC_OscConfig+0x628>)
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	23c0      	movs	r3, #192	@ 0xc0
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	429a      	cmp	r2, r3
 8001350:	d10e      	bne.n	8001370 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	220f      	movs	r2, #15
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	23f0      	movs	r3, #240	@ 0xf0
 8001364:	039b      	lsls	r3, r3, #14
 8001366:	401a      	ands	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b008      	add	sp, #32
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	40021000 	.word	0x40021000
 8001384:	00001388 	.word	0x00001388
 8001388:	efffffff 	.word	0xefffffff
 800138c:	feffffff 	.word	0xfeffffff
 8001390:	ffc27fff 	.word	0xffc27fff

08001394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b3      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d911      	bls.n	80013da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4393      	bics	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	4b55      	ldr	r3, [pc, #340]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c8:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d001      	beq.n	80013da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e09a      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d015      	beq.n	8001410 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2204      	movs	r2, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d006      	beq.n	80013fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ee:	4b4b      	ldr	r3, [pc, #300]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80013f4:	21e0      	movs	r1, #224	@ 0xe0
 80013f6:	00c9      	lsls	r1, r1, #3
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b47      	ldr	r3, [pc, #284]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	22f0      	movs	r2, #240	@ 0xf0
 8001402:	4393      	bics	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	d040      	beq.n	800149c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	@ 0x80
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d114      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06e      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	049b      	lsls	r3, r3, #18
 8001442:	4013      	ands	r3, r2
 8001444:	d108      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e062      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e05b      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4393      	bics	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff f980 	bl	8000770 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001474:	e009      	b.n	800148a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001476:	f7ff f97b 	bl	8000770 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <HAL_RCC_ClockConfig+0x18c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e042      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	220c      	movs	r2, #12
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1ec      	bne.n	8001476 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d211      	bcs.n	80014ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4393      	bics	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e020      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d009      	beq.n	80014ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_RCC_ClockConfig+0x190>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014ec:	f000 f820 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80014f0:	0001      	movs	r1, r0
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_RCC_ClockConfig+0x188>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	220f      	movs	r2, #15
 80014fa:	4013      	ands	r3, r2
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_RCC_ClockConfig+0x194>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	000a      	movs	r2, r1
 8001502:	40da      	lsrs	r2, r3
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_ClockConfig+0x198>)
 8001506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff f8eb 	bl	80006e4 <HAL_InitTick>
  
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000
 800151c:	40021000 	.word	0x40021000
 8001520:	00001388 	.word	0x00001388
 8001524:	fffff8ff 	.word	0xfffff8ff
 8001528:	08002bac 	.word	0x08002bac
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	220c      	movs	r2, #12
 8001554:	4013      	ands	r3, r2
 8001556:	2b04      	cmp	r3, #4
 8001558:	d002      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x30>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d003      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x36>
 800155e:	e02e      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001562:	613b      	str	r3, [r7, #16]
      break;
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	220f      	movs	r2, #15
 800156c:	4013      	ands	r3, r2
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	220f      	movs	r2, #15
 800157a:	4013      	ands	r3, r2
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_RCC_GetSysClockFreq+0xac>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	23c0      	movs	r3, #192	@ 0xc0
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	401a      	ands	r2, r3
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	429a      	cmp	r2, r3
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001596:	f7fe fdc1 	bl	800011c <__udivsi3>
 800159a:	0003      	movs	r3, r0
 800159c:	001a      	movs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4353      	muls	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	480a      	ldr	r0, [pc, #40]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015aa:	f7fe fdb7 	bl	800011c <__udivsi3>
 80015ae:	0003      	movs	r3, r0
 80015b0:	001a      	movs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4353      	muls	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
      break;
 80015bc:	e002      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c0:	613b      	str	r3, [r7, #16]
      break;
 80015c2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015c4:	693b      	ldr	r3, [r7, #16]
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b006      	add	sp, #24
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000
 80015d4:	007a1200 	.word	0x007a1200
 80015d8:	08002bc4 	.word	0x08002bc4
 80015dc:	08002bd4 	.word	0x08002bd4

080015e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e4:	4b02      	ldr	r3, [pc, #8]	@ (80015f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f8:	f7ff fff2 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 80015fc:	0001      	movs	r1, r0
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_RCC_GetPCLK1Freq+0x28>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	40d9      	lsrs	r1, r3
 800160e:	000b      	movs	r3, r1
}    
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	40021000 	.word	0x40021000
 800161c:	08002bbc 	.word	0x08002bbc

08001620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e044      	b.n	80016bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2278      	movs	r2, #120	@ 0x78
 800163e:	2100      	movs	r1, #0
 8001640:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	0018      	movs	r0, r3
 8001646:	f7fe ff8f 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2224      	movs	r2, #36	@ 0x24
 800164e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fd5e 	bl	800212c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0018      	movs	r0, r3
 8001674:	f000 fc02 	bl	8001e7c <UART_SetConfig>
 8001678:	0003      	movs	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e01c      	b.n	80016bc <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <HAL_UART_Init+0xa4>)
 800168e:	400a      	ands	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2108      	movs	r1, #8
 800169e:	438a      	bics	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 fded 	bl	8002294 <UART_CheckIdleState>
 80016ba:	0003      	movs	r3, r0
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b002      	add	sp, #8
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	fffff7ff 	.word	0xfffff7ff

080016c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d000      	beq.n	80016e2 <HAL_UART_Transmit+0x1a>
 80016e0:	e08c      	b.n	80017fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_UART_Transmit+0x28>
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e084      	b.n	80017fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d109      	bne.n	8001714 <HAL_UART_Transmit+0x4c>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d001      	beq.n	8001714 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e074      	b.n	80017fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2284      	movs	r2, #132	@ 0x84
 8001718:	2100      	movs	r1, #0
 800171a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2221      	movs	r2, #33	@ 0x21
 8001720:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001722:	f7ff f825 	bl	8000770 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1dba      	adds	r2, r7, #6
 800172e:	2150      	movs	r1, #80	@ 0x50
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1dba      	adds	r2, r7, #6
 8001738:	2152      	movs	r1, #82	@ 0x52
 800173a:	8812      	ldrh	r2, [r2, #0]
 800173c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	429a      	cmp	r2, r3
 8001748:	d108      	bne.n	800175c <HAL_UART_Transmit+0x94>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d104      	bne.n	800175c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e003      	b.n	8001764 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001764:	e02f      	b.n	80017c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	0013      	movs	r3, r2
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	f000 fe36 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d004      	beq.n	8001786 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e03b      	b.n	80017fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	05d2      	lsls	r2, r2, #23
 8001796:	0dd2      	lsrs	r2, r2, #23
 8001798:	b292      	uxth	r2, r2
 800179a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	3302      	adds	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	e007      	b.n	80017b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2252      	movs	r2, #82	@ 0x52
 80017b8:	5a9b      	ldrh	r3, [r3, r2]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b299      	uxth	r1, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2252      	movs	r2, #82	@ 0x52
 80017c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2252      	movs	r2, #82	@ 0x52
 80017ca:	5a9b      	ldrh	r3, [r3, r2]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1c9      	bne.n	8001766 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	0013      	movs	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	2140      	movs	r1, #64	@ 0x40
 80017e0:	f000 fe00 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e005      	b.n	80017fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e000      	b.n	80017fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
  }
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b008      	add	sp, #32
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b088      	sub	sp, #32
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2280      	movs	r2, #128	@ 0x80
 8001818:	589b      	ldr	r3, [r3, r2]
 800181a:	2b20      	cmp	r3, #32
 800181c:	d145      	bne.n	80018aa <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_UART_Receive_IT+0x26>
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e03d      	b.n	80018ac <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	429a      	cmp	r2, r3
 800183a:	d109      	bne.n	8001850 <HAL_UART_Receive_IT+0x4a>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d001      	beq.n	8001850 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e02d      	b.n	80018ac <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	4013      	ands	r3, r2
 8001862:	d019      	beq.n	8001898 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001864:	f3ef 8310 	mrs	r3, PRIMASK
 8001868:	613b      	str	r3, [r7, #16]
  return(result);
 800186a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f383 8810 	msr	PRIMASK, r3
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	04c9      	lsls	r1, r1, #19
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f383 8810 	msr	PRIMASK, r3
}
 8001896:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	881a      	ldrh	r2, [r3, #0]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 fe0f 	bl	80024c4 <UART_Start_Receive_IT>
 80018a6:	0003      	movs	r3, r0
 80018a8:	e000      	b.n	80018ac <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
  }
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b008      	add	sp, #32
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0ab      	sub	sp, #172	@ 0xac
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	22a4      	movs	r2, #164	@ 0xa4
 80018c4:	18b9      	adds	r1, r7, r2
 80018c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	20a0      	movs	r0, #160	@ 0xa0
 80018d0:	1839      	adds	r1, r7, r0
 80018d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	219c      	movs	r1, #156	@ 0x9c
 80018dc:	1879      	adds	r1, r7, r1
 80018de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80018e0:	0011      	movs	r1, r2
 80018e2:	18bb      	adds	r3, r7, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a99      	ldr	r2, [pc, #612]	@ (8001b4c <HAL_UART_IRQHandler+0x298>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	2298      	movs	r2, #152	@ 0x98
 80018ec:	18bc      	adds	r4, r7, r2
 80018ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80018f0:	18bb      	adds	r3, r7, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d114      	bne.n	8001922 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2220      	movs	r2, #32
 80018fe:	4013      	ands	r3, r2
 8001900:	d00f      	beq.n	8001922 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001902:	183b      	adds	r3, r7, r0
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2220      	movs	r2, #32
 8001908:	4013      	ands	r3, r2
 800190a:	d00a      	beq.n	8001922 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001910:	2b00      	cmp	r3, #0
 8001912:	d100      	bne.n	8001916 <HAL_UART_IRQHandler+0x62>
 8001914:	e286      	b.n	8001e24 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	0010      	movs	r0, r2
 800191e:	4798      	blx	r3
      }
      return;
 8001920:	e280      	b.n	8001e24 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001922:	2398      	movs	r3, #152	@ 0x98
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <HAL_UART_IRQHandler+0x7a>
 800192c:	e114      	b.n	8001b58 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800192e:	239c      	movs	r3, #156	@ 0x9c
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d106      	bne.n	8001948 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800193a:	23a0      	movs	r3, #160	@ 0xa0
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a83      	ldr	r2, [pc, #524]	@ (8001b50 <HAL_UART_IRQHandler+0x29c>)
 8001942:	4013      	ands	r3, r2
 8001944:	d100      	bne.n	8001948 <HAL_UART_IRQHandler+0x94>
 8001946:	e107      	b.n	8001b58 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001948:	23a4      	movs	r3, #164	@ 0xa4
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d012      	beq.n	800197a <HAL_UART_IRQHandler+0xc6>
 8001954:	23a0      	movs	r3, #160	@ 0xa0
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d00b      	beq.n	800197a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2284      	movs	r2, #132	@ 0x84
 800196e:	589b      	ldr	r3, [r3, r2]
 8001970:	2201      	movs	r2, #1
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2184      	movs	r1, #132	@ 0x84
 8001978:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800197a:	23a4      	movs	r3, #164	@ 0xa4
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d011      	beq.n	80019aa <HAL_UART_IRQHandler+0xf6>
 8001986:	239c      	movs	r3, #156	@ 0x9c
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	d00b      	beq.n	80019aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2284      	movs	r2, #132	@ 0x84
 800199e:	589b      	ldr	r3, [r3, r2]
 80019a0:	2204      	movs	r2, #4
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2184      	movs	r1, #132	@ 0x84
 80019a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80019aa:	23a4      	movs	r3, #164	@ 0xa4
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d011      	beq.n	80019da <HAL_UART_IRQHandler+0x126>
 80019b6:	239c      	movs	r3, #156	@ 0x9c
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d00b      	beq.n	80019da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2284      	movs	r2, #132	@ 0x84
 80019ce:	589b      	ldr	r3, [r3, r2]
 80019d0:	2202      	movs	r2, #2
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2184      	movs	r1, #132	@ 0x84
 80019d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80019da:	23a4      	movs	r3, #164	@ 0xa4
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2208      	movs	r2, #8
 80019e2:	4013      	ands	r3, r2
 80019e4:	d017      	beq.n	8001a16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80019e6:	23a0      	movs	r3, #160	@ 0xa0
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2220      	movs	r2, #32
 80019ee:	4013      	ands	r3, r2
 80019f0:	d105      	bne.n	80019fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80019f2:	239c      	movs	r3, #156	@ 0x9c
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80019fc:	d00b      	beq.n	8001a16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2284      	movs	r2, #132	@ 0x84
 8001a0a:	589b      	ldr	r3, [r3, r2]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2184      	movs	r1, #132	@ 0x84
 8001a14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001a16:	23a4      	movs	r3, #164	@ 0xa4
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_UART_IRQHandler+0x198>
 8001a24:	23a0      	movs	r3, #160	@ 0xa0
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	04db      	lsls	r3, r3, #19
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d00c      	beq.n	8001a4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2284      	movs	r2, #132	@ 0x84
 8001a40:	589b      	ldr	r3, [r3, r2]
 8001a42:	2220      	movs	r2, #32
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2184      	movs	r1, #132	@ 0x84
 8001a4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2284      	movs	r2, #132	@ 0x84
 8001a50:	589b      	ldr	r3, [r3, r2]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_UART_IRQHandler+0x1a4>
 8001a56:	e1e7      	b.n	8001e28 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a58:	23a4      	movs	r3, #164	@ 0xa4
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	4013      	ands	r3, r2
 8001a62:	d00e      	beq.n	8001a82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a64:	23a0      	movs	r3, #160	@ 0xa0
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d008      	beq.n	8001a82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	0010      	movs	r0, r2
 8001a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2284      	movs	r2, #132	@ 0x84
 8001a86:	589b      	ldr	r3, [r3, r2]
 8001a88:	2194      	movs	r1, #148	@ 0x94
 8001a8a:	187a      	adds	r2, r7, r1
 8001a8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b40      	cmp	r3, #64	@ 0x40
 8001a9a:	d004      	beq.n	8001aa6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2228      	movs	r2, #40	@ 0x28
 8001aa2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001aa4:	d047      	beq.n	8001b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 fdd5 	bl	8002658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2240      	movs	r2, #64	@ 0x40
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b40      	cmp	r3, #64	@ 0x40
 8001aba:	d137      	bne.n	8001b2c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001abc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ac4:	2090      	movs	r0, #144	@ 0x90
 8001ac6:	183a      	adds	r2, r7, r0
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad0:	f383 8810 	msr	PRIMASK, r3
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2140      	movs	r1, #64	@ 0x40
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aee:	f383 8810 	msr	PRIMASK, r3
}
 8001af2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <HAL_UART_IRQHandler+0x2a0>)
 8001b02:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe ff51 	bl	80009b0 <HAL_DMA_Abort_IT>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d01a      	beq.n	8001b48 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b20:	e012      	b.n	8001b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f995 	bl	8001e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b2a:	e00d      	b.n	8001b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f990 	bl	8001e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b34:	e008      	b.n	8001b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 f98b 	bl	8001e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2284      	movs	r2, #132	@ 0x84
 8001b42:	2100      	movs	r1, #0
 8001b44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001b46:	e16f      	b.n	8001e28 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b48:	46c0      	nop			@ (mov r8, r8)
    return;
 8001b4a:	e16d      	b.n	8001e28 <HAL_UART_IRQHandler+0x574>
 8001b4c:	0000080f 	.word	0x0000080f
 8001b50:	04000120 	.word	0x04000120
 8001b54:	08002721 	.word	0x08002721

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d000      	beq.n	8001b62 <HAL_UART_IRQHandler+0x2ae>
 8001b60:	e139      	b.n	8001dd6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001b62:	23a4      	movs	r3, #164	@ 0xa4
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <HAL_UART_IRQHandler+0x2bc>
 8001b6e:	e132      	b.n	8001dd6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001b70:	23a0      	movs	r3, #160	@ 0xa0
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2210      	movs	r2, #16
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <HAL_UART_IRQHandler+0x2ca>
 8001b7c:	e12b      	b.n	8001dd6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2240      	movs	r2, #64	@ 0x40
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b40      	cmp	r3, #64	@ 0x40
 8001b92:	d000      	beq.n	8001b96 <HAL_UART_IRQHandler+0x2e2>
 8001b94:	e09f      	b.n	8001cd6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	217e      	movs	r1, #126	@ 0x7e
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <HAL_UART_IRQHandler+0x2fa>
 8001bac:	e13e      	b.n	8001e2c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2258      	movs	r2, #88	@ 0x58
 8001bb2:	5a9b      	ldrh	r3, [r3, r2]
 8001bb4:	187a      	adds	r2, r7, r1
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d300      	bcc.n	8001bbe <HAL_UART_IRQHandler+0x30a>
 8001bbc:	e136      	b.n	8001e2c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	187a      	adds	r2, r7, r1
 8001bc2:	215a      	movs	r1, #90	@ 0x5a
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d06f      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001bdc:	2301      	movs	r3, #1
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	f383 8810 	msr	PRIMASK, r3
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4992      	ldr	r1, [pc, #584]	@ (8001e3c <HAL_UART_IRQHandler+0x588>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfe:	f383 8810 	msr	PRIMASK, r3
}
 8001c02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c04:	f3ef 8310 	mrs	r3, PRIMASK
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c0e:	2301      	movs	r3, #1
 8001c10:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c14:	f383 8810 	msr	PRIMASK, r3
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	438a      	bics	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c36:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c40:	2301      	movs	r3, #1
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c46:	f383 8810 	msr	PRIMASK, r3
}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2140      	movs	r1, #64	@ 0x40
 8001c58:	438a      	bics	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c5e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c62:	f383 8810 	msr	PRIMASK, r3
}
 8001c66:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c76:	f3ef 8310 	mrs	r3, PRIMASK
 8001c7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c80:	2301      	movs	r3, #1
 8001c82:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c86:	f383 8810 	msr	PRIMASK, r3
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2110      	movs	r1, #16
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca2:	f383 8810 	msr	PRIMASK, r3
}
 8001ca6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7fe fe47 	bl	8000940 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2258      	movs	r2, #88	@ 0x58
 8001cbc:	5a9a      	ldrh	r2, [r3, r2]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	215a      	movs	r1, #90	@ 0x5a
 8001cc2:	5a5b      	ldrh	r3, [r3, r1]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f8c8 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001cd4:	e0aa      	b.n	8001e2c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2258      	movs	r2, #88	@ 0x58
 8001cda:	5a99      	ldrh	r1, [r3, r2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	225a      	movs	r2, #90	@ 0x5a
 8001ce0:	5a9b      	ldrh	r3, [r3, r2]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	208e      	movs	r0, #142	@ 0x8e
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	1a8a      	subs	r2, r1, r2
 8001cea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	225a      	movs	r2, #90	@ 0x5a
 8001cf0:	5a9b      	ldrh	r3, [r3, r2]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d100      	bne.n	8001cfa <HAL_UART_IRQHandler+0x446>
 8001cf8:	e09a      	b.n	8001e30 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d100      	bne.n	8001d04 <HAL_UART_IRQHandler+0x450>
 8001d02:	e095      	b.n	8001e30 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d04:	f3ef 8310 	mrs	r3, PRIMASK
 8001d08:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d0c:	2488      	movs	r4, #136	@ 0x88
 8001d0e:	193a      	adds	r2, r7, r4
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f383 8810 	msr	PRIMASK, r3
}
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4945      	ldr	r1, [pc, #276]	@ (8001e40 <HAL_UART_IRQHandler+0x58c>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f383 8810 	msr	PRIMASK, r3
}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d40:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d44:	2484      	movs	r4, #132	@ 0x84
 8001d46:	193a      	adds	r2, r7, r4
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f383 8810 	msr	PRIMASK, r3
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	438a      	bics	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	193b      	adds	r3, r7, r4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f383 8810 	msr	PRIMASK, r3
}
 8001d72:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2280      	movs	r2, #128	@ 0x80
 8001d78:	2120      	movs	r1, #32
 8001d7a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d88:	f3ef 8310 	mrs	r3, PRIMASK
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d90:	2480      	movs	r4, #128	@ 0x80
 8001d92:	193a      	adds	r2, r7, r4
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9c:	f383 8810 	msr	PRIMASK, r3
}
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2110      	movs	r1, #16
 8001dae:	438a      	bics	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dba:	f383 8810 	msr	PRIMASK, r3
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f848 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001dd4:	e02c      	b.n	8001e30 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001dd6:	23a4      	movs	r3, #164	@ 0xa4
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00f      	beq.n	8001e02 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001de2:	23a0      	movs	r3, #160	@ 0xa0
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	4013      	ands	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01e      	beq.n	8001e34 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	4798      	blx	r3
    }
    return;
 8001e00:	e018      	b.n	8001e34 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e02:	23a4      	movs	r3, #164	@ 0xa4
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2240      	movs	r2, #64	@ 0x40
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_UART_IRQHandler+0x582>
 8001e0e:	23a0      	movs	r3, #160	@ 0xa0
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	4013      	ands	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fc96 	bl	800274e <UART_EndTransmit_IT>
    return;
 8001e22:	e008      	b.n	8001e36 <HAL_UART_IRQHandler+0x582>
      return;
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	e006      	b.n	8001e36 <HAL_UART_IRQHandler+0x582>
    return;
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	e004      	b.n	8001e36 <HAL_UART_IRQHandler+0x582>
      return;
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	e002      	b.n	8001e36 <HAL_UART_IRQHandler+0x582>
      return;
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	e000      	b.n	8001e36 <HAL_UART_IRQHandler+0x582>
    return;
 8001e34:	46c0      	nop			@ (mov r8, r8)
  }

}
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b02b      	add	sp, #172	@ 0xac
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	fffffeff 	.word	0xfffffeff
 8001e40:	fffffedf 	.word	0xfffffedf

08001e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	1cbb      	adds	r3, r7, #2
 8001e70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e84:	231e      	movs	r3, #30
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a97      	ldr	r2, [pc, #604]	@ (8002108 <UART_SetConfig+0x28c>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a92      	ldr	r2, [pc, #584]	@ (800210c <UART_SetConfig+0x290>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a89      	ldr	r2, [pc, #548]	@ (8002110 <UART_SetConfig+0x294>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a85      	ldr	r2, [pc, #532]	@ (8002114 <UART_SetConfig+0x298>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d127      	bne.n	8001f52 <UART_SetConfig+0xd6>
 8001f02:	4b85      	ldr	r3, [pc, #532]	@ (8002118 <UART_SetConfig+0x29c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d00d      	beq.n	8001f2a <UART_SetConfig+0xae>
 8001f0e:	d81b      	bhi.n	8001f48 <UART_SetConfig+0xcc>
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d014      	beq.n	8001f3e <UART_SetConfig+0xc2>
 8001f14:	d818      	bhi.n	8001f48 <UART_SetConfig+0xcc>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <UART_SetConfig+0xa4>
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d00a      	beq.n	8001f34 <UART_SetConfig+0xb8>
 8001f1e:	e013      	b.n	8001f48 <UART_SetConfig+0xcc>
 8001f20:	231f      	movs	r3, #31
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e035      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e030      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f34:	231f      	movs	r3, #31
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2204      	movs	r2, #4
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e02b      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f3e:	231f      	movs	r3, #31
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2208      	movs	r2, #8
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e026      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f48:	231f      	movs	r3, #31
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e021      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a71      	ldr	r2, [pc, #452]	@ (800211c <UART_SetConfig+0x2a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d104      	bne.n	8001f66 <UART_SetConfig+0xea>
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e017      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	@ (8002120 <UART_SetConfig+0x2a4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d104      	bne.n	8001f7a <UART_SetConfig+0xfe>
 8001f70:	231f      	movs	r3, #31
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e00d      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a69      	ldr	r2, [pc, #420]	@ (8002124 <UART_SetConfig+0x2a8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d104      	bne.n	8001f8e <UART_SetConfig+0x112>
 8001f84:	231f      	movs	r3, #31
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e003      	b.n	8001f96 <UART_SetConfig+0x11a>
 8001f8e:	231f      	movs	r3, #31
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2210      	movs	r2, #16
 8001f94:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d15c      	bne.n	800205c <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d015      	beq.n	8001fd8 <UART_SetConfig+0x15c>
 8001fac:	dc18      	bgt.n	8001fe0 <UART_SetConfig+0x164>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d00d      	beq.n	8001fce <UART_SetConfig+0x152>
 8001fb2:	dc15      	bgt.n	8001fe0 <UART_SetConfig+0x164>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <UART_SetConfig+0x142>
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d005      	beq.n	8001fc8 <UART_SetConfig+0x14c>
 8001fbc:	e010      	b.n	8001fe0 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fbe:	f7ff fb19 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	61bb      	str	r3, [r7, #24]
        break;
 8001fc6:	e012      	b.n	8001fee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fc8:	4b57      	ldr	r3, [pc, #348]	@ (8002128 <UART_SetConfig+0x2ac>)
 8001fca:	61bb      	str	r3, [r7, #24]
        break;
 8001fcc:	e00f      	b.n	8001fee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fce:	f7ff faaf 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	61bb      	str	r3, [r7, #24]
        break;
 8001fd6:	e00a      	b.n	8001fee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	61bb      	str	r3, [r7, #24]
        break;
 8001fde:	e006      	b.n	8001fee <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fe4:	231e      	movs	r3, #30
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
        break;
 8001fec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <UART_SetConfig+0x17a>
 8001ff4:	e07a      	b.n	80020ec <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	005a      	lsls	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	18d2      	adds	r2, r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0019      	movs	r1, r3
 8002008:	0010      	movs	r0, r2
 800200a:	f7fe f887 	bl	800011c <__udivsi3>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d91c      	bls.n	8002052 <UART_SetConfig+0x1d6>
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	025b      	lsls	r3, r3, #9
 800201e:	429a      	cmp	r2, r3
 8002020:	d217      	bcs.n	8002052 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	b29a      	uxth	r2, r3
 8002026:	200e      	movs	r0, #14
 8002028:	183b      	adds	r3, r7, r0
 800202a:	210f      	movs	r1, #15
 800202c:	438a      	bics	r2, r1
 800202e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	2207      	movs	r2, #7
 8002038:	4013      	ands	r3, r2
 800203a:	b299      	uxth	r1, r3
 800203c:	183b      	adds	r3, r7, r0
 800203e:	183a      	adds	r2, r7, r0
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	183a      	adds	r2, r7, r0
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	e04c      	b.n	80020ec <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002052:	231e      	movs	r3, #30
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e047      	b.n	80020ec <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d015      	beq.n	8002092 <UART_SetConfig+0x216>
 8002066:	dc18      	bgt.n	800209a <UART_SetConfig+0x21e>
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00d      	beq.n	8002088 <UART_SetConfig+0x20c>
 800206c:	dc15      	bgt.n	800209a <UART_SetConfig+0x21e>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <UART_SetConfig+0x1fc>
 8002072:	2b02      	cmp	r3, #2
 8002074:	d005      	beq.n	8002082 <UART_SetConfig+0x206>
 8002076:	e010      	b.n	800209a <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002078:	f7ff fabc 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 800207c:	0003      	movs	r3, r0
 800207e:	61bb      	str	r3, [r7, #24]
        break;
 8002080:	e012      	b.n	80020a8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002082:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <UART_SetConfig+0x2ac>)
 8002084:	61bb      	str	r3, [r7, #24]
        break;
 8002086:	e00f      	b.n	80020a8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002088:	f7ff fa52 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 800208c:	0003      	movs	r3, r0
 800208e:	61bb      	str	r3, [r7, #24]
        break;
 8002090:	e00a      	b.n	80020a8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	61bb      	str	r3, [r7, #24]
        break;
 8002098:	e006      	b.n	80020a8 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800209e:	231e      	movs	r3, #30
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01e      	beq.n	80020ec <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	085a      	lsrs	r2, r3, #1
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	18d2      	adds	r2, r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f7fe f82c 	bl	800011c <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	d90a      	bls.n	80020e4 <UART_SetConfig+0x268>
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	025b      	lsls	r3, r3, #9
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d205      	bcs.n	80020e4 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	e003      	b.n	80020ec <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80020e4:	231e      	movs	r3, #30
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80020f8:	231e      	movs	r3, #30
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b008      	add	sp, #32
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	efff69f3 	.word	0xefff69f3
 800210c:	ffffcfff 	.word	0xffffcfff
 8002110:	fffff4ff 	.word	0xfffff4ff
 8002114:	40013800 	.word	0x40013800
 8002118:	40021000 	.word	0x40021000
 800211c:	40004400 	.word	0x40004400
 8002120:	40004800 	.word	0x40004800
 8002124:	40004c00 	.word	0x40004c00
 8002128:	007a1200 	.word	0x007a1200

0800212c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	2208      	movs	r2, #8
 800213a:	4013      	ands	r3, r2
 800213c:	d00b      	beq.n	8002156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a4a      	ldr	r2, [pc, #296]	@ (8002270 <UART_AdvFeatureConfig+0x144>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	2201      	movs	r2, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d00b      	beq.n	8002178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a43      	ldr	r2, [pc, #268]	@ (8002274 <UART_AdvFeatureConfig+0x148>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d00b      	beq.n	800219a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a3b      	ldr	r2, [pc, #236]	@ (8002278 <UART_AdvFeatureConfig+0x14c>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d00b      	beq.n	80021bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a34      	ldr	r2, [pc, #208]	@ (800227c <UART_AdvFeatureConfig+0x150>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	2210      	movs	r2, #16
 80021c2:	4013      	ands	r3, r2
 80021c4:	d00b      	beq.n	80021de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <UART_AdvFeatureConfig+0x154>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	2220      	movs	r2, #32
 80021e4:	4013      	ands	r3, r2
 80021e6:	d00b      	beq.n	8002200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4a25      	ldr	r2, [pc, #148]	@ (8002284 <UART_AdvFeatureConfig+0x158>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	2240      	movs	r2, #64	@ 0x40
 8002206:	4013      	ands	r3, r2
 8002208:	d01d      	beq.n	8002246 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a1d      	ldr	r2, [pc, #116]	@ (8002288 <UART_AdvFeatureConfig+0x15c>)
 8002212:	4013      	ands	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	035b      	lsls	r3, r3, #13
 800222a:	429a      	cmp	r2, r3
 800222c:	d10b      	bne.n	8002246 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <UART_AdvFeatureConfig+0x160>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	4013      	ands	r3, r2
 800224e:	d00b      	beq.n	8002268 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <UART_AdvFeatureConfig+0x164>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
  }
}
 8002268:	46c0      	nop			@ (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}
 8002270:	ffff7fff 	.word	0xffff7fff
 8002274:	fffdffff 	.word	0xfffdffff
 8002278:	fffeffff 	.word	0xfffeffff
 800227c:	fffbffff 	.word	0xfffbffff
 8002280:	ffffefff 	.word	0xffffefff
 8002284:	ffffdfff 	.word	0xffffdfff
 8002288:	ffefffff 	.word	0xffefffff
 800228c:	ff9fffff 	.word	0xff9fffff
 8002290:	fff7ffff 	.word	0xfff7ffff

08002294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b092      	sub	sp, #72	@ 0x48
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2284      	movs	r2, #132	@ 0x84
 80022a0:	2100      	movs	r1, #0
 80022a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022a4:	f7fe fa64 	bl	8000770 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d12c      	bne.n	8002314 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022bc:	2280      	movs	r2, #128	@ 0x80
 80022be:	0391      	lsls	r1, r2, #14
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4a46      	ldr	r2, [pc, #280]	@ (80023dc <UART_CheckIdleState+0x148>)
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f000 f88c 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d021      	beq.n	8002314 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d0:	f3ef 8310 	mrs	r3, PRIMASK
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80022d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022da:	2301      	movs	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	438a      	bics	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fc:	f383 8810 	msr	PRIMASK, r3
}
 8002300:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2278      	movs	r2, #120	@ 0x78
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e05f      	b.n	80023d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2204      	movs	r2, #4
 800231c:	4013      	ands	r3, r2
 800231e:	2b04      	cmp	r3, #4
 8002320:	d146      	bne.n	80023b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002324:	2280      	movs	r2, #128	@ 0x80
 8002326:	03d1      	lsls	r1, r2, #15
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4a2c      	ldr	r2, [pc, #176]	@ (80023dc <UART_CheckIdleState+0x148>)
 800232c:	9200      	str	r2, [sp, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	f000 f858 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d03b      	beq.n	80023b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002338:	f3ef 8310 	mrs	r3, PRIMASK
 800233c:	60fb      	str	r3, [r7, #12]
  return(result);
 800233e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f383 8810 	msr	PRIMASK, r3
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4921      	ldr	r1, [pc, #132]	@ (80023e0 <UART_CheckIdleState+0x14c>)
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f383 8810 	msr	PRIMASK, r3
}
 8002368:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236a:	f3ef 8310 	mrs	r3, PRIMASK
 800236e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002370:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002372:	633b      	str	r3, [r7, #48]	@ 0x30
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f383 8810 	msr	PRIMASK, r3
}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f383 8810 	msr	PRIMASK, r3
}
 800239a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	2120      	movs	r1, #32
 80023a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2278      	movs	r2, #120	@ 0x78
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e011      	b.n	80023d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2280      	movs	r2, #128	@ 0x80
 80023ba:	2120      	movs	r1, #32
 80023bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2278      	movs	r2, #120	@ 0x78
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b010      	add	sp, #64	@ 0x40
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	01ffffff 	.word	0x01ffffff
 80023e0:	fffffedf 	.word	0xfffffedf

080023e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f4:	e051      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d04e      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7fe f9b8 	bl	8000770 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <UART_WaitOnFlagUntilTimeout+0x2e>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e051      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2204      	movs	r2, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d03b      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b80      	cmp	r3, #128	@ 0x80
 8002426:	d038      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b40      	cmp	r3, #64	@ 0x40
 800242c:	d035      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2208      	movs	r2, #8
 8002436:	4013      	ands	r3, r2
 8002438:	2b08      	cmp	r3, #8
 800243a:	d111      	bne.n	8002460 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2208      	movs	r2, #8
 8002442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f906 	bl	8002658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2284      	movs	r2, #132	@ 0x84
 8002450:	2108      	movs	r1, #8
 8002452:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2278      	movs	r2, #120	@ 0x78
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e02c      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	401a      	ands	r2, r3
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	429a      	cmp	r2, r3
 8002472:	d112      	bne.n	800249a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f8e9 	bl	8002658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2284      	movs	r2, #132	@ 0x84
 800248a:	2120      	movs	r1, #32
 800248c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2278      	movs	r2, #120	@ 0x78
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e00f      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	425a      	negs	r2, r3
 80024aa:	4153      	adcs	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	001a      	movs	r2, r3
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d09e      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b090      	sub	sp, #64	@ 0x40
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1dba      	adds	r2, r7, #6
 80024dc:	2158      	movs	r1, #88	@ 0x58
 80024de:	8812      	ldrh	r2, [r2, #0]
 80024e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1dba      	adds	r2, r7, #6
 80024e6:	215a      	movs	r1, #90	@ 0x5a
 80024e8:	8812      	ldrh	r2, [r2, #0]
 80024ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	015b      	lsls	r3, r3, #5
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10d      	bne.n	800251a <UART_Start_Receive_IT+0x56>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <UART_Start_Receive_IT+0x4c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	225c      	movs	r2, #92	@ 0x5c
 800250a:	4950      	ldr	r1, [pc, #320]	@ (800264c <UART_Start_Receive_IT+0x188>)
 800250c:	5299      	strh	r1, [r3, r2]
 800250e:	e02e      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	225c      	movs	r2, #92	@ 0x5c
 8002514:	21ff      	movs	r1, #255	@ 0xff
 8002516:	5299      	strh	r1, [r3, r2]
 8002518:	e029      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <UART_Start_Receive_IT+0x7a>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <UART_Start_Receive_IT+0x70>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	225c      	movs	r2, #92	@ 0x5c
 800252e:	21ff      	movs	r1, #255	@ 0xff
 8002530:	5299      	strh	r1, [r3, r2]
 8002532:	e01c      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	225c      	movs	r2, #92	@ 0x5c
 8002538:	217f      	movs	r1, #127	@ 0x7f
 800253a:	5299      	strh	r1, [r3, r2]
 800253c:	e017      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	055b      	lsls	r3, r3, #21
 8002546:	429a      	cmp	r2, r3
 8002548:	d10d      	bne.n	8002566 <UART_Start_Receive_IT+0xa2>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <UART_Start_Receive_IT+0x98>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	225c      	movs	r2, #92	@ 0x5c
 8002556:	217f      	movs	r1, #127	@ 0x7f
 8002558:	5299      	strh	r1, [r3, r2]
 800255a:	e008      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	225c      	movs	r2, #92	@ 0x5c
 8002560:	213f      	movs	r1, #63	@ 0x3f
 8002562:	5299      	strh	r1, [r3, r2]
 8002564:	e003      	b.n	800256e <UART_Start_Receive_IT+0xaa>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	225c      	movs	r2, #92	@ 0x5c
 800256a:	2100      	movs	r1, #0
 800256c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2284      	movs	r2, #132	@ 0x84
 8002572:	2100      	movs	r1, #0
 8002574:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	2122      	movs	r1, #34	@ 0x22
 800257c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257e:	f3ef 8310 	mrs	r3, PRIMASK
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002588:	2301      	movs	r3, #1
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258e:	f383 8810 	msr	PRIMASK, r3
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2101      	movs	r1, #1
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	f383 8810 	msr	PRIMASK, r3
}
 80025ae:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <UART_Start_Receive_IT+0x108>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <UART_Start_Receive_IT+0x18c>)
 80025c8:	669a      	str	r2, [r3, #104]	@ 0x68
 80025ca:	e002      	b.n	80025d2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a21      	ldr	r2, [pc, #132]	@ (8002654 <UART_Start_Receive_IT+0x190>)
 80025d0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8310 	mrs	r3, PRIMASK
 80025de:	61fb      	str	r3, [r7, #28]
  return(result);
 80025e0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f383 8810 	msr	PRIMASK, r3
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2190      	movs	r1, #144	@ 0x90
 80025fc:	0049      	lsls	r1, r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	e018      	b.n	8002640 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260e:	f3ef 8310 	mrs	r3, PRIMASK
 8002612:	613b      	str	r3, [r7, #16]
  return(result);
 8002614:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002618:	2301      	movs	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2120      	movs	r1, #32
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b010      	add	sp, #64	@ 0x40
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	000001ff 	.word	0x000001ff
 8002650:	0800295d 	.word	0x0800295d
 8002654:	080027a5 	.word	0x080027a5

08002658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	@ 0x38
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002660:	f3ef 8310 	mrs	r3, PRIMASK
 8002664:	617b      	str	r3, [r7, #20]
  return(result);
 8002666:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002668:	637b      	str	r3, [r7, #52]	@ 0x34
 800266a:	2301      	movs	r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f383 8810 	msr	PRIMASK, r3
}
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4926      	ldr	r1, [pc, #152]	@ (800271c <UART_EndRxTransfer+0xc4>)
 8002682:	400a      	ands	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f383 8810 	msr	PRIMASK, r3
}
 8002690:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002692:	f3ef 8310 	mrs	r3, PRIMASK
 8002696:	623b      	str	r3, [r7, #32]
  return(result);
 8002698:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f383 8810 	msr	PRIMASK, r3
}
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	438a      	bics	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026be:	f383 8810 	msr	PRIMASK, r3
}
 80026c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d118      	bne.n	80026fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026cc:	f3ef 8310 	mrs	r3, PRIMASK
 80026d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80026d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d6:	2301      	movs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2110      	movs	r1, #16
 80026ee:	438a      	bics	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2280      	movs	r2, #128	@ 0x80
 8002702:	2120      	movs	r1, #32
 8002704:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b00e      	add	sp, #56	@ 0x38
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	fffffedf 	.word	0xfffffedf

08002720 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	225a      	movs	r2, #90	@ 0x5a
 8002732:	2100      	movs	r1, #0
 8002734:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2252      	movs	r2, #82	@ 0x52
 800273a:	2100      	movs	r1, #0
 800273c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fb87 	bl	8001e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b004      	add	sp, #16
 800274c:	bd80      	pop	{r7, pc}

0800274e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002756:	f3ef 8310 	mrs	r3, PRIMASK
 800275a:	60bb      	str	r3, [r7, #8]
  return(result);
 800275c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	2301      	movs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	438a      	bics	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f383 8810 	msr	PRIMASK, r3
}
 8002786:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff fb54 	bl	8001e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800279c:	46c0      	nop			@ (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b006      	add	sp, #24
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	@ 0x50
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80027ac:	204e      	movs	r0, #78	@ 0x4e
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	215c      	movs	r1, #92	@ 0x5c
 80027b4:	5a52      	ldrh	r2, [r2, r1]
 80027b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2280      	movs	r2, #128	@ 0x80
 80027bc:	589b      	ldr	r3, [r3, r2]
 80027be:	2b22      	cmp	r3, #34	@ 0x22
 80027c0:	d000      	beq.n	80027c4 <UART_RxISR_8BIT+0x20>
 80027c2:	e0ba      	b.n	800293a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	214c      	movs	r1, #76	@ 0x4c
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80027ce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b2d9      	uxtb	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	400a      	ands	r2, r1
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	225a      	movs	r2, #90	@ 0x5a
 80027f4:	5a9b      	ldrh	r3, [r3, r2]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b299      	uxth	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	225a      	movs	r2, #90	@ 0x5a
 8002800:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	225a      	movs	r2, #90	@ 0x5a
 8002806:	5a9b      	ldrh	r3, [r3, r2]
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d000      	beq.n	8002810 <UART_RxISR_8BIT+0x6c>
 800280e:	e09c      	b.n	800294a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800281a:	2301      	movs	r3, #1
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4948      	ldr	r1, [pc, #288]	@ (8002954 <UART_RxISR_8BIT+0x1b0>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002842:	f3ef 8310 	mrs	r3, PRIMASK
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	647b      	str	r3, [r7, #68]	@ 0x44
 800284c:	2301      	movs	r3, #1
 800284e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286e:	f383 8810 	msr	PRIMASK, r3
}
 8002872:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	2120      	movs	r1, #32
 800287a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d018      	beq.n	80028c8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002896:	f3ef 8310 	mrs	r3, PRIMASK
 800289a:	61bb      	str	r3, [r7, #24]
  return(result);
 800289c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800289e:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a0:	2301      	movs	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4928      	ldr	r1, [pc, #160]	@ (8002958 <UART_RxISR_8BIT+0x1b4>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f383 8810 	msr	PRIMASK, r3
}
 80028c6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d12f      	bne.n	8002930 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d6:	f3ef 8310 	mrs	r3, PRIMASK
 80028da:	60fb      	str	r3, [r7, #12]
  return(result);
 80028dc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e0:	2301      	movs	r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f383 8810 	msr	PRIMASK, r3
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2110      	movs	r1, #16
 80028f8:	438a      	bics	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2210      	movs	r2, #16
 8002910:	4013      	ands	r3, r2
 8002912:	2b10      	cmp	r3, #16
 8002914:	d103      	bne.n	800291e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2210      	movs	r2, #16
 800291c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2258      	movs	r2, #88	@ 0x58
 8002922:	5a9a      	ldrh	r2, [r3, r2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fa9b 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800292e:	e00c      	b.n	800294a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f7fd fd7a 	bl	800042c <HAL_UART_RxCpltCallback>
}
 8002938:	e007      	b.n	800294a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2108      	movs	r1, #8
 8002946:	430a      	orrs	r2, r1
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b014      	add	sp, #80	@ 0x50
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	fffffedf 	.word	0xfffffedf
 8002958:	fbffffff 	.word	0xfbffffff

0800295c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b094      	sub	sp, #80	@ 0x50
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002964:	204e      	movs	r0, #78	@ 0x4e
 8002966:	183b      	adds	r3, r7, r0
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	215c      	movs	r1, #92	@ 0x5c
 800296c:	5a52      	ldrh	r2, [r2, r1]
 800296e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	589b      	ldr	r3, [r3, r2]
 8002976:	2b22      	cmp	r3, #34	@ 0x22
 8002978:	d000      	beq.n	800297c <UART_RxISR_16BIT+0x20>
 800297a:	e0ba      	b.n	8002af2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	214c      	movs	r1, #76	@ 0x4c
 8002982:	187b      	adds	r3, r7, r1
 8002984:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002986:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800298e:	187b      	adds	r3, r7, r1
 8002990:	183a      	adds	r2, r7, r0
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	4013      	ands	r3, r2
 8002998:	b29a      	uxth	r2, r3
 800299a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800299c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	1c9a      	adds	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	225a      	movs	r2, #90	@ 0x5a
 80029ac:	5a9b      	ldrh	r3, [r3, r2]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b299      	uxth	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	225a      	movs	r2, #90	@ 0x5a
 80029b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	225a      	movs	r2, #90	@ 0x5a
 80029be:	5a9b      	ldrh	r3, [r3, r2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d000      	beq.n	80029c8 <UART_RxISR_16BIT+0x6c>
 80029c6:	e09c      	b.n	8002b02 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c8:	f3ef 8310 	mrs	r3, PRIMASK
 80029cc:	623b      	str	r3, [r7, #32]
  return(result);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	f383 8810 	msr	PRIMASK, r3
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4948      	ldr	r1, [pc, #288]	@ (8002b0c <UART_RxISR_16BIT+0x1b0>)
 80029ea:	400a      	ands	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fa:	f3ef 8310 	mrs	r3, PRIMASK
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a04:	2301      	movs	r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	f383 8810 	msr	PRIMASK, r3
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a26:	f383 8810 	msr	PRIMASK, r3
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	2120      	movs	r1, #32
 8002a32:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a52:	617b      	str	r3, [r7, #20]
  return(result);
 8002a54:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a58:	2301      	movs	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4928      	ldr	r1, [pc, #160]	@ (8002b10 <UART_RxISR_16BIT+0x1b4>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d12f      	bne.n	8002ae8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a94:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a98:	2301      	movs	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2110      	movs	r1, #16
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d103      	bne.n	8002ad6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2258      	movs	r2, #88	@ 0x58
 8002ada:	5a9a      	ldrh	r2, [r3, r2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7ff f9bf 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ae6:	e00c      	b.n	8002b02 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fd fc9e 	bl	800042c <HAL_UART_RxCpltCallback>
}
 8002af0:	e007      	b.n	8002b02 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2108      	movs	r1, #8
 8002afe:	430a      	orrs	r2, r1
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b014      	add	sp, #80	@ 0x50
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	fffffedf 	.word	0xfffffedf
 8002b10:	fbffffff 	.word	0xfbffffff

08002b14 <memset>:
 8002b14:	0003      	movs	r3, r0
 8002b16:	1882      	adds	r2, r0, r2
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	7019      	strb	r1, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	2600      	movs	r6, #0
 8002b28:	4c0c      	ldr	r4, [pc, #48]	@ (8002b5c <__libc_init_array+0x38>)
 8002b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b60 <__libc_init_array+0x3c>)
 8002b2c:	1b64      	subs	r4, r4, r5
 8002b2e:	10a4      	asrs	r4, r4, #2
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	2600      	movs	r6, #0
 8002b36:	f000 f819 	bl	8002b6c <_init>
 8002b3a:	4c0a      	ldr	r4, [pc, #40]	@ (8002b64 <__libc_init_array+0x40>)
 8002b3c:	4d0a      	ldr	r5, [pc, #40]	@ (8002b68 <__libc_init_array+0x44>)
 8002b3e:	1b64      	subs	r4, r4, r5
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	00b3      	lsls	r3, r6, #2
 8002b4a:	58eb      	ldr	r3, [r5, r3]
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	00b3      	lsls	r3, r6, #2
 8002b54:	58eb      	ldr	r3, [r5, r3]
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002be4 	.word	0x08002be4
 8002b60:	08002be4 	.word	0x08002be4
 8002b64:	08002be8 	.word	0x08002be8
 8002b68:	08002be4 	.word	0x08002be4

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
