
LED_PB_CONTROL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001c38  08001c38  00002c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c70  08001c70  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c70  08001c70  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c70  08001c70  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c70  08001c70  00002c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c74  08001c74  00002c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001c78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001c84  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001c84  000030b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ce7  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000119a  00000000  00000000  00009d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  0000aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043c  00000000  00000000  0000b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f28f  00000000  00000000  0000b874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077c7  00000000  00000000  0001ab03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cc04  00000000  00000000  000222ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007eece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001264  00000000  00000000  0007ef14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00080178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c20 	.word	0x08001c20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001c20 	.word	0x08001c20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9ce 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f828 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8a2 	bl	8000374 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f870 	bl	8000314 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, ARJUN_BUTTON_Pin);
 8000234:	2380      	movs	r3, #128	@ 0x80
 8000236:	019b      	lsls	r3, r3, #6
 8000238:	4a0e      	ldr	r2, [pc, #56]	@ (8000274 <main+0x54>)
 800023a:	0019      	movs	r1, r3
 800023c:	0010      	movs	r0, r2
 800023e:	f000 fc49 	bl	8000ad4 <HAL_GPIO_ReadPin>
 8000242:	0003      	movs	r3, r0
 8000244:	001a      	movs	r2, r3
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <main+0x58>)
 8000248:	701a      	strb	r2, [r3, #0]
	  if(BUTTON_STATE==GPIO_PIN_RESET)
 800024a:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <main+0x58>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d107      	bne.n	8000262 <main+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOA, ARJUN_LED_Pin, GPIO_PIN_SET);
 8000252:	2390      	movs	r3, #144	@ 0x90
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fc57 	bl	8000b0e <HAL_GPIO_WritePin>
 8000260:	e7e8      	b.n	8000234 <main+0x14>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, ARJUN_LED_Pin, GPIO_PIN_RESET);
 8000262:	2390      	movs	r3, #144	@ 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2200      	movs	r2, #0
 8000268:	2120      	movs	r1, #32
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fc4f 	bl	8000b0e <HAL_GPIO_WritePin>
	  BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, ARJUN_BUTTON_Pin);
 8000270:	e7e0      	b.n	8000234 <main+0x14>
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	48000800 	.word	0x48000800
 8000278:	200000b0 	.word	0x200000b0

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b091      	sub	sp, #68	@ 0x44
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2410      	movs	r4, #16
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2330      	movs	r3, #48	@ 0x30
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f001 fc9b 	bl	8001bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f001 fc94 	bl	8001bc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	@ 0x80
 80002be:	0212      	lsls	r2, r2, #8
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	@ 0x80
 80002c6:	0352      	lsls	r2, r2, #13
 80002c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fc38 	bl	8000b48 <HAL_RCC_OscConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002dc:	f000 f8b4 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	003b      	movs	r3, r7
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	003b      	movs	r3, r7
 80002e8:	2202      	movs	r2, #2
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	003b      	movs	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	003b      	movs	r3, r7
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	003b      	movs	r3, r7
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 ff41 	bl	8001184 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000306:	f000 f89f 	bl	8000448 <Error_Handler>
  }
}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b011      	add	sp, #68	@ 0x44
 8000310:	bd90      	pop	{r4, r7, pc}
	...

08000314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000318:	4b14      	ldr	r3, [pc, #80]	@ (800036c <MX_USART2_UART_Init+0x58>)
 800031a:	4a15      	ldr	r2, [pc, #84]	@ (8000370 <MX_USART2_UART_Init+0x5c>)
 800031c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800031e:	4b13      	ldr	r3, [pc, #76]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000320:	2296      	movs	r2, #150	@ 0x96
 8000322:	0212      	lsls	r2, r2, #8
 8000324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b11      	ldr	r3, [pc, #68]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <MX_USART2_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <MX_USART2_UART_Init+0x58>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <MX_USART2_UART_Init+0x58>)
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f859 	bl	8001410 <HAL_UART_Init>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000362:	f000 f871 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000028 	.word	0x20000028
 8000370:	40004400 	.word	0x40004400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b089      	sub	sp, #36	@ 0x24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	240c      	movs	r4, #12
 800037c:	193b      	adds	r3, r7, r4
 800037e:	0018      	movs	r0, r3
 8000380:	2314      	movs	r3, #20
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f001 fc1f 	bl	8001bc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038a:	4b2d      	ldr	r3, [pc, #180]	@ (8000440 <MX_GPIO_Init+0xcc>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	4b2c      	ldr	r3, [pc, #176]	@ (8000440 <MX_GPIO_Init+0xcc>)
 8000390:	2180      	movs	r1, #128	@ 0x80
 8000392:	0309      	lsls	r1, r1, #12
 8000394:	430a      	orrs	r2, r1
 8000396:	615a      	str	r2, [r3, #20]
 8000398:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <MX_GPIO_Init+0xcc>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	2380      	movs	r3, #128	@ 0x80
 800039e:	031b      	lsls	r3, r3, #12
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a6:	4b26      	ldr	r3, [pc, #152]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003a8:	695a      	ldr	r2, [r3, #20]
 80003aa:	4b25      	ldr	r3, [pc, #148]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003ac:	2180      	movs	r1, #128	@ 0x80
 80003ae:	03c9      	lsls	r1, r1, #15
 80003b0:	430a      	orrs	r2, r1
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b22      	ldr	r3, [pc, #136]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	2380      	movs	r3, #128	@ 0x80
 80003ba:	03db      	lsls	r3, r3, #15
 80003bc:	4013      	ands	r3, r2
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003c8:	2180      	movs	r1, #128	@ 0x80
 80003ca:	0289      	lsls	r1, r1, #10
 80003cc:	430a      	orrs	r2, r1
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <MX_GPIO_Init+0xcc>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	2380      	movs	r3, #128	@ 0x80
 80003d6:	029b      	lsls	r3, r3, #10
 80003d8:	4013      	ands	r3, r2
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARJUN_LED_GPIO_Port, ARJUN_LED_Pin, GPIO_PIN_RESET);
 80003de:	2390      	movs	r3, #144	@ 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fb91 	bl	8000b0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARJUN_BUTTON_Pin */
  GPIO_InitStruct.Pin = ARJUN_BUTTON_Pin;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	2280      	movs	r2, #128	@ 0x80
 80003f0:	0192      	lsls	r2, r2, #6
 80003f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2284      	movs	r2, #132	@ 0x84
 80003f8:	0392      	lsls	r2, r2, #14
 80003fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2202      	movs	r2, #2
 8000400:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ARJUN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000402:	193b      	adds	r3, r7, r4
 8000404:	4a0f      	ldr	r2, [pc, #60]	@ (8000444 <MX_GPIO_Init+0xd0>)
 8000406:	0019      	movs	r1, r3
 8000408:	0010      	movs	r0, r2
 800040a:	f000 f9f3 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARJUN_LED_Pin */
  GPIO_InitStruct.Pin = ARJUN_LED_Pin;
 800040e:	0021      	movs	r1, r4
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2220      	movs	r2, #32
 8000414:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2201      	movs	r2, #1
 800041a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ARJUN_LED_GPIO_Port, &GPIO_InitStruct);
 8000428:	187a      	adds	r2, r7, r1
 800042a:	2390      	movs	r3, #144	@ 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f000 f9df 	bl	80007f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b009      	add	sp, #36	@ 0x24
 800043c:	bd90      	pop	{r4, r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	40021000 	.word	0x40021000
 8000444:	48000800 	.word	0x48000800

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x44>)
 800045c:	699a      	ldr	r2, [r3, #24]
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <HAL_MspInit+0x44>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <HAL_MspInit+0x44>)
 8000474:	69da      	ldr	r2, [r3, #28]
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x44>)
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0549      	lsls	r1, r1, #21
 800047c:	430a      	orrs	r2, r1
 800047e:	61da      	str	r2, [r3, #28]
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <HAL_MspInit+0x44>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	055b      	lsls	r3, r3, #21
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	@ 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f001 fb8a 	bl	8001bc8 <memset>
  if(huart->Instance==USART2)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <HAL_UART_MspInit+0x90>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d132      	bne.n	8000524 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004be:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	0289      	lsls	r1, r1, #10
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	029b      	lsls	r3, r3, #10
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <HAL_UART_MspInit+0x94>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2203      	movs	r2, #3
 800050e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2201      	movs	r2, #1
 8000514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	187a      	adds	r2, r7, r1
 8000518:	2390      	movs	r3, #144	@ 0x90
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 f968 	bl	80007f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b00b      	add	sp, #44	@ 0x2c
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40004400 	.word	0x40004400
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	e7fd      	b.n	8000538 <NMI_Handler+0x4>

0800053c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	e7fd      	b.n	8000540 <HardFault_Handler+0x4>

08000544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f87a 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f7ff fff7 	bl	8000566 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f001 fb1b 	bl	8001bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe3d 	bl	8000220 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08001c78 	.word	0x08001c78
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	200000b8 	.word	0x200000b8

080005c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_IRQHandler>
	...

080005c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <HAL_Init+0x24>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_Init+0x24>)
 80005ce:	2110      	movs	r1, #16
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f809 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005da:	f7ff ff3b 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_InitTick+0x5c>)
 80005f6:	681c      	ldr	r4, [r3, #0]
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <HAL_InitTick+0x60>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	0019      	movs	r1, r3
 80005fe:	23fa      	movs	r3, #250	@ 0xfa
 8000600:	0098      	lsls	r0, r3, #2
 8000602:	f7ff fd81 	bl	8000108 <__udivsi3>
 8000606:	0003      	movs	r3, r0
 8000608:	0019      	movs	r1, r3
 800060a:	0020      	movs	r0, r4
 800060c:	f7ff fd7c 	bl	8000108 <__udivsi3>
 8000610:	0003      	movs	r3, r0
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f8e1 	bl	80007da <HAL_SYSTICK_Config>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	e00f      	b.n	8000640 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d80b      	bhi.n	800063e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	2301      	movs	r3, #1
 800062a:	425b      	negs	r3, r3
 800062c:	2200      	movs	r2, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f8be 	bl	80007b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_InitTick+0x64>)
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b003      	add	sp, #12
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	20000008 	.word	0x20000008
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <HAL_IncTick+0x1c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_IncTick+0x20>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	18d2      	adds	r2, r2, r3
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <HAL_IncTick+0x20>)
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000008 	.word	0x20000008
 8000674:	200000b4 	.word	0x200000b4

08000678 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	@ (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	200000b4 	.word	0x200000b4

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	0002      	movs	r2, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b7f      	cmp	r3, #127	@ 0x7f
 80006a0:	d828      	bhi.n	80006f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000760 <__NVIC_SetPriority+0xd4>)
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	33c0      	adds	r3, #192	@ 0xc0
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	589b      	ldr	r3, [r3, r2]
 80006b2:	1dfa      	adds	r2, r7, #7
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	0011      	movs	r1, r2
 80006b8:	2203      	movs	r2, #3
 80006ba:	400a      	ands	r2, r1
 80006bc:	00d2      	lsls	r2, r2, #3
 80006be:	21ff      	movs	r1, #255	@ 0xff
 80006c0:	4091      	lsls	r1, r2
 80006c2:	000a      	movs	r2, r1
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	401a      	ands	r2, r3
 80006c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	22ff      	movs	r2, #255	@ 0xff
 80006d0:	401a      	ands	r2, r3
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	0018      	movs	r0, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	4003      	ands	r3, r0
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e0:	481f      	ldr	r0, [pc, #124]	@ (8000760 <__NVIC_SetPriority+0xd4>)
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	089b      	lsrs	r3, r3, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	33c0      	adds	r3, #192	@ 0xc0
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006f2:	e031      	b.n	8000758 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <__NVIC_SetPriority+0xd8>)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0019      	movs	r1, r3
 80006fc:	230f      	movs	r3, #15
 80006fe:	400b      	ands	r3, r1
 8000700:	3b08      	subs	r3, #8
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	3306      	adds	r3, #6
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	3304      	adds	r3, #4
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1dfa      	adds	r2, r7, #7
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	0011      	movs	r1, r2
 8000714:	2203      	movs	r2, #3
 8000716:	400a      	ands	r2, r1
 8000718:	00d2      	lsls	r2, r2, #3
 800071a:	21ff      	movs	r1, #255	@ 0xff
 800071c:	4091      	lsls	r1, r2
 800071e:	000a      	movs	r2, r1
 8000720:	43d2      	mvns	r2, r2
 8000722:	401a      	ands	r2, r3
 8000724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	22ff      	movs	r2, #255	@ 0xff
 800072c:	401a      	ands	r2, r3
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	0018      	movs	r0, r3
 8000734:	2303      	movs	r3, #3
 8000736:	4003      	ands	r3, r0
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <__NVIC_SetPriority+0xd8>)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	001c      	movs	r4, r3
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	3b08      	subs	r3, #8
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	430a      	orrs	r2, r1
 800074e:	3306      	adds	r3, #6
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	18c3      	adds	r3, r0, r3
 8000754:	3304      	adds	r3, #4
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	045b      	lsls	r3, r3, #17
 8000778:	429a      	cmp	r2, r3
 800077a:	d301      	bcc.n	8000780 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077c:	2301      	movs	r3, #1
 800077e:	e010      	b.n	80007a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <SysTick_Config+0x44>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	3a01      	subs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2103      	movs	r1, #3
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff7c 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <SysTick_Config+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <SysTick_Config+0x44>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	210f      	movs	r1, #15
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	1c02      	adds	r2, r0, #0
 80007c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ff5d 	bl	800068c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ffbf 	bl	8000768 <SysTick_Config>
 80007ea:	0003      	movs	r3, r0
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000802:	e14f      	b.n	8000aa4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <HAL_GPIO_Init+0x28>
 800081a:	e140      	b.n	8000a9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2203      	movs	r2, #3
 8000822:	4013      	ands	r3, r2
 8000824:	2b01      	cmp	r3, #1
 8000826:	d005      	beq.n	8000834 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2203      	movs	r2, #3
 800082e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000830:	2b02      	cmp	r3, #2
 8000832:	d130      	bne.n	8000896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	409a      	lsls	r2, r3
 8000842:	0013      	movs	r3, r2
 8000844:	43da      	mvns	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	409a      	lsls	r2, r3
 8000856:	0013      	movs	r3, r2
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800086a:	2201      	movs	r2, #1
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
 8000870:	0013      	movs	r3, r2
 8000872:	43da      	mvns	r2, r3
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	4013      	ands	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	2201      	movs	r2, #1
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
 8000888:	0013      	movs	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2203      	movs	r2, #3
 800089c:	4013      	ands	r3, r2
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d017      	beq.n	80008d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	409a      	lsls	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	43da      	mvns	r2, r3
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2203      	movs	r2, #3
 80008d8:	4013      	ands	r3, r2
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d123      	bne.n	8000926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	08da      	lsrs	r2, r3, #3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3208      	adds	r2, #8
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	58d3      	ldr	r3, [r2, r3]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2207      	movs	r2, #7
 80008f0:	4013      	ands	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	220f      	movs	r2, #15
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	691a      	ldr	r2, [r3, #16]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2107      	movs	r1, #7
 800090a:	400b      	ands	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	08da      	lsrs	r2, r3, #3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3208      	adds	r2, #8
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	43da      	mvns	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2203      	movs	r2, #3
 8000944:	401a      	ands	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	23c0      	movs	r3, #192	@ 0xc0
 8000960:	029b      	lsls	r3, r3, #10
 8000962:	4013      	ands	r3, r2
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_Init+0x174>
 8000966:	e09a      	b.n	8000a9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	4b54      	ldr	r3, [pc, #336]	@ (8000abc <HAL_GPIO_Init+0x2c8>)
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	4b53      	ldr	r3, [pc, #332]	@ (8000abc <HAL_GPIO_Init+0x2c8>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	4b51      	ldr	r3, [pc, #324]	@ (8000abc <HAL_GPIO_Init+0x2c8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	2201      	movs	r2, #1
 800097a:	4013      	ands	r3, r2
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000980:	4a4f      	ldr	r2, [pc, #316]	@ (8000ac0 <HAL_GPIO_Init+0x2cc>)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	589b      	ldr	r3, [r3, r2]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2203      	movs	r2, #3
 8000992:	4013      	ands	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	220f      	movs	r2, #15
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	43da      	mvns	r2, r3
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	2390      	movs	r3, #144	@ 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0x1e2>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a44      	ldr	r2, [pc, #272]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d00d      	beq.n	80009d2 <HAL_GPIO_Init+0x1de>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a43      	ldr	r2, [pc, #268]	@ (8000ac8 <HAL_GPIO_Init+0x2d4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0x1da>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a42      	ldr	r2, [pc, #264]	@ (8000acc <HAL_GPIO_Init+0x2d8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_GPIO_Init+0x1d6>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e004      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e002      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009d6:	2300      	movs	r3, #0
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	2103      	movs	r1, #3
 80009dc:	400a      	ands	r2, r1
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	4093      	lsls	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e8:	4935      	ldr	r1, [pc, #212]	@ (8000ac0 <HAL_GPIO_Init+0x2cc>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b36      	ldr	r3, [pc, #216]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	035b      	lsls	r3, r3, #13
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	039b      	lsls	r3, r3, #14
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	029b      	lsls	r3, r3, #10
 8000a62:	4013      	ands	r3, r2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	025b      	lsls	r3, r3, #9
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	40da      	lsrs	r2, r3
 8000aac:	1e13      	subs	r3, r2, #0
 8000aae:	d000      	beq.n	8000ab2 <HAL_GPIO_Init+0x2be>
 8000ab0:	e6a8      	b.n	8000804 <HAL_GPIO_Init+0x10>
  } 
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800
 8000acc:	48000c00 	.word	0x48000c00
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	000a      	movs	r2, r1
 8000ade:	1cbb      	adds	r3, r7, #2
 8000ae0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	1cba      	adds	r2, r7, #2
 8000ae8:	8812      	ldrh	r2, [r2, #0]
 8000aea:	4013      	ands	r3, r2
 8000aec:	d004      	beq.n	8000af8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000aee:	230f      	movs	r3, #15
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e003      	b.n	8000b00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	781b      	ldrb	r3, [r3, #0]
  }
 8000b06:	0018      	movs	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b004      	add	sp, #16
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	0008      	movs	r0, r1
 8000b18:	0011      	movs	r1, r2
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	1c02      	adds	r2, r0, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
 8000b20:	1c7b      	adds	r3, r7, #1
 8000b22:	1c0a      	adds	r2, r1, #0
 8000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b26:	1c7b      	adds	r3, r7, #1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2e:	1cbb      	adds	r3, r7, #2
 8000b30:	881a      	ldrh	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b36:	e003      	b.n	8000b40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b38:	1cbb      	adds	r3, r7, #2
 8000b3a:	881a      	ldrh	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e305      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	d100      	bne.n	8000b66 <HAL_RCC_OscConfig+0x1e>
 8000b64:	e08d      	b.n	8000c82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b66:	4bc5      	ldr	r3, [pc, #788]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d00e      	beq.n	8000b90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b72:	4bc2      	ldr	r3, [pc, #776]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	220c      	movs	r2, #12
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d116      	bne.n	8000bac <HAL_RCC_OscConfig+0x64>
 8000b7e:	4bbf      	ldr	r3, [pc, #764]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	23c0      	movs	r3, #192	@ 0xc0
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	401a      	ands	r2, r3
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d10d      	bne.n	8000bac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b90:	4bba      	ldr	r3, [pc, #744]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	029b      	lsls	r3, r3, #10
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <HAL_RCC_OscConfig+0x56>
 8000b9c:	e070      	b.n	8000c80 <HAL_RCC_OscConfig+0x138>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d000      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x60>
 8000ba6:	e06b      	b.n	8000c80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e2dc      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d107      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x7c>
 8000bb4:	4bb1      	ldr	r3, [pc, #708]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4bb0      	ldr	r3, [pc, #704]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	0249      	lsls	r1, r1, #9
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e02f      	b.n	8000c24 <HAL_RCC_OscConfig+0xdc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10c      	bne.n	8000be6 <HAL_RCC_OscConfig+0x9e>
 8000bcc:	4bab      	ldr	r3, [pc, #684]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4baa      	ldr	r3, [pc, #680]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bd2:	49ab      	ldr	r1, [pc, #684]	@ (8000e80 <HAL_RCC_OscConfig+0x338>)
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	4ba8      	ldr	r3, [pc, #672]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bde:	49a9      	ldr	r1, [pc, #676]	@ (8000e84 <HAL_RCC_OscConfig+0x33c>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e01e      	b.n	8000c24 <HAL_RCC_OscConfig+0xdc>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d10e      	bne.n	8000c0c <HAL_RCC_OscConfig+0xc4>
 8000bee:	4ba3      	ldr	r3, [pc, #652]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4ba2      	ldr	r3, [pc, #648]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bf4:	2180      	movs	r1, #128	@ 0x80
 8000bf6:	02c9      	lsls	r1, r1, #11
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	4b9f      	ldr	r3, [pc, #636]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b9e      	ldr	r3, [pc, #632]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c02:	2180      	movs	r1, #128	@ 0x80
 8000c04:	0249      	lsls	r1, r1, #9
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00b      	b.n	8000c24 <HAL_RCC_OscConfig+0xdc>
 8000c0c:	4b9b      	ldr	r3, [pc, #620]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b9a      	ldr	r3, [pc, #616]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c12:	499b      	ldr	r1, [pc, #620]	@ (8000e80 <HAL_RCC_OscConfig+0x338>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4b98      	ldr	r3, [pc, #608]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b97      	ldr	r3, [pc, #604]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c1e:	4999      	ldr	r1, [pc, #612]	@ (8000e84 <HAL_RCC_OscConfig+0x33c>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d014      	beq.n	8000c56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fd24 	bl	8000678 <HAL_GetTick>
 8000c30:	0003      	movs	r3, r0
 8000c32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c34:	e008      	b.n	8000c48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fd1f 	bl	8000678 <HAL_GetTick>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	2b64      	cmp	r3, #100	@ 0x64
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e28e      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c48:	4b8c      	ldr	r3, [pc, #560]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	029b      	lsls	r3, r3, #10
 8000c50:	4013      	ands	r3, r2
 8000c52:	d0f0      	beq.n	8000c36 <HAL_RCC_OscConfig+0xee>
 8000c54:	e015      	b.n	8000c82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c56:	f7ff fd0f 	bl	8000678 <HAL_GetTick>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fd0a 	bl	8000678 <HAL_GetTick>
 8000c64:	0002      	movs	r2, r0
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	@ 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e279      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b82      	ldr	r3, [pc, #520]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	029b      	lsls	r3, r3, #10
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x118>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2202      	movs	r2, #2
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d100      	bne.n	8000c8e <HAL_RCC_OscConfig+0x146>
 8000c8c:	e06c      	b.n	8000d68 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	220c      	movs	r2, #12
 8000c94:	4013      	ands	r3, r2
 8000c96:	d00e      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c98:	4b78      	ldr	r3, [pc, #480]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d11f      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x19c>
 8000ca4:	4b75      	ldr	r3, [pc, #468]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	23c0      	movs	r3, #192	@ 0xc0
 8000caa:	025b      	lsls	r3, r3, #9
 8000cac:	401a      	ands	r2, r3
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d116      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	4b71      	ldr	r3, [pc, #452]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_OscConfig+0x184>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e24c      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	22f8      	movs	r2, #248	@ 0xf8
 8000cd2:	4393      	bics	r3, r2
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	00da      	lsls	r2, r3, #3
 8000cdc:	4b67      	ldr	r3, [pc, #412]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	e041      	b.n	8000d68 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d024      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cec:	4b63      	ldr	r3, [pc, #396]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b62      	ldr	r3, [pc, #392]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fcbe 	bl	8000678 <HAL_GetTick>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fcb9 	bl	8000678 <HAL_GetTick>
 8000d06:	0002      	movs	r2, r0
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e228      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	4b59      	ldr	r3, [pc, #356]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d0f1      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b57      	ldr	r3, [pc, #348]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	22f8      	movs	r2, #248	@ 0xf8
 8000d24:	4393      	bics	r3, r2
 8000d26:	0019      	movs	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	00da      	lsls	r2, r3, #3
 8000d2e:	4b53      	ldr	r3, [pc, #332]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e018      	b.n	8000d68 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d36:	4b51      	ldr	r3, [pc, #324]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b50      	ldr	r3, [pc, #320]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	438a      	bics	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fc99 	bl	8000678 <HAL_GetTick>
 8000d46:	0003      	movs	r3, r0
 8000d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc94 	bl	8000678 <HAL_GetTick>
 8000d50:	0002      	movs	r2, r0
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e203      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b47      	ldr	r3, [pc, #284]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	d1f1      	bne.n	8000d4c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d036      	beq.n	8000de0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d019      	beq.n	8000dae <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7a:	4b40      	ldr	r3, [pc, #256]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d86:	f7ff fc77 	bl	8000678 <HAL_GetTick>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc72 	bl	8000678 <HAL_GetTick>
 8000d94:	0002      	movs	r2, r0
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e1e1      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da2:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d0f1      	beq.n	8000d90 <HAL_RCC_OscConfig+0x248>
 8000dac:	e018      	b.n	8000de0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000db2:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	438a      	bics	r2, r1
 8000db8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fc5d 	bl	8000678 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fc58 	bl	8000678 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1c7      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d1f1      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2204      	movs	r2, #4
 8000de6:	4013      	ands	r3, r2
 8000de8:	d100      	bne.n	8000dec <HAL_RCC_OscConfig+0x2a4>
 8000dea:	e0b5      	b.n	8000f58 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dec:	201f      	movs	r0, #31
 8000dee:	183b      	adds	r3, r7, r0
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000df6:	69da      	ldr	r2, [r3, #28]
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d110      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	0549      	lsls	r1, r1, #21
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	61da      	str	r2, [r3, #28]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	2380      	movs	r3, #128	@ 0x80
 8000e14:	055b      	lsls	r3, r3, #21
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e1c:	183b      	adds	r3, r7, r0
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_RCC_OscConfig+0x340>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d11a      	bne.n	8000e64 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <HAL_RCC_OscConfig+0x340>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_RCC_OscConfig+0x340>)
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	0049      	lsls	r1, r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3c:	f7ff fc1c 	bl	8000678 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e46:	f7ff fc17 	bl	8000678 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b64      	cmp	r3, #100	@ 0x64
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e186      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_RCC_OscConfig+0x340>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4013      	ands	r3, r2
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10f      	bne.n	8000e8c <HAL_RCC_OscConfig+0x344>
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000e6e:	6a1a      	ldr	r2, [r3, #32]
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HAL_RCC_OscConfig+0x334>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	621a      	str	r2, [r3, #32]
 8000e78:	e036      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3a0>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	fffeffff 	.word	0xfffeffff
 8000e84:	fffbffff 	.word	0xfffbffff
 8000e88:	40007000 	.word	0x40007000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x366>
 8000e94:	4bb6      	ldr	r3, [pc, #728]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000e96:	6a1a      	ldr	r2, [r3, #32]
 8000e98:	4bb5      	ldr	r3, [pc, #724]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	621a      	str	r2, [r3, #32]
 8000ea0:	4bb3      	ldr	r3, [pc, #716]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ea2:	6a1a      	ldr	r2, [r3, #32]
 8000ea4:	4bb2      	ldr	r3, [pc, #712]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	621a      	str	r2, [r3, #32]
 8000eac:	e01c      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3a0>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x388>
 8000eb6:	4bae      	ldr	r3, [pc, #696]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	4bad      	ldr	r3, [pc, #692]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	621a      	str	r2, [r3, #32]
 8000ec2:	4bab      	ldr	r3, [pc, #684]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	4baa      	ldr	r3, [pc, #680]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	621a      	str	r2, [r3, #32]
 8000ece:	e00b      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3a0>
 8000ed0:	4ba7      	ldr	r3, [pc, #668]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	4ba6      	ldr	r3, [pc, #664]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	438a      	bics	r2, r1
 8000eda:	621a      	str	r2, [r3, #32]
 8000edc:	4ba4      	ldr	r3, [pc, #656]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ede:	6a1a      	ldr	r2, [r3, #32]
 8000ee0:	4ba3      	ldr	r3, [pc, #652]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d014      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fbc2 	bl	8000678 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef8:	e009      	b.n	8000f0e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efa:	f7ff fbbd 	bl	8000678 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a9b      	ldr	r2, [pc, #620]	@ (8001174 <HAL_RCC_OscConfig+0x62c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e12b      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0e:	4b98      	ldr	r3, [pc, #608]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x3b2>
 8000f18:	e013      	b.n	8000f42 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fbad 	bl	8000678 <HAL_GetTick>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f22:	e009      	b.n	8000f38 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f24:	f7ff fba8 	bl	8000678 <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a91      	ldr	r2, [pc, #580]	@ (8001174 <HAL_RCC_OscConfig+0x62c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e116      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	4b8d      	ldr	r3, [pc, #564]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f42:	231f      	movs	r3, #31
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d105      	bne.n	8000f58 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4c:	4b88      	ldr	r3, [pc, #544]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	4b87      	ldr	r3, [pc, #540]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f52:	4989      	ldr	r1, [pc, #548]	@ (8001178 <HAL_RCC_OscConfig+0x630>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d063      	beq.n	800102a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d12a      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f6a:	4b81      	ldr	r3, [pc, #516]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6e:	4b80      	ldr	r3, [pc, #512]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f70:	2104      	movs	r1, #4
 8000f72:	430a      	orrs	r2, r1
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f76:	4b7e      	ldr	r3, [pc, #504]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb79 	bl	8000678 <HAL_GetTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f8c:	f7ff fb74 	bl	8000678 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e0e3      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f9e:	4b74      	ldr	r3, [pc, #464]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d0f1      	beq.n	8000f8c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fa8:	4b71      	ldr	r3, [pc, #452]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	22f8      	movs	r2, #248	@ 0xf8
 8000fae:	4393      	bics	r3, r2
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	00da      	lsls	r2, r3, #3
 8000fb8:	4b6d      	ldr	r3, [pc, #436]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fbe:	e034      	b.n	800102a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	d111      	bne.n	8000fec <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fc8:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fcc:	4b68      	ldr	r3, [pc, #416]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fce:	2104      	movs	r1, #4
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fd4:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd8:	22f8      	movs	r2, #248	@ 0xf8
 8000fda:	4393      	bics	r3, r2
 8000fdc:	0019      	movs	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	00da      	lsls	r2, r3, #3
 8000fe4:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fea:	e01e      	b.n	800102a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fec:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ff8:	4b5d      	ldr	r3, [pc, #372]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	438a      	bics	r2, r1
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff fb38 	bl	8000678 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800100e:	f7ff fb33 	bl	8000678 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e0a2      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001020:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001024:	2202      	movs	r2, #2
 8001026:	4013      	ands	r3, r2
 8001028:	d1f1      	bne.n	800100e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <HAL_RCC_OscConfig+0x4ec>
 8001032:	e097      	b.n	8001164 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001034:	4b4e      	ldr	r3, [pc, #312]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	220c      	movs	r2, #12
 800103a:	4013      	ands	r3, r2
 800103c:	2b08      	cmp	r3, #8
 800103e:	d100      	bne.n	8001042 <HAL_RCC_OscConfig+0x4fa>
 8001040:	e06b      	b.n	800111a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d14c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b49      	ldr	r3, [pc, #292]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001050:	494a      	ldr	r1, [pc, #296]	@ (800117c <HAL_RCC_OscConfig+0x634>)
 8001052:	400a      	ands	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb0f 	bl	8000678 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001060:	f7ff fb0a 	bl	8000678 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e079      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	049b      	lsls	r3, r3, #18
 800107a:	4013      	ands	r3, r2
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001082:	220f      	movs	r2, #15
 8001084:	4393      	bics	r3, r2
 8001086:	0019      	movs	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800108c:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 800108e:	430a      	orrs	r2, r1
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a3a      	ldr	r2, [pc, #232]	@ (8001180 <HAL_RCC_OscConfig+0x638>)
 8001098:	4013      	ands	r3, r2
 800109a:	0019      	movs	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	431a      	orrs	r2, r3
 80010a6:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	0449      	lsls	r1, r1, #17
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fadd 	bl	8000678 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fad8 	bl	8000678 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e047      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2380      	movs	r3, #128	@ 0x80
 80010dc:	049b      	lsls	r3, r3, #18
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x57c>
 80010e2:	e03f      	b.n	8001164 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 80010ea:	4924      	ldr	r1, [pc, #144]	@ (800117c <HAL_RCC_OscConfig+0x634>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fac2 	bl	8000678 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff fabd 	bl	8000678 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e02c      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	049b      	lsls	r3, r3, #18
 8001114:	4013      	ands	r3, r2
 8001116:	d1f0      	bne.n	80010fa <HAL_RCC_OscConfig+0x5b2>
 8001118:	e024      	b.n	8001164 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e01f      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_RCC_OscConfig+0x628>)
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	23c0      	movs	r3, #192	@ 0xc0
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	401a      	ands	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	429a      	cmp	r2, r3
 8001140:	d10e      	bne.n	8001160 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	220f      	movs	r2, #15
 8001146:	401a      	ands	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	23f0      	movs	r3, #240	@ 0xf0
 8001154:	039b      	lsls	r3, r3, #14
 8001156:	401a      	ands	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b008      	add	sp, #32
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	40021000 	.word	0x40021000
 8001174:	00001388 	.word	0x00001388
 8001178:	efffffff 	.word	0xefffffff
 800117c:	feffffff 	.word	0xfeffffff
 8001180:	ffc27fff 	.word	0xffc27fff

08001184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0b3      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d911      	bls.n	80011ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b58      	ldr	r3, [pc, #352]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4393      	bics	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	4b55      	ldr	r3, [pc, #340]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b8:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4013      	ands	r3, r2
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e09a      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d015      	beq.n	8001200 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2204      	movs	r2, #4
 80011da:	4013      	ands	r3, r2
 80011dc:	d006      	beq.n	80011ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b4a      	ldr	r3, [pc, #296]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80011e4:	21e0      	movs	r1, #224	@ 0xe0
 80011e6:	00c9      	lsls	r1, r1, #3
 80011e8:	430a      	orrs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b47      	ldr	r3, [pc, #284]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	22f0      	movs	r2, #240	@ 0xf0
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	4b44      	ldr	r3, [pc, #272]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	4013      	ands	r3, r2
 8001208:	d040      	beq.n	800128c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b3e      	ldr	r3, [pc, #248]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	4013      	ands	r3, r2
 800121c:	d114      	bne.n	8001248 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06e      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	049b      	lsls	r3, r3, #18
 8001232:	4013      	ands	r3, r2
 8001234:	d108      	bne.n	8001248 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e062      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e05b      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	4393      	bics	r3, r2
 8001250:	0019      	movs	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fa0c 	bl	8000678 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001264:	e009      	b.n	800127a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001266:	f7ff fa07 	bl	8000678 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <HAL_RCC_ClockConfig+0x18c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e042      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	220c      	movs	r2, #12
 8001280:	401a      	ands	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d1ec      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d211      	bcs.n	80012be <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	4393      	bics	r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <HAL_RCC_ClockConfig+0x184>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e020      	b.n	8001300 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d009      	beq.n	80012dc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <HAL_RCC_ClockConfig+0x190>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012dc:	f000 f820 	bl	8001320 <HAL_RCC_GetSysClockFreq>
 80012e0:	0001      	movs	r1, r0
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_RCC_ClockConfig+0x188>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	220f      	movs	r2, #15
 80012ea:	4013      	ands	r3, r2
 80012ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_RCC_ClockConfig+0x194>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	000a      	movs	r2, r1
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_ClockConfig+0x198>)
 80012f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff f977 	bl	80005ec <HAL_InitTick>
  
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	00001388 	.word	0x00001388
 8001314:	fffff8ff 	.word	0xfffff8ff
 8001318:	08001c38 	.word	0x08001c38
 800131c:	20000000 	.word	0x20000000

08001320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	220c      	movs	r2, #12
 8001344:	4013      	ands	r3, r2
 8001346:	2b04      	cmp	r3, #4
 8001348:	d002      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x30>
 800134a:	2b08      	cmp	r3, #8
 800134c:	d003      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0x36>
 800134e:	e02e      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001352:	613b      	str	r3, [r7, #16]
      break;
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	220f      	movs	r2, #15
 800135c:	4013      	ands	r3, r2
 800135e:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	220f      	movs	r2, #15
 800136a:	4013      	ands	r3, r2
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_RCC_GetSysClockFreq+0xac>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	23c0      	movs	r3, #192	@ 0xc0
 8001376:	025b      	lsls	r3, r3, #9
 8001378:	401a      	ands	r2, r3
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	429a      	cmp	r2, r3
 8001380:	d109      	bne.n	8001396 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001386:	f7fe febf 	bl	8000108 <__udivsi3>
 800138a:	0003      	movs	r3, r0
 800138c:	001a      	movs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4353      	muls	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e008      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800139a:	f7fe feb5 	bl	8000108 <__udivsi3>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4353      	muls	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
      break;
 80013ac:	e002      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013b0:	613b      	str	r3, [r7, #16]
      break;
 80013b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013b4:	693b      	ldr	r3, [r7, #16]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b006      	add	sp, #24
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	007a1200 	.word	0x007a1200
 80013c8:	08001c50 	.word	0x08001c50
 80013cc:	08001c60 	.word	0x08001c60

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b02      	ldr	r3, [pc, #8]	@ (80013e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013e8:	f7ff fff2 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013ec:	0001      	movs	r1, r0
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	2207      	movs	r2, #7
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x28>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	40d9      	lsrs	r1, r3
 80013fe:	000b      	movs	r3, r1
}    
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	40021000 	.word	0x40021000
 800140c:	08001c48 	.word	0x08001c48

08001410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e044      	b.n	80014ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001426:	2b00      	cmp	r3, #0
 8001428:	d107      	bne.n	800143a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2278      	movs	r2, #120	@ 0x78
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff f831 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2224      	movs	r2, #36	@ 0x24
 800143e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	438a      	bics	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f984 	bl	8001768 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f828 	bl	80014b8 <UART_SetConfig>
 8001468:	0003      	movs	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e01c      	b.n	80014ac <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	490d      	ldr	r1, [pc, #52]	@ (80014b4 <HAL_UART_Init+0xa4>)
 800147e:	400a      	ands	r2, r1
 8001480:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2108      	movs	r1, #8
 800148e:	438a      	bics	r2, r1
 8001490:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 fa13 	bl	80018d0 <UART_CheckIdleState>
 80014aa:	0003      	movs	r3, r0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	fffff7ff 	.word	0xfffff7ff

080014b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80014c0:	231e      	movs	r3, #30
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a97      	ldr	r2, [pc, #604]	@ (8001744 <UART_SetConfig+0x28c>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	0019      	movs	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a92      	ldr	r2, [pc, #584]	@ (8001748 <UART_SetConfig+0x290>)
 80014fe:	4013      	ands	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a89      	ldr	r2, [pc, #548]	@ (800174c <UART_SetConfig+0x294>)
 8001526:	4013      	ands	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a85      	ldr	r2, [pc, #532]	@ (8001750 <UART_SetConfig+0x298>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d127      	bne.n	800158e <UART_SetConfig+0xd6>
 800153e:	4b85      	ldr	r3, [pc, #532]	@ (8001754 <UART_SetConfig+0x29c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	2203      	movs	r2, #3
 8001544:	4013      	ands	r3, r2
 8001546:	2b03      	cmp	r3, #3
 8001548:	d00d      	beq.n	8001566 <UART_SetConfig+0xae>
 800154a:	d81b      	bhi.n	8001584 <UART_SetConfig+0xcc>
 800154c:	2b02      	cmp	r3, #2
 800154e:	d014      	beq.n	800157a <UART_SetConfig+0xc2>
 8001550:	d818      	bhi.n	8001584 <UART_SetConfig+0xcc>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <UART_SetConfig+0xa4>
 8001556:	2b01      	cmp	r3, #1
 8001558:	d00a      	beq.n	8001570 <UART_SetConfig+0xb8>
 800155a:	e013      	b.n	8001584 <UART_SetConfig+0xcc>
 800155c:	231f      	movs	r3, #31
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e035      	b.n	80015d2 <UART_SetConfig+0x11a>
 8001566:	231f      	movs	r3, #31
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e030      	b.n	80015d2 <UART_SetConfig+0x11a>
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2204      	movs	r2, #4
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e02b      	b.n	80015d2 <UART_SetConfig+0x11a>
 800157a:	231f      	movs	r3, #31
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2208      	movs	r2, #8
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e026      	b.n	80015d2 <UART_SetConfig+0x11a>
 8001584:	231f      	movs	r3, #31
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2210      	movs	r2, #16
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e021      	b.n	80015d2 <UART_SetConfig+0x11a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a71      	ldr	r2, [pc, #452]	@ (8001758 <UART_SetConfig+0x2a0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d104      	bne.n	80015a2 <UART_SetConfig+0xea>
 8001598:	231f      	movs	r3, #31
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e017      	b.n	80015d2 <UART_SetConfig+0x11a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6d      	ldr	r2, [pc, #436]	@ (800175c <UART_SetConfig+0x2a4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d104      	bne.n	80015b6 <UART_SetConfig+0xfe>
 80015ac:	231f      	movs	r3, #31
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e00d      	b.n	80015d2 <UART_SetConfig+0x11a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <UART_SetConfig+0x2a8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d104      	bne.n	80015ca <UART_SetConfig+0x112>
 80015c0:	231f      	movs	r3, #31
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e003      	b.n	80015d2 <UART_SetConfig+0x11a>
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2210      	movs	r2, #16
 80015d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	429a      	cmp	r2, r3
 80015dc:	d15c      	bne.n	8001698 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 80015de:	231f      	movs	r3, #31
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d015      	beq.n	8001614 <UART_SetConfig+0x15c>
 80015e8:	dc18      	bgt.n	800161c <UART_SetConfig+0x164>
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d00d      	beq.n	800160a <UART_SetConfig+0x152>
 80015ee:	dc15      	bgt.n	800161c <UART_SetConfig+0x164>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <UART_SetConfig+0x142>
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d005      	beq.n	8001604 <UART_SetConfig+0x14c>
 80015f8:	e010      	b.n	800161c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80015fa:	f7ff fef3 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
 80015fe:	0003      	movs	r3, r0
 8001600:	61bb      	str	r3, [r7, #24]
        break;
 8001602:	e012      	b.n	800162a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001604:	4b57      	ldr	r3, [pc, #348]	@ (8001764 <UART_SetConfig+0x2ac>)
 8001606:	61bb      	str	r3, [r7, #24]
        break;
 8001608:	e00f      	b.n	800162a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800160a:	f7ff fe89 	bl	8001320 <HAL_RCC_GetSysClockFreq>
 800160e:	0003      	movs	r3, r0
 8001610:	61bb      	str	r3, [r7, #24]
        break;
 8001612:	e00a      	b.n	800162a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	61bb      	str	r3, [r7, #24]
        break;
 800161a:	e006      	b.n	800162a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001620:	231e      	movs	r3, #30
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
        break;
 8001628:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d100      	bne.n	8001632 <UART_SetConfig+0x17a>
 8001630:	e07a      	b.n	8001728 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	18d2      	adds	r2, r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f7fe fd5f 	bl	8000108 <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d91c      	bls.n	800168e <UART_SetConfig+0x1d6>
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	429a      	cmp	r2, r3
 800165c:	d217      	bcs.n	800168e <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	b29a      	uxth	r2, r3
 8001662:	200e      	movs	r0, #14
 8001664:	183b      	adds	r3, r7, r0
 8001666:	210f      	movs	r1, #15
 8001668:	438a      	bics	r2, r1
 800166a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	2207      	movs	r2, #7
 8001674:	4013      	ands	r3, r2
 8001676:	b299      	uxth	r1, r3
 8001678:	183b      	adds	r3, r7, r0
 800167a:	183a      	adds	r2, r7, r0
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	183a      	adds	r2, r7, r0
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e04c      	b.n	8001728 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 800168e:	231e      	movs	r3, #30
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e047      	b.n	8001728 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001698:	231f      	movs	r3, #31
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d015      	beq.n	80016ce <UART_SetConfig+0x216>
 80016a2:	dc18      	bgt.n	80016d6 <UART_SetConfig+0x21e>
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d00d      	beq.n	80016c4 <UART_SetConfig+0x20c>
 80016a8:	dc15      	bgt.n	80016d6 <UART_SetConfig+0x21e>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <UART_SetConfig+0x1fc>
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d005      	beq.n	80016be <UART_SetConfig+0x206>
 80016b2:	e010      	b.n	80016d6 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016b4:	f7ff fe96 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
 80016b8:	0003      	movs	r3, r0
 80016ba:	61bb      	str	r3, [r7, #24]
        break;
 80016bc:	e012      	b.n	80016e4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <UART_SetConfig+0x2ac>)
 80016c0:	61bb      	str	r3, [r7, #24]
        break;
 80016c2:	e00f      	b.n	80016e4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016c4:	f7ff fe2c 	bl	8001320 <HAL_RCC_GetSysClockFreq>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
        break;
 80016cc:	e00a      	b.n	80016e4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	61bb      	str	r3, [r7, #24]
        break;
 80016d4:	e006      	b.n	80016e4 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016da:	231e      	movs	r3, #30
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
        break;
 80016e2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d01e      	beq.n	8001728 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	085a      	lsrs	r2, r3, #1
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	18d2      	adds	r2, r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	0019      	movs	r1, r3
 80016fa:	0010      	movs	r0, r2
 80016fc:	f7fe fd04 	bl	8000108 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d90a      	bls.n	8001720 <UART_SetConfig+0x268>
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	429a      	cmp	r2, r3
 8001712:	d205      	bcs.n	8001720 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e003      	b.n	8001728 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8001720:	231e      	movs	r3, #30
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001734:	231e      	movs	r3, #30
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b008      	add	sp, #32
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	efff69f3 	.word	0xefff69f3
 8001748:	ffffcfff 	.word	0xffffcfff
 800174c:	fffff4ff 	.word	0xfffff4ff
 8001750:	40013800 	.word	0x40013800
 8001754:	40021000 	.word	0x40021000
 8001758:	40004400 	.word	0x40004400
 800175c:	40004800 	.word	0x40004800
 8001760:	40004c00 	.word	0x40004c00
 8001764:	007a1200 	.word	0x007a1200

08001768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	2208      	movs	r2, #8
 8001776:	4013      	ands	r3, r2
 8001778:	d00b      	beq.n	8001792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <UART_AdvFeatureConfig+0x144>)
 8001782:	4013      	ands	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	d00b      	beq.n	80017b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a43      	ldr	r2, [pc, #268]	@ (80018b0 <UART_AdvFeatureConfig+0x148>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d00b      	beq.n	80017d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <UART_AdvFeatureConfig+0x14c>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	2204      	movs	r2, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	d00b      	beq.n	80017f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a34      	ldr	r2, [pc, #208]	@ (80018b8 <UART_AdvFeatureConfig+0x150>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	2210      	movs	r2, #16
 80017fe:	4013      	ands	r3, r2
 8001800:	d00b      	beq.n	800181a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a2c      	ldr	r2, [pc, #176]	@ (80018bc <UART_AdvFeatureConfig+0x154>)
 800180a:	4013      	ands	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	2220      	movs	r2, #32
 8001820:	4013      	ands	r3, r2
 8001822:	d00b      	beq.n	800183c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <UART_AdvFeatureConfig+0x158>)
 800182c:	4013      	ands	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	4013      	ands	r3, r2
 8001844:	d01d      	beq.n	8001882 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <UART_AdvFeatureConfig+0x15c>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	035b      	lsls	r3, r3, #13
 8001866:	429a      	cmp	r2, r3
 8001868:	d10b      	bne.n	8001882 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a15      	ldr	r2, [pc, #84]	@ (80018c8 <UART_AdvFeatureConfig+0x160>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	4013      	ands	r3, r2
 800188a:	d00b      	beq.n	80018a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <UART_AdvFeatureConfig+0x164>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
  }
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	ffff7fff 	.word	0xffff7fff
 80018b0:	fffdffff 	.word	0xfffdffff
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	fffbffff 	.word	0xfffbffff
 80018bc:	ffffefff 	.word	0xffffefff
 80018c0:	ffffdfff 	.word	0xffffdfff
 80018c4:	ffefffff 	.word	0xffefffff
 80018c8:	ff9fffff 	.word	0xff9fffff
 80018cc:	fff7ffff 	.word	0xfff7ffff

080018d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b092      	sub	sp, #72	@ 0x48
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2284      	movs	r2, #132	@ 0x84
 80018dc:	2100      	movs	r1, #0
 80018de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80018e0:	f7fe feca 	bl	8000678 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2208      	movs	r2, #8
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d12c      	bne.n	8001950 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	0391      	lsls	r1, r2, #14
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4a46      	ldr	r2, [pc, #280]	@ (8001a18 <UART_CheckIdleState+0x148>)
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	f000 f88c 	bl	8001a20 <UART_WaitOnFlagUntilTimeout>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d021      	beq.n	8001950 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800190c:	f3ef 8310 	mrs	r3, PRIMASK
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191c:	f383 8810 	msr	PRIMASK, r3
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	438a      	bics	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001938:	f383 8810 	msr	PRIMASK, r3
}
 800193c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2278      	movs	r2, #120	@ 0x78
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e05f      	b.n	8001a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	2b04      	cmp	r3, #4
 800195c:	d146      	bne.n	80019ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800195e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	03d1      	lsls	r1, r2, #15
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4a2c      	ldr	r2, [pc, #176]	@ (8001a18 <UART_CheckIdleState+0x148>)
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	f000 f858 	bl	8001a20 <UART_WaitOnFlagUntilTimeout>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d03b      	beq.n	80019ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001974:	f3ef 8310 	mrs	r3, PRIMASK
 8001978:	60fb      	str	r3, [r7, #12]
  return(result);
 800197a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f383 8810 	msr	PRIMASK, r3
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4921      	ldr	r1, [pc, #132]	@ (8001a1c <UART_CheckIdleState+0x14c>)
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f383 8810 	msr	PRIMASK, r3
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019a6:	f3ef 8310 	mrs	r3, PRIMASK
 80019aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80019ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f383 8810 	msr	PRIMASK, r3
}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	438a      	bics	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f383 8810 	msr	PRIMASK, r3
}
 80019d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	2120      	movs	r1, #32
 80019de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2278      	movs	r2, #120	@ 0x78
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e011      	b.n	8001a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2220      	movs	r2, #32
 80019f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	2120      	movs	r1, #32
 80019f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2278      	movs	r2, #120	@ 0x78
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b010      	add	sp, #64	@ 0x40
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	01ffffff 	.word	0x01ffffff
 8001a1c:	fffffedf 	.word	0xfffffedf

08001a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a30:	e051      	b.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	3301      	adds	r3, #1
 8001a36:	d04e      	beq.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7fe fe1e 	bl	8000678 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e051      	b.n	8001af6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d03b      	beq.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b80      	cmp	r3, #128	@ 0x80
 8001a62:	d038      	beq.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b40      	cmp	r3, #64	@ 0x40
 8001a68:	d035      	beq.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2208      	movs	r2, #8
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d111      	bne.n	8001a9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f83c 	bl	8001b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2284      	movs	r2, #132	@ 0x84
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2278      	movs	r2, #120	@ 0x78
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e02c      	b.n	8001af6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d112      	bne.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f81f 	bl	8001b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2284      	movs	r2, #132	@ 0x84
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2278      	movs	r2, #120	@ 0x78
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e00f      	b.n	8001af6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	425a      	negs	r2, r3
 8001ae6:	4153      	adcs	r3, r2
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	001a      	movs	r2, r3
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d09e      	beq.n	8001a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b004      	add	sp, #16
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	@ 0x38
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b08:	f3ef 8310 	mrs	r3, PRIMASK
 8001b0c:	617b      	str	r3, [r7, #20]
  return(result);
 8001b0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f383 8810 	msr	PRIMASK, r3
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4926      	ldr	r1, [pc, #152]	@ (8001bc4 <UART_EndRxTransfer+0xc4>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f383 8810 	msr	PRIMASK, r3
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b3e:	623b      	str	r3, [r7, #32]
  return(result);
 8001b40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b44:	2301      	movs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f383 8810 	msr	PRIMASK, r3
}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	f383 8810 	msr	PRIMASK, r3
}
 8001b6a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d118      	bne.n	8001ba6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b74:	f3ef 8310 	mrs	r3, PRIMASK
 8001b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f383 8810 	msr	PRIMASK, r3
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2110      	movs	r1, #16
 8001b96:	438a      	bics	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f383 8810 	msr	PRIMASK, r3
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	2120      	movs	r1, #32
 8001bac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b00e      	add	sp, #56	@ 0x38
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	fffffedf 	.word	0xfffffedf

08001bc8 <memset>:
 8001bc8:	0003      	movs	r3, r0
 8001bca:	1882      	adds	r2, r0, r2
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <memset+0xa>
 8001bd0:	4770      	bx	lr
 8001bd2:	7019      	strb	r1, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	e7f9      	b.n	8001bcc <memset+0x4>

08001bd8 <__libc_init_array>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	2600      	movs	r6, #0
 8001bdc:	4c0c      	ldr	r4, [pc, #48]	@ (8001c10 <__libc_init_array+0x38>)
 8001bde:	4d0d      	ldr	r5, [pc, #52]	@ (8001c14 <__libc_init_array+0x3c>)
 8001be0:	1b64      	subs	r4, r4, r5
 8001be2:	10a4      	asrs	r4, r4, #2
 8001be4:	42a6      	cmp	r6, r4
 8001be6:	d109      	bne.n	8001bfc <__libc_init_array+0x24>
 8001be8:	2600      	movs	r6, #0
 8001bea:	f000 f819 	bl	8001c20 <_init>
 8001bee:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <__libc_init_array+0x40>)
 8001bf0:	4d0a      	ldr	r5, [pc, #40]	@ (8001c1c <__libc_init_array+0x44>)
 8001bf2:	1b64      	subs	r4, r4, r5
 8001bf4:	10a4      	asrs	r4, r4, #2
 8001bf6:	42a6      	cmp	r6, r4
 8001bf8:	d105      	bne.n	8001c06 <__libc_init_array+0x2e>
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
 8001bfc:	00b3      	lsls	r3, r6, #2
 8001bfe:	58eb      	ldr	r3, [r5, r3]
 8001c00:	4798      	blx	r3
 8001c02:	3601      	adds	r6, #1
 8001c04:	e7ee      	b.n	8001be4 <__libc_init_array+0xc>
 8001c06:	00b3      	lsls	r3, r6, #2
 8001c08:	58eb      	ldr	r3, [r5, r3]
 8001c0a:	4798      	blx	r3
 8001c0c:	3601      	adds	r6, #1
 8001c0e:	e7f2      	b.n	8001bf6 <__libc_init_array+0x1e>
 8001c10:	08001c70 	.word	0x08001c70
 8001c14:	08001c70 	.word	0x08001c70
 8001c18:	08001c74 	.word	0x08001c74
 8001c1c:	08001c70 	.word	0x08001c70

08001c20 <_init>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c26:	bc08      	pop	{r3}
 8001c28:	469e      	mov	lr, r3
 8001c2a:	4770      	bx	lr

08001c2c <_fini>:
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c32:	bc08      	pop	{r3}
 8001c34:	469e      	mov	lr, r3
 8001c36:	4770      	bx	lr
