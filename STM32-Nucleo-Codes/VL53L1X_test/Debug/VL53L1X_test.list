
VL53L1X_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007000  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  08007228  08007228  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007228  08007228  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007230  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000078  080072a8  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  080072a8  00009460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c410  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d31  00000000  00000000  000154b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  000171e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085b  00000000  00000000  00017ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011483  00000000  00000000  000184fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f916  00000000  00000000  0002997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000631d4  00000000  00000000  00039294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bdc  00000000  00000000  0009c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0009f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080070a8 	.word	0x080070a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080070a8 	.word	0x080070a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fda1 	bl	8001f4c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fce1 	bl	8001ddc <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fd93 	bl	8001f4c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fd89 	bl	8001f4c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd0b 	bl	8001e64 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd01 	bl	8001e64 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f002 fc59 	bl	8002d3c <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f002 f894 	bl	80025c0 <__aeabi_dsub>
 8000498:	f002 fc50 	bl	8002d3c <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_fadd>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	46ce      	mov	lr, r9
 80004b0:	4647      	mov	r7, r8
 80004b2:	0243      	lsls	r3, r0, #9
 80004b4:	0a5a      	lsrs	r2, r3, #9
 80004b6:	024e      	lsls	r6, r1, #9
 80004b8:	0045      	lsls	r5, r0, #1
 80004ba:	0fc4      	lsrs	r4, r0, #31
 80004bc:	0048      	lsls	r0, r1, #1
 80004be:	4691      	mov	r9, r2
 80004c0:	0e2d      	lsrs	r5, r5, #24
 80004c2:	0a72      	lsrs	r2, r6, #9
 80004c4:	0e00      	lsrs	r0, r0, #24
 80004c6:	4694      	mov	ip, r2
 80004c8:	b580      	push	{r7, lr}
 80004ca:	099b      	lsrs	r3, r3, #6
 80004cc:	0fc9      	lsrs	r1, r1, #31
 80004ce:	09b6      	lsrs	r6, r6, #6
 80004d0:	1a2a      	subs	r2, r5, r0
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d021      	beq.n	800051a <__aeabi_fadd+0x6e>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	dd0d      	ble.n	80004f6 <__aeabi_fadd+0x4a>
 80004da:	2800      	cmp	r0, #0
 80004dc:	d12d      	bne.n	800053a <__aeabi_fadd+0x8e>
 80004de:	2e00      	cmp	r6, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x38>
 80004e2:	e08d      	b.n	8000600 <__aeabi_fadd+0x154>
 80004e4:	1e51      	subs	r1, r2, #1
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x40>
 80004ea:	e11d      	b.n	8000728 <__aeabi_fadd+0x27c>
 80004ec:	2aff      	cmp	r2, #255	@ 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x46>
 80004f0:	e0ab      	b.n	800064a <__aeabi_fadd+0x19e>
 80004f2:	000a      	movs	r2, r1
 80004f4:	e027      	b.n	8000546 <__aeabi_fadd+0x9a>
 80004f6:	2a00      	cmp	r2, #0
 80004f8:	d04d      	beq.n	8000596 <__aeabi_fadd+0xea>
 80004fa:	1b42      	subs	r2, r0, r5
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0x56>
 8000500:	e0cc      	b.n	800069c <__aeabi_fadd+0x1f0>
 8000502:	2b00      	cmp	r3, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x5c>
 8000506:	e079      	b.n	80005fc <__aeabi_fadd+0x150>
 8000508:	1e54      	subs	r4, r2, #1
 800050a:	2a01      	cmp	r2, #1
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x64>
 800050e:	e128      	b.n	8000762 <__aeabi_fadd+0x2b6>
 8000510:	2aff      	cmp	r2, #255	@ 0xff
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x6a>
 8000514:	e097      	b.n	8000646 <__aeabi_fadd+0x19a>
 8000516:	0022      	movs	r2, r4
 8000518:	e0c5      	b.n	80006a6 <__aeabi_fadd+0x1fa>
 800051a:	2a00      	cmp	r2, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x74>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1a2>
 8000520:	2800      	cmp	r0, #0
 8000522:	d04f      	beq.n	80005c4 <__aeabi_fadd+0x118>
 8000524:	2dff      	cmp	r5, #255	@ 0xff
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x7e>
 8000528:	e08f      	b.n	800064a <__aeabi_fadd+0x19e>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	04c9      	lsls	r1, r1, #19
 800052e:	430e      	orrs	r6, r1
 8000530:	2a1b      	cmp	r2, #27
 8000532:	dd51      	ble.n	80005d8 <__aeabi_fadd+0x12c>
 8000534:	002a      	movs	r2, r5
 8000536:	3301      	adds	r3, #1
 8000538:	e018      	b.n	800056c <__aeabi_fadd+0xc0>
 800053a:	2dff      	cmp	r5, #255	@ 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x94>
 800053e:	e084      	b.n	800064a <__aeabi_fadd+0x19e>
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	04c9      	lsls	r1, r1, #19
 8000544:	430e      	orrs	r6, r1
 8000546:	2101      	movs	r1, #1
 8000548:	2a1b      	cmp	r2, #27
 800054a:	dc08      	bgt.n	800055e <__aeabi_fadd+0xb2>
 800054c:	0031      	movs	r1, r6
 800054e:	2020      	movs	r0, #32
 8000550:	40d1      	lsrs	r1, r2
 8000552:	1a82      	subs	r2, r0, r2
 8000554:	4096      	lsls	r6, r2
 8000556:	0032      	movs	r2, r6
 8000558:	1e50      	subs	r0, r2, #1
 800055a:	4182      	sbcs	r2, r0
 800055c:	4311      	orrs	r1, r2
 800055e:	1a5b      	subs	r3, r3, r1
 8000560:	015a      	lsls	r2, r3, #5
 8000562:	d459      	bmi.n	8000618 <__aeabi_fadd+0x16c>
 8000564:	2107      	movs	r1, #7
 8000566:	002a      	movs	r2, r5
 8000568:	4019      	ands	r1, r3
 800056a:	d049      	beq.n	8000600 <__aeabi_fadd+0x154>
 800056c:	210f      	movs	r1, #15
 800056e:	4019      	ands	r1, r3
 8000570:	2904      	cmp	r1, #4
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0xca>
 8000574:	3304      	adds	r3, #4
 8000576:	0159      	lsls	r1, r3, #5
 8000578:	d542      	bpl.n	8000600 <__aeabi_fadd+0x154>
 800057a:	1c50      	adds	r0, r2, #1
 800057c:	2afe      	cmp	r2, #254	@ 0xfe
 800057e:	d03a      	beq.n	80005f6 <__aeabi_fadd+0x14a>
 8000580:	019b      	lsls	r3, r3, #6
 8000582:	b2c0      	uxtb	r0, r0
 8000584:	0a5b      	lsrs	r3, r3, #9
 8000586:	05c0      	lsls	r0, r0, #23
 8000588:	4318      	orrs	r0, r3
 800058a:	07e4      	lsls	r4, r4, #31
 800058c:	4320      	orrs	r0, r4
 800058e:	bcc0      	pop	{r6, r7}
 8000590:	46b9      	mov	r9, r7
 8000592:	46b0      	mov	r8, r6
 8000594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000596:	20fe      	movs	r0, #254	@ 0xfe
 8000598:	4680      	mov	r8, r0
 800059a:	1c6f      	adds	r7, r5, #1
 800059c:	0038      	movs	r0, r7
 800059e:	4647      	mov	r7, r8
 80005a0:	4207      	tst	r7, r0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0xfa>
 80005a4:	e08e      	b.n	80006c4 <__aeabi_fadd+0x218>
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x100>
 80005aa:	e0b4      	b.n	8000716 <__aeabi_fadd+0x26a>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x106>
 80005b0:	e0db      	b.n	800076a <__aeabi_fadd+0x2be>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d06c      	beq.n	8000690 <__aeabi_fadd+0x1e4>
 80005b6:	1b98      	subs	r0, r3, r6
 80005b8:	0145      	lsls	r5, r0, #5
 80005ba:	d400      	bmi.n	80005be <__aeabi_fadd+0x112>
 80005bc:	e0f7      	b.n	80007ae <__aeabi_fadd+0x302>
 80005be:	000c      	movs	r4, r1
 80005c0:	1af3      	subs	r3, r6, r3
 80005c2:	e03d      	b.n	8000640 <__aeabi_fadd+0x194>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d01b      	beq.n	8000600 <__aeabi_fadd+0x154>
 80005c8:	1e51      	subs	r1, r2, #1
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x124>
 80005ce:	e082      	b.n	80006d6 <__aeabi_fadd+0x22a>
 80005d0:	2aff      	cmp	r2, #255	@ 0xff
 80005d2:	d03a      	beq.n	800064a <__aeabi_fadd+0x19e>
 80005d4:	000a      	movs	r2, r1
 80005d6:	e7ab      	b.n	8000530 <__aeabi_fadd+0x84>
 80005d8:	0031      	movs	r1, r6
 80005da:	2020      	movs	r0, #32
 80005dc:	40d1      	lsrs	r1, r2
 80005de:	1a82      	subs	r2, r0, r2
 80005e0:	4096      	lsls	r6, r2
 80005e2:	0032      	movs	r2, r6
 80005e4:	1e50      	subs	r0, r2, #1
 80005e6:	4182      	sbcs	r2, r0
 80005e8:	430a      	orrs	r2, r1
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	015a      	lsls	r2, r3, #5
 80005ee:	d5b9      	bpl.n	8000564 <__aeabi_fadd+0xb8>
 80005f0:	1c6a      	adds	r2, r5, #1
 80005f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80005f4:	d175      	bne.n	80006e2 <__aeabi_fadd+0x236>
 80005f6:	20ff      	movs	r0, #255	@ 0xff
 80005f8:	2300      	movs	r3, #0
 80005fa:	e7c4      	b.n	8000586 <__aeabi_fadd+0xda>
 80005fc:	000c      	movs	r4, r1
 80005fe:	0033      	movs	r3, r6
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	2aff      	cmp	r2, #255	@ 0xff
 8000604:	d146      	bne.n	8000694 <__aeabi_fadd+0x1e8>
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14a>
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	03d2      	lsls	r2, r2, #15
 800060e:	4313      	orrs	r3, r2
 8000610:	025b      	lsls	r3, r3, #9
 8000612:	20ff      	movs	r0, #255	@ 0xff
 8000614:	0a5b      	lsrs	r3, r3, #9
 8000616:	e7b6      	b.n	8000586 <__aeabi_fadd+0xda>
 8000618:	019f      	lsls	r7, r3, #6
 800061a:	09bf      	lsrs	r7, r7, #6
 800061c:	0038      	movs	r0, r7
 800061e:	f002 fcb9 	bl	8002f94 <__clzsi2>
 8000622:	3805      	subs	r0, #5
 8000624:	4087      	lsls	r7, r0
 8000626:	4285      	cmp	r5, r0
 8000628:	dc24      	bgt.n	8000674 <__aeabi_fadd+0x1c8>
 800062a:	003b      	movs	r3, r7
 800062c:	2120      	movs	r1, #32
 800062e:	1b42      	subs	r2, r0, r5
 8000630:	3201      	adds	r2, #1
 8000632:	40d3      	lsrs	r3, r2
 8000634:	1a8a      	subs	r2, r1, r2
 8000636:	4097      	lsls	r7, r2
 8000638:	1e7a      	subs	r2, r7, #1
 800063a:	4197      	sbcs	r7, r2
 800063c:	2200      	movs	r2, #0
 800063e:	433b      	orrs	r3, r7
 8000640:	0759      	lsls	r1, r3, #29
 8000642:	d193      	bne.n	800056c <__aeabi_fadd+0xc0>
 8000644:	e797      	b.n	8000576 <__aeabi_fadd+0xca>
 8000646:	000c      	movs	r4, r1
 8000648:	0033      	movs	r3, r6
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	e7db      	b.n	8000606 <__aeabi_fadd+0x15a>
 800064e:	2a00      	cmp	r2, #0
 8000650:	d014      	beq.n	800067c <__aeabi_fadd+0x1d0>
 8000652:	1b42      	subs	r2, r0, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d14b      	bne.n	80006f0 <__aeabi_fadd+0x244>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0d0      	beq.n	80005fe <__aeabi_fadd+0x152>
 800065c:	1e51      	subs	r1, r2, #1
 800065e:	2a01      	cmp	r2, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x1b8>
 8000662:	e09e      	b.n	80007a2 <__aeabi_fadd+0x2f6>
 8000664:	2aff      	cmp	r2, #255	@ 0xff
 8000666:	d0ef      	beq.n	8000648 <__aeabi_fadd+0x19c>
 8000668:	000a      	movs	r2, r1
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dd5f      	ble.n	800072e <__aeabi_fadd+0x282>
 800066e:	0002      	movs	r2, r0
 8000670:	1c73      	adds	r3, r6, #1
 8000672:	e77b      	b.n	800056c <__aeabi_fadd+0xc0>
 8000674:	4b50      	ldr	r3, [pc, #320]	@ (80007b8 <__aeabi_fadd+0x30c>)
 8000676:	1a2a      	subs	r2, r5, r0
 8000678:	403b      	ands	r3, r7
 800067a:	e7e1      	b.n	8000640 <__aeabi_fadd+0x194>
 800067c:	21fe      	movs	r1, #254	@ 0xfe
 800067e:	1c6a      	adds	r2, r5, #1
 8000680:	4211      	tst	r1, r2
 8000682:	d13b      	bne.n	80006fc <__aeabi_fadd+0x250>
 8000684:	2d00      	cmp	r5, #0
 8000686:	d15d      	bne.n	8000744 <__aeabi_fadd+0x298>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d07f      	beq.n	800078c <__aeabi_fadd+0x2e0>
 800068c:	2e00      	cmp	r6, #0
 800068e:	d17f      	bne.n	8000790 <__aeabi_fadd+0x2e4>
 8000690:	2200      	movs	r2, #0
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	0a5b      	lsrs	r3, r3, #9
 8000698:	b2d0      	uxtb	r0, r2
 800069a:	e774      	b.n	8000586 <__aeabi_fadd+0xda>
 800069c:	28ff      	cmp	r0, #255	@ 0xff
 800069e:	d0d2      	beq.n	8000646 <__aeabi_fadd+0x19a>
 80006a0:	2480      	movs	r4, #128	@ 0x80
 80006a2:	04e4      	lsls	r4, r4, #19
 80006a4:	4323      	orrs	r3, r4
 80006a6:	2401      	movs	r4, #1
 80006a8:	2a1b      	cmp	r2, #27
 80006aa:	dc07      	bgt.n	80006bc <__aeabi_fadd+0x210>
 80006ac:	001c      	movs	r4, r3
 80006ae:	2520      	movs	r5, #32
 80006b0:	40d4      	lsrs	r4, r2
 80006b2:	1aaa      	subs	r2, r5, r2
 80006b4:	4093      	lsls	r3, r2
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	4193      	sbcs	r3, r2
 80006ba:	431c      	orrs	r4, r3
 80006bc:	1b33      	subs	r3, r6, r4
 80006be:	0005      	movs	r5, r0
 80006c0:	000c      	movs	r4, r1
 80006c2:	e74d      	b.n	8000560 <__aeabi_fadd+0xb4>
 80006c4:	1b9f      	subs	r7, r3, r6
 80006c6:	017a      	lsls	r2, r7, #5
 80006c8:	d422      	bmi.n	8000710 <__aeabi_fadd+0x264>
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d1a6      	bne.n	800061c <__aeabi_fadd+0x170>
 80006ce:	2400      	movs	r4, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	2300      	movs	r3, #0
 80006d4:	e757      	b.n	8000586 <__aeabi_fadd+0xda>
 80006d6:	199b      	adds	r3, r3, r6
 80006d8:	2501      	movs	r5, #1
 80006da:	3201      	adds	r2, #1
 80006dc:	0159      	lsls	r1, r3, #5
 80006de:	d400      	bmi.n	80006e2 <__aeabi_fadd+0x236>
 80006e0:	e740      	b.n	8000564 <__aeabi_fadd+0xb8>
 80006e2:	2101      	movs	r1, #1
 80006e4:	4835      	ldr	r0, [pc, #212]	@ (80007bc <__aeabi_fadd+0x310>)
 80006e6:	4019      	ands	r1, r3
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	4003      	ands	r3, r0
 80006ec:	430b      	orrs	r3, r1
 80006ee:	e7a7      	b.n	8000640 <__aeabi_fadd+0x194>
 80006f0:	28ff      	cmp	r0, #255	@ 0xff
 80006f2:	d0a9      	beq.n	8000648 <__aeabi_fadd+0x19c>
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	04c9      	lsls	r1, r1, #19
 80006f8:	430b      	orrs	r3, r1
 80006fa:	e7b6      	b.n	800066a <__aeabi_fadd+0x1be>
 80006fc:	2aff      	cmp	r2, #255	@ 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0x256>
 8000700:	e779      	b.n	80005f6 <__aeabi_fadd+0x14a>
 8000702:	199b      	adds	r3, r3, r6
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	0759      	lsls	r1, r3, #29
 8000708:	d000      	beq.n	800070c <__aeabi_fadd+0x260>
 800070a:	e72f      	b.n	800056c <__aeabi_fadd+0xc0>
 800070c:	08db      	lsrs	r3, r3, #3
 800070e:	e7c1      	b.n	8000694 <__aeabi_fadd+0x1e8>
 8000710:	000c      	movs	r4, r1
 8000712:	1af7      	subs	r7, r6, r3
 8000714:	e782      	b.n	800061c <__aeabi_fadd+0x170>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d12c      	bne.n	8000774 <__aeabi_fadd+0x2c8>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d193      	bne.n	8000646 <__aeabi_fadd+0x19a>
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	2400      	movs	r4, #0
 8000722:	20ff      	movs	r0, #255	@ 0xff
 8000724:	03db      	lsls	r3, r3, #15
 8000726:	e72e      	b.n	8000586 <__aeabi_fadd+0xda>
 8000728:	2501      	movs	r5, #1
 800072a:	1b9b      	subs	r3, r3, r6
 800072c:	e718      	b.n	8000560 <__aeabi_fadd+0xb4>
 800072e:	0019      	movs	r1, r3
 8000730:	2520      	movs	r5, #32
 8000732:	40d1      	lsrs	r1, r2
 8000734:	1aaa      	subs	r2, r5, r2
 8000736:	4093      	lsls	r3, r2
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	4193      	sbcs	r3, r2
 800073c:	430b      	orrs	r3, r1
 800073e:	0005      	movs	r5, r0
 8000740:	199b      	adds	r3, r3, r6
 8000742:	e753      	b.n	80005ec <__aeabi_fadd+0x140>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d100      	bne.n	800074a <__aeabi_fadd+0x29e>
 8000748:	e77e      	b.n	8000648 <__aeabi_fadd+0x19c>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x2a4>
 800074e:	e77c      	b.n	800064a <__aeabi_fadd+0x19e>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	03d2      	lsls	r2, r2, #15
 8000754:	4591      	cmp	r9, r2
 8000756:	d302      	bcc.n	800075e <__aeabi_fadd+0x2b2>
 8000758:	4594      	cmp	ip, r2
 800075a:	d200      	bcs.n	800075e <__aeabi_fadd+0x2b2>
 800075c:	0033      	movs	r3, r6
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	e753      	b.n	800060a <__aeabi_fadd+0x15e>
 8000762:	000c      	movs	r4, r1
 8000764:	1af3      	subs	r3, r6, r3
 8000766:	3501      	adds	r5, #1
 8000768:	e6fa      	b.n	8000560 <__aeabi_fadd+0xb4>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d0af      	beq.n	80006ce <__aeabi_fadd+0x222>
 800076e:	000c      	movs	r4, r1
 8000770:	0033      	movs	r3, r6
 8000772:	e78d      	b.n	8000690 <__aeabi_fadd+0x1e4>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x2ce>
 8000778:	e767      	b.n	800064a <__aeabi_fadd+0x19e>
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4591      	cmp	r9, r2
 8000780:	d3ed      	bcc.n	800075e <__aeabi_fadd+0x2b2>
 8000782:	4594      	cmp	ip, r2
 8000784:	d2eb      	bcs.n	800075e <__aeabi_fadd+0x2b2>
 8000786:	000c      	movs	r4, r1
 8000788:	0033      	movs	r3, r6
 800078a:	e7e8      	b.n	800075e <__aeabi_fadd+0x2b2>
 800078c:	0033      	movs	r3, r6
 800078e:	e77f      	b.n	8000690 <__aeabi_fadd+0x1e4>
 8000790:	199b      	adds	r3, r3, r6
 8000792:	2200      	movs	r2, #0
 8000794:	0159      	lsls	r1, r3, #5
 8000796:	d5b9      	bpl.n	800070c <__aeabi_fadd+0x260>
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <__aeabi_fadd+0x30c>)
 800079a:	4013      	ands	r3, r2
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	2201      	movs	r2, #1
 80007a0:	e778      	b.n	8000694 <__aeabi_fadd+0x1e8>
 80007a2:	199b      	adds	r3, r3, r6
 80007a4:	3201      	adds	r2, #1
 80007a6:	3501      	adds	r5, #1
 80007a8:	0159      	lsls	r1, r3, #5
 80007aa:	d49a      	bmi.n	80006e2 <__aeabi_fadd+0x236>
 80007ac:	e6da      	b.n	8000564 <__aeabi_fadd+0xb8>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d08d      	beq.n	80006ce <__aeabi_fadd+0x222>
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	e76e      	b.n	8000694 <__aeabi_fadd+0x1e8>
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	fbffffff 	.word	0xfbffffff
 80007bc:	7dffffff 	.word	0x7dffffff

080007c0 <__aeabi_fdiv>:
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	464f      	mov	r7, r9
 80007c4:	4646      	mov	r6, r8
 80007c6:	46d6      	mov	lr, sl
 80007c8:	0244      	lsls	r4, r0, #9
 80007ca:	b5c0      	push	{r6, r7, lr}
 80007cc:	0047      	lsls	r7, r0, #1
 80007ce:	1c0e      	adds	r6, r1, #0
 80007d0:	0a64      	lsrs	r4, r4, #9
 80007d2:	0e3f      	lsrs	r7, r7, #24
 80007d4:	0fc5      	lsrs	r5, r0, #31
 80007d6:	2f00      	cmp	r7, #0
 80007d8:	d03c      	beq.n	8000854 <__aeabi_fdiv+0x94>
 80007da:	2fff      	cmp	r7, #255	@ 0xff
 80007dc:	d042      	beq.n	8000864 <__aeabi_fdiv+0xa4>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00e4      	lsls	r4, r4, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4314      	orrs	r4, r2
 80007ec:	3f7f      	subs	r7, #127	@ 0x7f
 80007ee:	0273      	lsls	r3, r6, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0073      	lsls	r3, r6, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0ff6      	lsrs	r6, r6, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01b      	beq.n	8000836 <__aeabi_fdiv+0x76>
 80007fe:	2bff      	cmp	r3, #255	@ 0xff
 8000800:	d013      	beq.n	800082a <__aeabi_fdiv+0x6a>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2000      	movs	r0, #0
 8000810:	3b7f      	subs	r3, #127	@ 0x7f
 8000812:	0029      	movs	r1, r5
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4071      	eors	r1, r6
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x62>
 8000820:	e0b5      	b.n	800098e <__aeabi_fdiv+0x1ce>
 8000822:	4a74      	ldr	r2, [pc, #464]	@ (80009f4 <__aeabi_fdiv+0x234>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58d3      	ldr	r3, [r2, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	4643      	mov	r3, r8
 800082c:	2b00      	cmp	r3, #0
 800082e:	d13f      	bne.n	80008b0 <__aeabi_fdiv+0xf0>
 8000830:	3fff      	subs	r7, #255	@ 0xff
 8000832:	3302      	adds	r3, #2
 8000834:	e003      	b.n	800083e <__aeabi_fdiv+0x7e>
 8000836:	4643      	mov	r3, r8
 8000838:	2b00      	cmp	r3, #0
 800083a:	d12d      	bne.n	8000898 <__aeabi_fdiv+0xd8>
 800083c:	2301      	movs	r3, #1
 800083e:	0029      	movs	r1, r5
 8000840:	464a      	mov	r2, r9
 8000842:	4071      	eors	r1, r6
 8000844:	b2c9      	uxtb	r1, r1
 8000846:	431a      	orrs	r2, r3
 8000848:	2a0e      	cmp	r2, #14
 800084a:	d838      	bhi.n	80008be <__aeabi_fdiv+0xfe>
 800084c:	486a      	ldr	r0, [pc, #424]	@ (80009f8 <__aeabi_fdiv+0x238>)
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	5882      	ldr	r2, [r0, r2]
 8000852:	4697      	mov	pc, r2
 8000854:	2c00      	cmp	r4, #0
 8000856:	d113      	bne.n	8000880 <__aeabi_fdiv+0xc0>
 8000858:	2304      	movs	r3, #4
 800085a:	4699      	mov	r9, r3
 800085c:	3b03      	subs	r3, #3
 800085e:	2700      	movs	r7, #0
 8000860:	469a      	mov	sl, r3
 8000862:	e7c4      	b.n	80007ee <__aeabi_fdiv+0x2e>
 8000864:	2c00      	cmp	r4, #0
 8000866:	d105      	bne.n	8000874 <__aeabi_fdiv+0xb4>
 8000868:	2308      	movs	r3, #8
 800086a:	4699      	mov	r9, r3
 800086c:	3b06      	subs	r3, #6
 800086e:	27ff      	movs	r7, #255	@ 0xff
 8000870:	469a      	mov	sl, r3
 8000872:	e7bc      	b.n	80007ee <__aeabi_fdiv+0x2e>
 8000874:	230c      	movs	r3, #12
 8000876:	4699      	mov	r9, r3
 8000878:	3b09      	subs	r3, #9
 800087a:	27ff      	movs	r7, #255	@ 0xff
 800087c:	469a      	mov	sl, r3
 800087e:	e7b6      	b.n	80007ee <__aeabi_fdiv+0x2e>
 8000880:	0020      	movs	r0, r4
 8000882:	f002 fb87 	bl	8002f94 <__clzsi2>
 8000886:	2776      	movs	r7, #118	@ 0x76
 8000888:	1f43      	subs	r3, r0, #5
 800088a:	409c      	lsls	r4, r3
 800088c:	2300      	movs	r3, #0
 800088e:	427f      	negs	r7, r7
 8000890:	4699      	mov	r9, r3
 8000892:	469a      	mov	sl, r3
 8000894:	1a3f      	subs	r7, r7, r0
 8000896:	e7aa      	b.n	80007ee <__aeabi_fdiv+0x2e>
 8000898:	4640      	mov	r0, r8
 800089a:	f002 fb7b 	bl	8002f94 <__clzsi2>
 800089e:	4642      	mov	r2, r8
 80008a0:	1f43      	subs	r3, r0, #5
 80008a2:	409a      	lsls	r2, r3
 80008a4:	2376      	movs	r3, #118	@ 0x76
 80008a6:	425b      	negs	r3, r3
 80008a8:	1a1b      	subs	r3, r3, r0
 80008aa:	4690      	mov	r8, r2
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7b0      	b.n	8000812 <__aeabi_fdiv+0x52>
 80008b0:	2303      	movs	r3, #3
 80008b2:	464a      	mov	r2, r9
 80008b4:	431a      	orrs	r2, r3
 80008b6:	4691      	mov	r9, r2
 80008b8:	2003      	movs	r0, #3
 80008ba:	33fc      	adds	r3, #252	@ 0xfc
 80008bc:	e7a9      	b.n	8000812 <__aeabi_fdiv+0x52>
 80008be:	000d      	movs	r5, r1
 80008c0:	20ff      	movs	r0, #255	@ 0xff
 80008c2:	2200      	movs	r2, #0
 80008c4:	05c0      	lsls	r0, r0, #23
 80008c6:	07ed      	lsls	r5, r5, #31
 80008c8:	4310      	orrs	r0, r2
 80008ca:	4328      	orrs	r0, r5
 80008cc:	bce0      	pop	{r5, r6, r7}
 80008ce:	46ba      	mov	sl, r7
 80008d0:	46b1      	mov	r9, r6
 80008d2:	46a8      	mov	r8, r5
 80008d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d6:	000d      	movs	r5, r1
 80008d8:	2000      	movs	r0, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	e7f2      	b.n	80008c4 <__aeabi_fdiv+0x104>
 80008de:	4653      	mov	r3, sl
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d0ed      	beq.n	80008c0 <__aeabi_fdiv+0x100>
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d033      	beq.n	8000950 <__aeabi_fdiv+0x190>
 80008e8:	46a0      	mov	r8, r4
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d105      	bne.n	80008fa <__aeabi_fdiv+0x13a>
 80008ee:	2000      	movs	r0, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	e7e7      	b.n	80008c4 <__aeabi_fdiv+0x104>
 80008f4:	0035      	movs	r5, r6
 80008f6:	2803      	cmp	r0, #3
 80008f8:	d07a      	beq.n	80009f0 <__aeabi_fdiv+0x230>
 80008fa:	003b      	movs	r3, r7
 80008fc:	337f      	adds	r3, #127	@ 0x7f
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dd2d      	ble.n	800095e <__aeabi_fdiv+0x19e>
 8000902:	4642      	mov	r2, r8
 8000904:	0752      	lsls	r2, r2, #29
 8000906:	d007      	beq.n	8000918 <__aeabi_fdiv+0x158>
 8000908:	220f      	movs	r2, #15
 800090a:	4641      	mov	r1, r8
 800090c:	400a      	ands	r2, r1
 800090e:	2a04      	cmp	r2, #4
 8000910:	d002      	beq.n	8000918 <__aeabi_fdiv+0x158>
 8000912:	2204      	movs	r2, #4
 8000914:	4694      	mov	ip, r2
 8000916:	44e0      	add	r8, ip
 8000918:	4642      	mov	r2, r8
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	d505      	bpl.n	800092a <__aeabi_fdiv+0x16a>
 800091e:	4642      	mov	r2, r8
 8000920:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <__aeabi_fdiv+0x23c>)
 8000922:	401a      	ands	r2, r3
 8000924:	003b      	movs	r3, r7
 8000926:	4690      	mov	r8, r2
 8000928:	3380      	adds	r3, #128	@ 0x80
 800092a:	2bfe      	cmp	r3, #254	@ 0xfe
 800092c:	dcc8      	bgt.n	80008c0 <__aeabi_fdiv+0x100>
 800092e:	4642      	mov	r2, r8
 8000930:	0192      	lsls	r2, r2, #6
 8000932:	0a52      	lsrs	r2, r2, #9
 8000934:	b2d8      	uxtb	r0, r3
 8000936:	e7c5      	b.n	80008c4 <__aeabi_fdiv+0x104>
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	2500      	movs	r5, #0
 800093c:	20ff      	movs	r0, #255	@ 0xff
 800093e:	03d2      	lsls	r2, r2, #15
 8000940:	e7c0      	b.n	80008c4 <__aeabi_fdiv+0x104>
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	03d2      	lsls	r2, r2, #15
 8000946:	4214      	tst	r4, r2
 8000948:	d002      	beq.n	8000950 <__aeabi_fdiv+0x190>
 800094a:	4643      	mov	r3, r8
 800094c:	4213      	tst	r3, r2
 800094e:	d049      	beq.n	80009e4 <__aeabi_fdiv+0x224>
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	03d2      	lsls	r2, r2, #15
 8000954:	4322      	orrs	r2, r4
 8000956:	0252      	lsls	r2, r2, #9
 8000958:	20ff      	movs	r0, #255	@ 0xff
 800095a:	0a52      	lsrs	r2, r2, #9
 800095c:	e7b2      	b.n	80008c4 <__aeabi_fdiv+0x104>
 800095e:	2201      	movs	r2, #1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dcc3      	bgt.n	80008ee <__aeabi_fdiv+0x12e>
 8000966:	4642      	mov	r2, r8
 8000968:	40da      	lsrs	r2, r3
 800096a:	4643      	mov	r3, r8
 800096c:	379e      	adds	r7, #158	@ 0x9e
 800096e:	40bb      	lsls	r3, r7
 8000970:	1e59      	subs	r1, r3, #1
 8000972:	418b      	sbcs	r3, r1
 8000974:	431a      	orrs	r2, r3
 8000976:	0753      	lsls	r3, r2, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fdiv+0x1c4>
 800097a:	230f      	movs	r3, #15
 800097c:	4013      	ands	r3, r2
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fdiv+0x1c4>
 8000982:	3204      	adds	r2, #4
 8000984:	0153      	lsls	r3, r2, #5
 8000986:	d529      	bpl.n	80009dc <__aeabi_fdiv+0x21c>
 8000988:	2001      	movs	r0, #1
 800098a:	2200      	movs	r2, #0
 800098c:	e79a      	b.n	80008c4 <__aeabi_fdiv+0x104>
 800098e:	4642      	mov	r2, r8
 8000990:	0163      	lsls	r3, r4, #5
 8000992:	0155      	lsls	r5, r2, #5
 8000994:	42ab      	cmp	r3, r5
 8000996:	d215      	bcs.n	80009c4 <__aeabi_fdiv+0x204>
 8000998:	201b      	movs	r0, #27
 800099a:	2200      	movs	r2, #0
 800099c:	3f01      	subs	r7, #1
 800099e:	2601      	movs	r6, #1
 80009a0:	001c      	movs	r4, r3
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	db01      	blt.n	80009ae <__aeabi_fdiv+0x1ee>
 80009aa:	429d      	cmp	r5, r3
 80009ac:	d801      	bhi.n	80009b2 <__aeabi_fdiv+0x1f2>
 80009ae:	1b5b      	subs	r3, r3, r5
 80009b0:	4332      	orrs	r2, r6
 80009b2:	3801      	subs	r0, #1
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d1f3      	bne.n	80009a0 <__aeabi_fdiv+0x1e0>
 80009b8:	1e58      	subs	r0, r3, #1
 80009ba:	4183      	sbcs	r3, r0
 80009bc:	4313      	orrs	r3, r2
 80009be:	4698      	mov	r8, r3
 80009c0:	000d      	movs	r5, r1
 80009c2:	e79a      	b.n	80008fa <__aeabi_fdiv+0x13a>
 80009c4:	201a      	movs	r0, #26
 80009c6:	2201      	movs	r2, #1
 80009c8:	1b5b      	subs	r3, r3, r5
 80009ca:	e7e8      	b.n	800099e <__aeabi_fdiv+0x1de>
 80009cc:	3b02      	subs	r3, #2
 80009ce:	425a      	negs	r2, r3
 80009d0:	4153      	adcs	r3, r2
 80009d2:	425b      	negs	r3, r3
 80009d4:	0035      	movs	r5, r6
 80009d6:	2200      	movs	r2, #0
 80009d8:	b2d8      	uxtb	r0, r3
 80009da:	e773      	b.n	80008c4 <__aeabi_fdiv+0x104>
 80009dc:	0192      	lsls	r2, r2, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e76f      	b.n	80008c4 <__aeabi_fdiv+0x104>
 80009e4:	431a      	orrs	r2, r3
 80009e6:	0252      	lsls	r2, r2, #9
 80009e8:	0035      	movs	r5, r6
 80009ea:	20ff      	movs	r0, #255	@ 0xff
 80009ec:	0a52      	lsrs	r2, r2, #9
 80009ee:	e769      	b.n	80008c4 <__aeabi_fdiv+0x104>
 80009f0:	4644      	mov	r4, r8
 80009f2:	e7ad      	b.n	8000950 <__aeabi_fdiv+0x190>
 80009f4:	080070c0 	.word	0x080070c0
 80009f8:	08007100 	.word	0x08007100
 80009fc:	f7ffffff 	.word	0xf7ffffff

08000a00 <__aeabi_fmul>:
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	464f      	mov	r7, r9
 8000a04:	4646      	mov	r6, r8
 8000a06:	46d6      	mov	lr, sl
 8000a08:	0243      	lsls	r3, r0, #9
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	0045      	lsls	r5, r0, #1
 8000a0e:	b5c0      	push	{r6, r7, lr}
 8000a10:	4699      	mov	r9, r3
 8000a12:	1c0f      	adds	r7, r1, #0
 8000a14:	0e2d      	lsrs	r5, r5, #24
 8000a16:	0fc6      	lsrs	r6, r0, #31
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fmul+0x1e>
 8000a1c:	e088      	b.n	8000b30 <__aeabi_fmul+0x130>
 8000a1e:	2dff      	cmp	r5, #255	@ 0xff
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fmul+0x24>
 8000a22:	e08d      	b.n	8000b40 <__aeabi_fmul+0x140>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	04d2      	lsls	r2, r2, #19
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4691      	mov	r9, r2
 8000a30:	4698      	mov	r8, r3
 8000a32:	469a      	mov	sl, r3
 8000a34:	3d7f      	subs	r5, #127	@ 0x7f
 8000a36:	027c      	lsls	r4, r7, #9
 8000a38:	007b      	lsls	r3, r7, #1
 8000a3a:	0a64      	lsrs	r4, r4, #9
 8000a3c:	0e1b      	lsrs	r3, r3, #24
 8000a3e:	0fff      	lsrs	r7, r7, #31
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d068      	beq.n	8000b16 <__aeabi_fmul+0x116>
 8000a44:	2bff      	cmp	r3, #255	@ 0xff
 8000a46:	d021      	beq.n	8000a8c <__aeabi_fmul+0x8c>
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	00e4      	lsls	r4, r4, #3
 8000a4c:	04d2      	lsls	r2, r2, #19
 8000a4e:	4314      	orrs	r4, r2
 8000a50:	4642      	mov	r2, r8
 8000a52:	3b7f      	subs	r3, #127	@ 0x7f
 8000a54:	195b      	adds	r3, r3, r5
 8000a56:	2100      	movs	r1, #0
 8000a58:	1c5d      	adds	r5, r3, #1
 8000a5a:	2a0a      	cmp	r2, #10
 8000a5c:	dc2e      	bgt.n	8000abc <__aeabi_fmul+0xbc>
 8000a5e:	407e      	eors	r6, r7
 8000a60:	4642      	mov	r2, r8
 8000a62:	2a02      	cmp	r2, #2
 8000a64:	dc23      	bgt.n	8000aae <__aeabi_fmul+0xae>
 8000a66:	3a01      	subs	r2, #1
 8000a68:	2a01      	cmp	r2, #1
 8000a6a:	d900      	bls.n	8000a6e <__aeabi_fmul+0x6e>
 8000a6c:	e0bd      	b.n	8000bea <__aeabi_fmul+0x1ea>
 8000a6e:	2902      	cmp	r1, #2
 8000a70:	d06e      	beq.n	8000b50 <__aeabi_fmul+0x150>
 8000a72:	2901      	cmp	r1, #1
 8000a74:	d12c      	bne.n	8000ad0 <__aeabi_fmul+0xd0>
 8000a76:	2000      	movs	r0, #0
 8000a78:	2200      	movs	r2, #0
 8000a7a:	05c0      	lsls	r0, r0, #23
 8000a7c:	07f6      	lsls	r6, r6, #31
 8000a7e:	4310      	orrs	r0, r2
 8000a80:	4330      	orrs	r0, r6
 8000a82:	bce0      	pop	{r5, r6, r7}
 8000a84:	46ba      	mov	sl, r7
 8000a86:	46b1      	mov	r9, r6
 8000a88:	46a8      	mov	r8, r5
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	002b      	movs	r3, r5
 8000a8e:	33ff      	adds	r3, #255	@ 0xff
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d065      	beq.n	8000b60 <__aeabi_fmul+0x160>
 8000a94:	2203      	movs	r2, #3
 8000a96:	4641      	mov	r1, r8
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	4688      	mov	r8, r1
 8000aa0:	407a      	eors	r2, r7
 8000aa2:	35ff      	adds	r5, #255	@ 0xff
 8000aa4:	290a      	cmp	r1, #10
 8000aa6:	dd00      	ble.n	8000aaa <__aeabi_fmul+0xaa>
 8000aa8:	e0d8      	b.n	8000c5c <__aeabi_fmul+0x25c>
 8000aaa:	0016      	movs	r6, r2
 8000aac:	2103      	movs	r1, #3
 8000aae:	4640      	mov	r0, r8
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4082      	lsls	r2, r0
 8000ab4:	20a6      	movs	r0, #166	@ 0xa6
 8000ab6:	00c0      	lsls	r0, r0, #3
 8000ab8:	4202      	tst	r2, r0
 8000aba:	d020      	beq.n	8000afe <__aeabi_fmul+0xfe>
 8000abc:	4653      	mov	r3, sl
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d046      	beq.n	8000b50 <__aeabi_fmul+0x150>
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fmul+0xc8>
 8000ac6:	e0bb      	b.n	8000c40 <__aeabi_fmul+0x240>
 8000ac8:	4651      	mov	r1, sl
 8000aca:	464c      	mov	r4, r9
 8000acc:	2901      	cmp	r1, #1
 8000ace:	d0d2      	beq.n	8000a76 <__aeabi_fmul+0x76>
 8000ad0:	002b      	movs	r3, r5
 8000ad2:	337f      	adds	r3, #127	@ 0x7f
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd70      	ble.n	8000bba <__aeabi_fmul+0x1ba>
 8000ad8:	0762      	lsls	r2, r4, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fmul+0xe6>
 8000adc:	220f      	movs	r2, #15
 8000ade:	4022      	ands	r2, r4
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fmul+0xe6>
 8000ae4:	3404      	adds	r4, #4
 8000ae6:	0122      	lsls	r2, r4, #4
 8000ae8:	d503      	bpl.n	8000af2 <__aeabi_fmul+0xf2>
 8000aea:	4b63      	ldr	r3, [pc, #396]	@ (8000c78 <__aeabi_fmul+0x278>)
 8000aec:	401c      	ands	r4, r3
 8000aee:	002b      	movs	r3, r5
 8000af0:	3380      	adds	r3, #128	@ 0x80
 8000af2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000af4:	dc2c      	bgt.n	8000b50 <__aeabi_fmul+0x150>
 8000af6:	01a2      	lsls	r2, r4, #6
 8000af8:	0a52      	lsrs	r2, r2, #9
 8000afa:	b2d8      	uxtb	r0, r3
 8000afc:	e7bd      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000afe:	2090      	movs	r0, #144	@ 0x90
 8000b00:	0080      	lsls	r0, r0, #2
 8000b02:	4202      	tst	r2, r0
 8000b04:	d127      	bne.n	8000b56 <__aeabi_fmul+0x156>
 8000b06:	38b9      	subs	r0, #185	@ 0xb9
 8000b08:	38ff      	subs	r0, #255	@ 0xff
 8000b0a:	4210      	tst	r0, r2
 8000b0c:	d06d      	beq.n	8000bea <__aeabi_fmul+0x1ea>
 8000b0e:	003e      	movs	r6, r7
 8000b10:	46a1      	mov	r9, r4
 8000b12:	468a      	mov	sl, r1
 8000b14:	e7d2      	b.n	8000abc <__aeabi_fmul+0xbc>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d141      	bne.n	8000b9e <__aeabi_fmul+0x19e>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	4690      	mov	r8, r2
 8000b22:	002b      	movs	r3, r5
 8000b24:	4642      	mov	r2, r8
 8000b26:	2101      	movs	r1, #1
 8000b28:	1c5d      	adds	r5, r3, #1
 8000b2a:	2a0a      	cmp	r2, #10
 8000b2c:	dd97      	ble.n	8000a5e <__aeabi_fmul+0x5e>
 8000b2e:	e7c5      	b.n	8000abc <__aeabi_fmul+0xbc>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d126      	bne.n	8000b82 <__aeabi_fmul+0x182>
 8000b34:	2304      	movs	r3, #4
 8000b36:	4698      	mov	r8, r3
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	e77a      	b.n	8000a36 <__aeabi_fmul+0x36>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d118      	bne.n	8000b76 <__aeabi_fmul+0x176>
 8000b44:	2308      	movs	r3, #8
 8000b46:	4698      	mov	r8, r3
 8000b48:	3b06      	subs	r3, #6
 8000b4a:	25ff      	movs	r5, #255	@ 0xff
 8000b4c:	469a      	mov	sl, r3
 8000b4e:	e772      	b.n	8000a36 <__aeabi_fmul+0x36>
 8000b50:	20ff      	movs	r0, #255	@ 0xff
 8000b52:	2200      	movs	r2, #0
 8000b54:	e791      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	2600      	movs	r6, #0
 8000b5a:	20ff      	movs	r0, #255	@ 0xff
 8000b5c:	03d2      	lsls	r2, r2, #15
 8000b5e:	e78c      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000b60:	4641      	mov	r1, r8
 8000b62:	2202      	movs	r2, #2
 8000b64:	3501      	adds	r5, #1
 8000b66:	4311      	orrs	r1, r2
 8000b68:	4688      	mov	r8, r1
 8000b6a:	35ff      	adds	r5, #255	@ 0xff
 8000b6c:	290a      	cmp	r1, #10
 8000b6e:	dca5      	bgt.n	8000abc <__aeabi_fmul+0xbc>
 8000b70:	2102      	movs	r1, #2
 8000b72:	407e      	eors	r6, r7
 8000b74:	e774      	b.n	8000a60 <__aeabi_fmul+0x60>
 8000b76:	230c      	movs	r3, #12
 8000b78:	4698      	mov	r8, r3
 8000b7a:	3b09      	subs	r3, #9
 8000b7c:	25ff      	movs	r5, #255	@ 0xff
 8000b7e:	469a      	mov	sl, r3
 8000b80:	e759      	b.n	8000a36 <__aeabi_fmul+0x36>
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fa06 	bl	8002f94 <__clzsi2>
 8000b88:	464a      	mov	r2, r9
 8000b8a:	1f43      	subs	r3, r0, #5
 8000b8c:	2576      	movs	r5, #118	@ 0x76
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	426d      	negs	r5, r5
 8000b94:	4691      	mov	r9, r2
 8000b96:	4698      	mov	r8, r3
 8000b98:	469a      	mov	sl, r3
 8000b9a:	1a2d      	subs	r5, r5, r0
 8000b9c:	e74b      	b.n	8000a36 <__aeabi_fmul+0x36>
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f002 f9f8 	bl	8002f94 <__clzsi2>
 8000ba4:	4642      	mov	r2, r8
 8000ba6:	1f43      	subs	r3, r0, #5
 8000ba8:	409c      	lsls	r4, r3
 8000baa:	1a2b      	subs	r3, r5, r0
 8000bac:	3b76      	subs	r3, #118	@ 0x76
 8000bae:	2100      	movs	r1, #0
 8000bb0:	1c5d      	adds	r5, r3, #1
 8000bb2:	2a0a      	cmp	r2, #10
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_fmul+0x1b8>
 8000bb6:	e752      	b.n	8000a5e <__aeabi_fmul+0x5e>
 8000bb8:	e780      	b.n	8000abc <__aeabi_fmul+0xbc>
 8000bba:	2201      	movs	r2, #1
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b1b      	cmp	r3, #27
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_fmul+0x1c4>
 8000bc2:	e758      	b.n	8000a76 <__aeabi_fmul+0x76>
 8000bc4:	359e      	adds	r5, #158	@ 0x9e
 8000bc6:	0022      	movs	r2, r4
 8000bc8:	40ac      	lsls	r4, r5
 8000bca:	40da      	lsrs	r2, r3
 8000bcc:	1e63      	subs	r3, r4, #1
 8000bce:	419c      	sbcs	r4, r3
 8000bd0:	4322      	orrs	r2, r4
 8000bd2:	0753      	lsls	r3, r2, #29
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_fmul+0x1e0>
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_fmul+0x1e0>
 8000bde:	3204      	adds	r2, #4
 8000be0:	0153      	lsls	r3, r2, #5
 8000be2:	d537      	bpl.n	8000c54 <__aeabi_fmul+0x254>
 8000be4:	2001      	movs	r0, #1
 8000be6:	2200      	movs	r2, #0
 8000be8:	e747      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000bea:	0c21      	lsrs	r1, r4, #16
 8000bec:	464a      	mov	r2, r9
 8000bee:	0424      	lsls	r4, r4, #16
 8000bf0:	0c24      	lsrs	r4, r4, #16
 8000bf2:	0027      	movs	r7, r4
 8000bf4:	0c10      	lsrs	r0, r2, #16
 8000bf6:	0412      	lsls	r2, r2, #16
 8000bf8:	0c12      	lsrs	r2, r2, #16
 8000bfa:	4344      	muls	r4, r0
 8000bfc:	4357      	muls	r7, r2
 8000bfe:	4348      	muls	r0, r1
 8000c00:	4351      	muls	r1, r2
 8000c02:	0c3a      	lsrs	r2, r7, #16
 8000c04:	1909      	adds	r1, r1, r4
 8000c06:	1852      	adds	r2, r2, r1
 8000c08:	4294      	cmp	r4, r2
 8000c0a:	d903      	bls.n	8000c14 <__aeabi_fmul+0x214>
 8000c0c:	2180      	movs	r1, #128	@ 0x80
 8000c0e:	0249      	lsls	r1, r1, #9
 8000c10:	468c      	mov	ip, r1
 8000c12:	4460      	add	r0, ip
 8000c14:	043f      	lsls	r7, r7, #16
 8000c16:	0411      	lsls	r1, r2, #16
 8000c18:	0c3f      	lsrs	r7, r7, #16
 8000c1a:	19c9      	adds	r1, r1, r7
 8000c1c:	018c      	lsls	r4, r1, #6
 8000c1e:	1e67      	subs	r7, r4, #1
 8000c20:	41bc      	sbcs	r4, r7
 8000c22:	0c12      	lsrs	r2, r2, #16
 8000c24:	0e89      	lsrs	r1, r1, #26
 8000c26:	1812      	adds	r2, r2, r0
 8000c28:	430c      	orrs	r4, r1
 8000c2a:	0192      	lsls	r2, r2, #6
 8000c2c:	4314      	orrs	r4, r2
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	d50e      	bpl.n	8000c50 <__aeabi_fmul+0x250>
 8000c32:	2301      	movs	r3, #1
 8000c34:	0862      	lsrs	r2, r4, #1
 8000c36:	401c      	ands	r4, r3
 8000c38:	4314      	orrs	r4, r2
 8000c3a:	e749      	b.n	8000ad0 <__aeabi_fmul+0xd0>
 8000c3c:	003e      	movs	r6, r7
 8000c3e:	46a1      	mov	r9, r4
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	464b      	mov	r3, r9
 8000c44:	03d2      	lsls	r2, r2, #15
 8000c46:	431a      	orrs	r2, r3
 8000c48:	0252      	lsls	r2, r2, #9
 8000c4a:	20ff      	movs	r0, #255	@ 0xff
 8000c4c:	0a52      	lsrs	r2, r2, #9
 8000c4e:	e714      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000c50:	001d      	movs	r5, r3
 8000c52:	e73d      	b.n	8000ad0 <__aeabi_fmul+0xd0>
 8000c54:	0192      	lsls	r2, r2, #6
 8000c56:	2000      	movs	r0, #0
 8000c58:	0a52      	lsrs	r2, r2, #9
 8000c5a:	e70e      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000c5c:	290f      	cmp	r1, #15
 8000c5e:	d1ed      	bne.n	8000c3c <__aeabi_fmul+0x23c>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	464b      	mov	r3, r9
 8000c64:	03d2      	lsls	r2, r2, #15
 8000c66:	4213      	tst	r3, r2
 8000c68:	d0ea      	beq.n	8000c40 <__aeabi_fmul+0x240>
 8000c6a:	4214      	tst	r4, r2
 8000c6c:	d1e8      	bne.n	8000c40 <__aeabi_fmul+0x240>
 8000c6e:	003e      	movs	r6, r7
 8000c70:	20ff      	movs	r0, #255	@ 0xff
 8000c72:	4322      	orrs	r2, r4
 8000c74:	e701      	b.n	8000a7a <__aeabi_fmul+0x7a>
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	f7ffffff 	.word	0xf7ffffff

08000c7c <__aeabi_fsub>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	4647      	mov	r7, r8
 8000c80:	46ce      	mov	lr, r9
 8000c82:	024e      	lsls	r6, r1, #9
 8000c84:	0243      	lsls	r3, r0, #9
 8000c86:	0045      	lsls	r5, r0, #1
 8000c88:	0a72      	lsrs	r2, r6, #9
 8000c8a:	0fc4      	lsrs	r4, r0, #31
 8000c8c:	0048      	lsls	r0, r1, #1
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	4694      	mov	ip, r2
 8000c92:	0a5f      	lsrs	r7, r3, #9
 8000c94:	0e2d      	lsrs	r5, r5, #24
 8000c96:	099b      	lsrs	r3, r3, #6
 8000c98:	0e00      	lsrs	r0, r0, #24
 8000c9a:	0fc9      	lsrs	r1, r1, #31
 8000c9c:	09b6      	lsrs	r6, r6, #6
 8000c9e:	28ff      	cmp	r0, #255	@ 0xff
 8000ca0:	d024      	beq.n	8000cec <__aeabi_fsub+0x70>
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4051      	eors	r1, r2
 8000ca6:	1a2a      	subs	r2, r5, r0
 8000ca8:	428c      	cmp	r4, r1
 8000caa:	d00f      	beq.n	8000ccc <__aeabi_fsub+0x50>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	dc00      	bgt.n	8000cb2 <__aeabi_fsub+0x36>
 8000cb0:	e16a      	b.n	8000f88 <__aeabi_fsub+0x30c>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d135      	bne.n	8000d22 <__aeabi_fsub+0xa6>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x40>
 8000cba:	e0a2      	b.n	8000e02 <__aeabi_fsub+0x186>
 8000cbc:	1e51      	subs	r1, r2, #1
 8000cbe:	2a01      	cmp	r2, #1
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x48>
 8000cc2:	e124      	b.n	8000f0e <__aeabi_fsub+0x292>
 8000cc4:	2aff      	cmp	r2, #255	@ 0xff
 8000cc6:	d021      	beq.n	8000d0c <__aeabi_fsub+0x90>
 8000cc8:	000a      	movs	r2, r1
 8000cca:	e02f      	b.n	8000d2c <__aeabi_fsub+0xb0>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_fsub+0x56>
 8000cd0:	e167      	b.n	8000fa2 <__aeabi_fsub+0x326>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d05e      	beq.n	8000d94 <__aeabi_fsub+0x118>
 8000cd6:	2dff      	cmp	r5, #255	@ 0xff
 8000cd8:	d018      	beq.n	8000d0c <__aeabi_fsub+0x90>
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	04c9      	lsls	r1, r1, #19
 8000cde:	430e      	orrs	r6, r1
 8000ce0:	2a1b      	cmp	r2, #27
 8000ce2:	dc00      	bgt.n	8000ce6 <__aeabi_fsub+0x6a>
 8000ce4:	e076      	b.n	8000dd4 <__aeabi_fsub+0x158>
 8000ce6:	002a      	movs	r2, r5
 8000ce8:	3301      	adds	r3, #1
 8000cea:	e032      	b.n	8000d52 <__aeabi_fsub+0xd6>
 8000cec:	002a      	movs	r2, r5
 8000cee:	3aff      	subs	r2, #255	@ 0xff
 8000cf0:	4691      	mov	r9, r2
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d042      	beq.n	8000d7c <__aeabi_fsub+0x100>
 8000cf6:	428c      	cmp	r4, r1
 8000cf8:	d055      	beq.n	8000da6 <__aeabi_fsub+0x12a>
 8000cfa:	464a      	mov	r2, r9
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0x86>
 8000d00:	e09c      	b.n	8000e3c <__aeabi_fsub+0x1c0>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0x8c>
 8000d06:	e077      	b.n	8000df8 <__aeabi_fsub+0x17c>
 8000d08:	000c      	movs	r4, r1
 8000d0a:	0033      	movs	r3, r6
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fsub+0x98>
 8000d12:	e06e      	b.n	8000df2 <__aeabi_fsub+0x176>
 8000d14:	2280      	movs	r2, #128	@ 0x80
 8000d16:	03d2      	lsls	r2, r2, #15
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	025b      	lsls	r3, r3, #9
 8000d1c:	20ff      	movs	r0, #255	@ 0xff
 8000d1e:	0a5b      	lsrs	r3, r3, #9
 8000d20:	e024      	b.n	8000d6c <__aeabi_fsub+0xf0>
 8000d22:	2dff      	cmp	r5, #255	@ 0xff
 8000d24:	d0f2      	beq.n	8000d0c <__aeabi_fsub+0x90>
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	04c9      	lsls	r1, r1, #19
 8000d2a:	430e      	orrs	r6, r1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2a1b      	cmp	r2, #27
 8000d30:	dc08      	bgt.n	8000d44 <__aeabi_fsub+0xc8>
 8000d32:	0031      	movs	r1, r6
 8000d34:	2020      	movs	r0, #32
 8000d36:	40d1      	lsrs	r1, r2
 8000d38:	1a82      	subs	r2, r0, r2
 8000d3a:	4096      	lsls	r6, r2
 8000d3c:	0032      	movs	r2, r6
 8000d3e:	1e50      	subs	r0, r2, #1
 8000d40:	4182      	sbcs	r2, r0
 8000d42:	4311      	orrs	r1, r2
 8000d44:	1a5b      	subs	r3, r3, r1
 8000d46:	015a      	lsls	r2, r3, #5
 8000d48:	d460      	bmi.n	8000e0c <__aeabi_fsub+0x190>
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	002a      	movs	r2, r5
 8000d4e:	4019      	ands	r1, r3
 8000d50:	d057      	beq.n	8000e02 <__aeabi_fsub+0x186>
 8000d52:	210f      	movs	r1, #15
 8000d54:	4019      	ands	r1, r3
 8000d56:	2904      	cmp	r1, #4
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fsub+0xe0>
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	0159      	lsls	r1, r3, #5
 8000d5e:	d550      	bpl.n	8000e02 <__aeabi_fsub+0x186>
 8000d60:	1c50      	adds	r0, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d045      	beq.n	8000df2 <__aeabi_fsub+0x176>
 8000d66:	019b      	lsls	r3, r3, #6
 8000d68:	b2c0      	uxtb	r0, r0
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	05c0      	lsls	r0, r0, #23
 8000d6e:	4318      	orrs	r0, r3
 8000d70:	07e4      	lsls	r4, r4, #31
 8000d72:	4320      	orrs	r0, r4
 8000d74:	bcc0      	pop	{r6, r7}
 8000d76:	46b9      	mov	r9, r7
 8000d78:	46b0      	mov	r8, r6
 8000d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4051      	eors	r1, r2
 8000d80:	428c      	cmp	r4, r1
 8000d82:	d1ba      	bne.n	8000cfa <__aeabi_fsub+0x7e>
 8000d84:	464a      	mov	r2, r9
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d010      	beq.n	8000dac <__aeabi_fsub+0x130>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x114>
 8000d8e:	e098      	b.n	8000ec2 <__aeabi_fsub+0x246>
 8000d90:	2300      	movs	r3, #0
 8000d92:	e7bb      	b.n	8000d0c <__aeabi_fsub+0x90>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d034      	beq.n	8000e02 <__aeabi_fsub+0x186>
 8000d98:	1e51      	subs	r1, r2, #1
 8000d9a:	2a01      	cmp	r2, #1
 8000d9c:	d06e      	beq.n	8000e7c <__aeabi_fsub+0x200>
 8000d9e:	2aff      	cmp	r2, #255	@ 0xff
 8000da0:	d0b4      	beq.n	8000d0c <__aeabi_fsub+0x90>
 8000da2:	000a      	movs	r2, r1
 8000da4:	e79c      	b.n	8000ce0 <__aeabi_fsub+0x64>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0x130>
 8000daa:	e088      	b.n	8000ebe <__aeabi_fsub+0x242>
 8000dac:	20fe      	movs	r0, #254	@ 0xfe
 8000dae:	1c6a      	adds	r2, r5, #1
 8000db0:	4210      	tst	r0, r2
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x13a>
 8000db4:	e092      	b.n	8000edc <__aeabi_fsub+0x260>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d000      	beq.n	8000dbc <__aeabi_fsub+0x140>
 8000dba:	e0a4      	b.n	8000f06 <__aeabi_fsub+0x28a>
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x146>
 8000dc0:	e0cb      	b.n	8000f5a <__aeabi_fsub+0x2de>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fsub+0x14c>
 8000dc6:	e0ca      	b.n	8000f5e <__aeabi_fsub+0x2e2>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	b2d0      	uxtb	r0, r2
 8000dd2:	e7cb      	b.n	8000d6c <__aeabi_fsub+0xf0>
 8000dd4:	0031      	movs	r1, r6
 8000dd6:	2020      	movs	r0, #32
 8000dd8:	40d1      	lsrs	r1, r2
 8000dda:	1a82      	subs	r2, r0, r2
 8000ddc:	4096      	lsls	r6, r2
 8000dde:	0032      	movs	r2, r6
 8000de0:	1e50      	subs	r0, r2, #1
 8000de2:	4182      	sbcs	r2, r0
 8000de4:	430a      	orrs	r2, r1
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	015a      	lsls	r2, r3, #5
 8000dea:	d5ae      	bpl.n	8000d4a <__aeabi_fsub+0xce>
 8000dec:	1c6a      	adds	r2, r5, #1
 8000dee:	2dfe      	cmp	r5, #254	@ 0xfe
 8000df0:	d14a      	bne.n	8000e88 <__aeabi_fsub+0x20c>
 8000df2:	20ff      	movs	r0, #255	@ 0xff
 8000df4:	2300      	movs	r3, #0
 8000df6:	e7b9      	b.n	8000d6c <__aeabi_fsub+0xf0>
 8000df8:	22ff      	movs	r2, #255	@ 0xff
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d14b      	bne.n	8000e96 <__aeabi_fsub+0x21a>
 8000dfe:	000c      	movs	r4, r1
 8000e00:	0033      	movs	r3, r6
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	2aff      	cmp	r2, #255	@ 0xff
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x18e>
 8000e08:	e781      	b.n	8000d0e <__aeabi_fsub+0x92>
 8000e0a:	e7df      	b.n	8000dcc <__aeabi_fsub+0x150>
 8000e0c:	019f      	lsls	r7, r3, #6
 8000e0e:	09bf      	lsrs	r7, r7, #6
 8000e10:	0038      	movs	r0, r7
 8000e12:	f002 f8bf 	bl	8002f94 <__clzsi2>
 8000e16:	3805      	subs	r0, #5
 8000e18:	4087      	lsls	r7, r0
 8000e1a:	4285      	cmp	r5, r0
 8000e1c:	dc21      	bgt.n	8000e62 <__aeabi_fsub+0x1e6>
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2120      	movs	r1, #32
 8000e22:	1b42      	subs	r2, r0, r5
 8000e24:	3201      	adds	r2, #1
 8000e26:	40d3      	lsrs	r3, r2
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	1e7a      	subs	r2, r7, #1
 8000e2e:	4197      	sbcs	r7, r2
 8000e30:	2200      	movs	r2, #0
 8000e32:	433b      	orrs	r3, r7
 8000e34:	0759      	lsls	r1, r3, #29
 8000e36:	d000      	beq.n	8000e3a <__aeabi_fsub+0x1be>
 8000e38:	e78b      	b.n	8000d52 <__aeabi_fsub+0xd6>
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fsub+0xe0>
 8000e3c:	20fe      	movs	r0, #254	@ 0xfe
 8000e3e:	1c6a      	adds	r2, r5, #1
 8000e40:	4210      	tst	r0, r2
 8000e42:	d112      	bne.n	8000e6a <__aeabi_fsub+0x1ee>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d152      	bne.n	8000eee <__aeabi_fsub+0x272>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d07c      	beq.n	8000f46 <__aeabi_fsub+0x2ca>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0bb      	beq.n	8000dc8 <__aeabi_fsub+0x14c>
 8000e50:	1b9a      	subs	r2, r3, r6
 8000e52:	0150      	lsls	r0, r2, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0x1dc>
 8000e56:	e08b      	b.n	8000f70 <__aeabi_fsub+0x2f4>
 8000e58:	2401      	movs	r4, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	1af3      	subs	r3, r6, r3
 8000e5e:	400c      	ands	r4, r1
 8000e60:	e7e8      	b.n	8000e34 <__aeabi_fsub+0x1b8>
 8000e62:	4b56      	ldr	r3, [pc, #344]	@ (8000fbc <__aeabi_fsub+0x340>)
 8000e64:	1a2a      	subs	r2, r5, r0
 8000e66:	403b      	ands	r3, r7
 8000e68:	e7e4      	b.n	8000e34 <__aeabi_fsub+0x1b8>
 8000e6a:	1b9f      	subs	r7, r3, r6
 8000e6c:	017a      	lsls	r2, r7, #5
 8000e6e:	d446      	bmi.n	8000efe <__aeabi_fsub+0x282>
 8000e70:	2f00      	cmp	r7, #0
 8000e72:	d1cd      	bne.n	8000e10 <__aeabi_fsub+0x194>
 8000e74:	2400      	movs	r4, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e777      	b.n	8000d6c <__aeabi_fsub+0xf0>
 8000e7c:	199b      	adds	r3, r3, r6
 8000e7e:	2501      	movs	r5, #1
 8000e80:	3201      	adds	r2, #1
 8000e82:	0159      	lsls	r1, r3, #5
 8000e84:	d400      	bmi.n	8000e88 <__aeabi_fsub+0x20c>
 8000e86:	e760      	b.n	8000d4a <__aeabi_fsub+0xce>
 8000e88:	2101      	movs	r1, #1
 8000e8a:	484d      	ldr	r0, [pc, #308]	@ (8000fc0 <__aeabi_fsub+0x344>)
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	4003      	ands	r3, r0
 8000e92:	430b      	orrs	r3, r1
 8000e94:	e7ce      	b.n	8000e34 <__aeabi_fsub+0x1b8>
 8000e96:	1e57      	subs	r7, r2, #1
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	d05a      	beq.n	8000f52 <__aeabi_fsub+0x2d6>
 8000e9c:	000c      	movs	r4, r1
 8000e9e:	2aff      	cmp	r2, #255	@ 0xff
 8000ea0:	d033      	beq.n	8000f0a <__aeabi_fsub+0x28e>
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2f1b      	cmp	r7, #27
 8000ea6:	dc07      	bgt.n	8000eb8 <__aeabi_fsub+0x23c>
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	1bc9      	subs	r1, r1, r7
 8000eac:	001a      	movs	r2, r3
 8000eae:	408b      	lsls	r3, r1
 8000eb0:	40fa      	lsrs	r2, r7
 8000eb2:	1e59      	subs	r1, r3, #1
 8000eb4:	418b      	sbcs	r3, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	0005      	movs	r5, r0
 8000eba:	1ab3      	subs	r3, r6, r2
 8000ebc:	e743      	b.n	8000d46 <__aeabi_fsub+0xca>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d123      	bne.n	8000f0a <__aeabi_fsub+0x28e>
 8000ec2:	22ff      	movs	r2, #255	@ 0xff
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d09b      	beq.n	8000e00 <__aeabi_fsub+0x184>
 8000ec8:	1e51      	subs	r1, r2, #1
 8000eca:	2a01      	cmp	r2, #1
 8000ecc:	d0d6      	beq.n	8000e7c <__aeabi_fsub+0x200>
 8000ece:	2aff      	cmp	r2, #255	@ 0xff
 8000ed0:	d01b      	beq.n	8000f0a <__aeabi_fsub+0x28e>
 8000ed2:	291b      	cmp	r1, #27
 8000ed4:	dd2c      	ble.n	8000f30 <__aeabi_fsub+0x2b4>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1c73      	adds	r3, r6, #1
 8000eda:	e73a      	b.n	8000d52 <__aeabi_fsub+0xd6>
 8000edc:	2aff      	cmp	r2, #255	@ 0xff
 8000ede:	d088      	beq.n	8000df2 <__aeabi_fsub+0x176>
 8000ee0:	199b      	adds	r3, r3, r6
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	0759      	lsls	r1, r3, #29
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x26e>
 8000ee8:	e733      	b.n	8000d52 <__aeabi_fsub+0xd6>
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	e76e      	b.n	8000dcc <__aeabi_fsub+0x150>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d110      	bne.n	8000f14 <__aeabi_fsub+0x298>
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d043      	beq.n	8000f7e <__aeabi_fsub+0x302>
 8000ef6:	2401      	movs	r4, #1
 8000ef8:	0033      	movs	r3, r6
 8000efa:	400c      	ands	r4, r1
 8000efc:	e706      	b.n	8000d0c <__aeabi_fsub+0x90>
 8000efe:	2401      	movs	r4, #1
 8000f00:	1af7      	subs	r7, r6, r3
 8000f02:	400c      	ands	r4, r1
 8000f04:	e784      	b.n	8000e10 <__aeabi_fsub+0x194>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fsub+0x298>
 8000f0a:	0033      	movs	r3, r6
 8000f0c:	e6fe      	b.n	8000d0c <__aeabi_fsub+0x90>
 8000f0e:	2501      	movs	r5, #1
 8000f10:	1b9b      	subs	r3, r3, r6
 8000f12:	e718      	b.n	8000d46 <__aeabi_fsub+0xca>
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x29e>
 8000f18:	e6f8      	b.n	8000d0c <__aeabi_fsub+0x90>
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	03d2      	lsls	r2, r2, #15
 8000f1e:	4297      	cmp	r7, r2
 8000f20:	d304      	bcc.n	8000f2c <__aeabi_fsub+0x2b0>
 8000f22:	4594      	cmp	ip, r2
 8000f24:	d202      	bcs.n	8000f2c <__aeabi_fsub+0x2b0>
 8000f26:	2401      	movs	r4, #1
 8000f28:	0033      	movs	r3, r6
 8000f2a:	400c      	ands	r4, r1
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	e6f1      	b.n	8000d14 <__aeabi_fsub+0x98>
 8000f30:	001a      	movs	r2, r3
 8000f32:	2520      	movs	r5, #32
 8000f34:	40ca      	lsrs	r2, r1
 8000f36:	1a69      	subs	r1, r5, r1
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	1e59      	subs	r1, r3, #1
 8000f3c:	418b      	sbcs	r3, r1
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	0005      	movs	r5, r0
 8000f42:	199b      	adds	r3, r3, r6
 8000f44:	e750      	b.n	8000de8 <__aeabi_fsub+0x16c>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d094      	beq.n	8000e74 <__aeabi_fsub+0x1f8>
 8000f4a:	2401      	movs	r4, #1
 8000f4c:	0033      	movs	r3, r6
 8000f4e:	400c      	ands	r4, r1
 8000f50:	e73a      	b.n	8000dc8 <__aeabi_fsub+0x14c>
 8000f52:	000c      	movs	r4, r1
 8000f54:	2501      	movs	r5, #1
 8000f56:	1af3      	subs	r3, r6, r3
 8000f58:	e6f5      	b.n	8000d46 <__aeabi_fsub+0xca>
 8000f5a:	0033      	movs	r3, r6
 8000f5c:	e734      	b.n	8000dc8 <__aeabi_fsub+0x14c>
 8000f5e:	199b      	adds	r3, r3, r6
 8000f60:	2200      	movs	r2, #0
 8000f62:	0159      	lsls	r1, r3, #5
 8000f64:	d5c1      	bpl.n	8000eea <__aeabi_fsub+0x26e>
 8000f66:	4a15      	ldr	r2, [pc, #84]	@ (8000fbc <__aeabi_fsub+0x340>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	e72d      	b.n	8000dcc <__aeabi_fsub+0x150>
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x2fa>
 8000f74:	e77e      	b.n	8000e74 <__aeabi_fsub+0x1f8>
 8000f76:	0013      	movs	r3, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	08db      	lsrs	r3, r3, #3
 8000f7c:	e726      	b.n	8000dcc <__aeabi_fsub+0x150>
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	2400      	movs	r4, #0
 8000f82:	20ff      	movs	r0, #255	@ 0xff
 8000f84:	03db      	lsls	r3, r3, #15
 8000f86:	e6f1      	b.n	8000d6c <__aeabi_fsub+0xf0>
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x312>
 8000f8c:	e756      	b.n	8000e3c <__aeabi_fsub+0x1c0>
 8000f8e:	1b47      	subs	r7, r0, r5
 8000f90:	003a      	movs	r2, r7
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x31c>
 8000f96:	e730      	b.n	8000dfa <__aeabi_fsub+0x17e>
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	04d2      	lsls	r2, r2, #19
 8000f9c:	000c      	movs	r4, r1
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	e77f      	b.n	8000ea2 <__aeabi_fsub+0x226>
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x32c>
 8000fa6:	e701      	b.n	8000dac <__aeabi_fsub+0x130>
 8000fa8:	1b41      	subs	r1, r0, r5
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fsub+0x336>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	e788      	b.n	8000ec4 <__aeabi_fsub+0x248>
 8000fb2:	2280      	movs	r2, #128	@ 0x80
 8000fb4:	04d2      	lsls	r2, r2, #19
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	e78b      	b.n	8000ed2 <__aeabi_fsub+0x256>
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	fbffffff 	.word	0xfbffffff
 8000fc0:	7dffffff 	.word	0x7dffffff

08000fc4 <__aeabi_i2f>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d013      	beq.n	8000ff2 <__aeabi_i2f+0x2e>
 8000fca:	17c3      	asrs	r3, r0, #31
 8000fcc:	18c5      	adds	r5, r0, r3
 8000fce:	405d      	eors	r5, r3
 8000fd0:	0fc4      	lsrs	r4, r0, #31
 8000fd2:	0028      	movs	r0, r5
 8000fd4:	f001 ffde 	bl	8002f94 <__clzsi2>
 8000fd8:	239e      	movs	r3, #158	@ 0x9e
 8000fda:	0001      	movs	r1, r0
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	2b96      	cmp	r3, #150	@ 0x96
 8000fe0:	dc0f      	bgt.n	8001002 <__aeabi_i2f+0x3e>
 8000fe2:	2808      	cmp	r0, #8
 8000fe4:	d034      	beq.n	8001050 <__aeabi_i2f+0x8c>
 8000fe6:	3908      	subs	r1, #8
 8000fe8:	408d      	lsls	r5, r1
 8000fea:	026d      	lsls	r5, r5, #9
 8000fec:	0a6d      	lsrs	r5, r5, #9
 8000fee:	b2d8      	uxtb	r0, r3
 8000ff0:	e002      	b.n	8000ff8 <__aeabi_i2f+0x34>
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	05c0      	lsls	r0, r0, #23
 8000ffa:	4328      	orrs	r0, r5
 8000ffc:	07e4      	lsls	r4, r4, #31
 8000ffe:	4320      	orrs	r0, r4
 8001000:	bd70      	pop	{r4, r5, r6, pc}
 8001002:	2b99      	cmp	r3, #153	@ 0x99
 8001004:	dc16      	bgt.n	8001034 <__aeabi_i2f+0x70>
 8001006:	1f42      	subs	r2, r0, #5
 8001008:	2805      	cmp	r0, #5
 800100a:	d000      	beq.n	800100e <__aeabi_i2f+0x4a>
 800100c:	4095      	lsls	r5, r2
 800100e:	002a      	movs	r2, r5
 8001010:	4811      	ldr	r0, [pc, #68]	@ (8001058 <__aeabi_i2f+0x94>)
 8001012:	4002      	ands	r2, r0
 8001014:	076e      	lsls	r6, r5, #29
 8001016:	d009      	beq.n	800102c <__aeabi_i2f+0x68>
 8001018:	260f      	movs	r6, #15
 800101a:	4035      	ands	r5, r6
 800101c:	2d04      	cmp	r5, #4
 800101e:	d005      	beq.n	800102c <__aeabi_i2f+0x68>
 8001020:	3204      	adds	r2, #4
 8001022:	0155      	lsls	r5, r2, #5
 8001024:	d502      	bpl.n	800102c <__aeabi_i2f+0x68>
 8001026:	239f      	movs	r3, #159	@ 0x9f
 8001028:	4002      	ands	r2, r0
 800102a:	1a5b      	subs	r3, r3, r1
 800102c:	0192      	lsls	r2, r2, #6
 800102e:	0a55      	lsrs	r5, r2, #9
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	e7e1      	b.n	8000ff8 <__aeabi_i2f+0x34>
 8001034:	2205      	movs	r2, #5
 8001036:	1a12      	subs	r2, r2, r0
 8001038:	0028      	movs	r0, r5
 800103a:	40d0      	lsrs	r0, r2
 800103c:	0002      	movs	r2, r0
 800103e:	0008      	movs	r0, r1
 8001040:	301b      	adds	r0, #27
 8001042:	4085      	lsls	r5, r0
 8001044:	0028      	movs	r0, r5
 8001046:	1e45      	subs	r5, r0, #1
 8001048:	41a8      	sbcs	r0, r5
 800104a:	4302      	orrs	r2, r0
 800104c:	0015      	movs	r5, r2
 800104e:	e7de      	b.n	800100e <__aeabi_i2f+0x4a>
 8001050:	026d      	lsls	r5, r5, #9
 8001052:	2096      	movs	r0, #150	@ 0x96
 8001054:	0a6d      	lsrs	r5, r5, #9
 8001056:	e7cf      	b.n	8000ff8 <__aeabi_i2f+0x34>
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_ui2f>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	1e04      	subs	r4, r0, #0
 8001060:	d00e      	beq.n	8001080 <__aeabi_ui2f+0x24>
 8001062:	f001 ff97 	bl	8002f94 <__clzsi2>
 8001066:	239e      	movs	r3, #158	@ 0x9e
 8001068:	0001      	movs	r1, r0
 800106a:	1a1b      	subs	r3, r3, r0
 800106c:	2b96      	cmp	r3, #150	@ 0x96
 800106e:	dc0c      	bgt.n	800108a <__aeabi_ui2f+0x2e>
 8001070:	2808      	cmp	r0, #8
 8001072:	d02f      	beq.n	80010d4 <__aeabi_ui2f+0x78>
 8001074:	3908      	subs	r1, #8
 8001076:	408c      	lsls	r4, r1
 8001078:	0264      	lsls	r4, r4, #9
 800107a:	0a64      	lsrs	r4, r4, #9
 800107c:	b2d8      	uxtb	r0, r3
 800107e:	e001      	b.n	8001084 <__aeabi_ui2f+0x28>
 8001080:	2000      	movs	r0, #0
 8001082:	2400      	movs	r4, #0
 8001084:	05c0      	lsls	r0, r0, #23
 8001086:	4320      	orrs	r0, r4
 8001088:	bd70      	pop	{r4, r5, r6, pc}
 800108a:	2b99      	cmp	r3, #153	@ 0x99
 800108c:	dc16      	bgt.n	80010bc <__aeabi_ui2f+0x60>
 800108e:	1f42      	subs	r2, r0, #5
 8001090:	2805      	cmp	r0, #5
 8001092:	d000      	beq.n	8001096 <__aeabi_ui2f+0x3a>
 8001094:	4094      	lsls	r4, r2
 8001096:	0022      	movs	r2, r4
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <__aeabi_ui2f+0x80>)
 800109a:	4002      	ands	r2, r0
 800109c:	0765      	lsls	r5, r4, #29
 800109e:	d009      	beq.n	80010b4 <__aeabi_ui2f+0x58>
 80010a0:	250f      	movs	r5, #15
 80010a2:	402c      	ands	r4, r5
 80010a4:	2c04      	cmp	r4, #4
 80010a6:	d005      	beq.n	80010b4 <__aeabi_ui2f+0x58>
 80010a8:	3204      	adds	r2, #4
 80010aa:	0154      	lsls	r4, r2, #5
 80010ac:	d502      	bpl.n	80010b4 <__aeabi_ui2f+0x58>
 80010ae:	239f      	movs	r3, #159	@ 0x9f
 80010b0:	4002      	ands	r2, r0
 80010b2:	1a5b      	subs	r3, r3, r1
 80010b4:	0192      	lsls	r2, r2, #6
 80010b6:	0a54      	lsrs	r4, r2, #9
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	e7e3      	b.n	8001084 <__aeabi_ui2f+0x28>
 80010bc:	0002      	movs	r2, r0
 80010be:	0020      	movs	r0, r4
 80010c0:	321b      	adds	r2, #27
 80010c2:	4090      	lsls	r0, r2
 80010c4:	0002      	movs	r2, r0
 80010c6:	1e50      	subs	r0, r2, #1
 80010c8:	4182      	sbcs	r2, r0
 80010ca:	2005      	movs	r0, #5
 80010cc:	1a40      	subs	r0, r0, r1
 80010ce:	40c4      	lsrs	r4, r0
 80010d0:	4314      	orrs	r4, r2
 80010d2:	e7e0      	b.n	8001096 <__aeabi_ui2f+0x3a>
 80010d4:	0264      	lsls	r4, r4, #9
 80010d6:	2096      	movs	r0, #150	@ 0x96
 80010d8:	0a64      	lsrs	r4, r4, #9
 80010da:	e7d3      	b.n	8001084 <__aeabi_ui2f+0x28>
 80010dc:	fbffffff 	.word	0xfbffffff

080010e0 <__aeabi_dadd>:
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	4657      	mov	r7, sl
 80010e4:	464e      	mov	r6, r9
 80010e6:	4645      	mov	r5, r8
 80010e8:	46de      	mov	lr, fp
 80010ea:	b5e0      	push	{r5, r6, r7, lr}
 80010ec:	b083      	sub	sp, #12
 80010ee:	9000      	str	r0, [sp, #0]
 80010f0:	9101      	str	r1, [sp, #4]
 80010f2:	030c      	lsls	r4, r1, #12
 80010f4:	004f      	lsls	r7, r1, #1
 80010f6:	0fce      	lsrs	r6, r1, #31
 80010f8:	0a61      	lsrs	r1, r4, #9
 80010fa:	9c00      	ldr	r4, [sp, #0]
 80010fc:	031d      	lsls	r5, r3, #12
 80010fe:	0f64      	lsrs	r4, r4, #29
 8001100:	430c      	orrs	r4, r1
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	9200      	str	r2, [sp, #0]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	00c8      	lsls	r0, r1, #3
 800110a:	0059      	lsls	r1, r3, #1
 800110c:	0d4b      	lsrs	r3, r1, #21
 800110e:	4699      	mov	r9, r3
 8001110:	9a00      	ldr	r2, [sp, #0]
 8001112:	9b01      	ldr	r3, [sp, #4]
 8001114:	0a6d      	lsrs	r5, r5, #9
 8001116:	0fd9      	lsrs	r1, r3, #31
 8001118:	0f53      	lsrs	r3, r2, #29
 800111a:	432b      	orrs	r3, r5
 800111c:	469a      	mov	sl, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	0d7f      	lsrs	r7, r7, #21
 8001122:	00da      	lsls	r2, r3, #3
 8001124:	4694      	mov	ip, r2
 8001126:	464a      	mov	r2, r9
 8001128:	46b0      	mov	r8, r6
 800112a:	1aba      	subs	r2, r7, r2
 800112c:	428e      	cmp	r6, r1
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x52>
 8001130:	e0b0      	b.n	8001294 <__aeabi_dadd+0x1b4>
 8001132:	2a00      	cmp	r2, #0
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x58>
 8001136:	e078      	b.n	800122a <__aeabi_dadd+0x14a>
 8001138:	4649      	mov	r1, r9
 800113a:	2900      	cmp	r1, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x60>
 800113e:	e0e9      	b.n	8001314 <__aeabi_dadd+0x234>
 8001140:	49c9      	ldr	r1, [pc, #804]	@ (8001468 <__aeabi_dadd+0x388>)
 8001142:	428f      	cmp	r7, r1
 8001144:	d100      	bne.n	8001148 <__aeabi_dadd+0x68>
 8001146:	e195      	b.n	8001474 <__aeabi_dadd+0x394>
 8001148:	2501      	movs	r5, #1
 800114a:	2a38      	cmp	r2, #56	@ 0x38
 800114c:	dc16      	bgt.n	800117c <__aeabi_dadd+0x9c>
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	4653      	mov	r3, sl
 8001152:	0409      	lsls	r1, r1, #16
 8001154:	430b      	orrs	r3, r1
 8001156:	469a      	mov	sl, r3
 8001158:	2a1f      	cmp	r2, #31
 800115a:	dd00      	ble.n	800115e <__aeabi_dadd+0x7e>
 800115c:	e1e7      	b.n	800152e <__aeabi_dadd+0x44e>
 800115e:	2120      	movs	r1, #32
 8001160:	4655      	mov	r5, sl
 8001162:	1a8b      	subs	r3, r1, r2
 8001164:	4661      	mov	r1, ip
 8001166:	409d      	lsls	r5, r3
 8001168:	40d1      	lsrs	r1, r2
 800116a:	430d      	orrs	r5, r1
 800116c:	4661      	mov	r1, ip
 800116e:	4099      	lsls	r1, r3
 8001170:	1e4b      	subs	r3, r1, #1
 8001172:	4199      	sbcs	r1, r3
 8001174:	4653      	mov	r3, sl
 8001176:	40d3      	lsrs	r3, r2
 8001178:	430d      	orrs	r5, r1
 800117a:	1ae4      	subs	r4, r4, r3
 800117c:	1b45      	subs	r5, r0, r5
 800117e:	42a8      	cmp	r0, r5
 8001180:	4180      	sbcs	r0, r0
 8001182:	4240      	negs	r0, r0
 8001184:	1a24      	subs	r4, r4, r0
 8001186:	0223      	lsls	r3, r4, #8
 8001188:	d400      	bmi.n	800118c <__aeabi_dadd+0xac>
 800118a:	e10f      	b.n	80013ac <__aeabi_dadd+0x2cc>
 800118c:	0264      	lsls	r4, r4, #9
 800118e:	0a64      	lsrs	r4, r4, #9
 8001190:	2c00      	cmp	r4, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0xb6>
 8001194:	e139      	b.n	800140a <__aeabi_dadd+0x32a>
 8001196:	0020      	movs	r0, r4
 8001198:	f001 fefc 	bl	8002f94 <__clzsi2>
 800119c:	0003      	movs	r3, r0
 800119e:	3b08      	subs	r3, #8
 80011a0:	2120      	movs	r1, #32
 80011a2:	0028      	movs	r0, r5
 80011a4:	1aca      	subs	r2, r1, r3
 80011a6:	40d0      	lsrs	r0, r2
 80011a8:	409c      	lsls	r4, r3
 80011aa:	0002      	movs	r2, r0
 80011ac:	409d      	lsls	r5, r3
 80011ae:	4322      	orrs	r2, r4
 80011b0:	429f      	cmp	r7, r3
 80011b2:	dd00      	ble.n	80011b6 <__aeabi_dadd+0xd6>
 80011b4:	e173      	b.n	800149e <__aeabi_dadd+0x3be>
 80011b6:	1bd8      	subs	r0, r3, r7
 80011b8:	3001      	adds	r0, #1
 80011ba:	1a09      	subs	r1, r1, r0
 80011bc:	002c      	movs	r4, r5
 80011be:	408d      	lsls	r5, r1
 80011c0:	40c4      	lsrs	r4, r0
 80011c2:	1e6b      	subs	r3, r5, #1
 80011c4:	419d      	sbcs	r5, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	40c2      	lsrs	r2, r0
 80011ca:	408b      	lsls	r3, r1
 80011cc:	4325      	orrs	r5, r4
 80011ce:	2700      	movs	r7, #0
 80011d0:	0014      	movs	r4, r2
 80011d2:	431d      	orrs	r5, r3
 80011d4:	076b      	lsls	r3, r5, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_dadd+0x10c>
 80011d8:	230f      	movs	r3, #15
 80011da:	402b      	ands	r3, r5
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_dadd+0x10c>
 80011e0:	1d2b      	adds	r3, r5, #4
 80011e2:	42ab      	cmp	r3, r5
 80011e4:	41ad      	sbcs	r5, r5
 80011e6:	426d      	negs	r5, r5
 80011e8:	1964      	adds	r4, r4, r5
 80011ea:	001d      	movs	r5, r3
 80011ec:	0223      	lsls	r3, r4, #8
 80011ee:	d400      	bmi.n	80011f2 <__aeabi_dadd+0x112>
 80011f0:	e12d      	b.n	800144e <__aeabi_dadd+0x36e>
 80011f2:	4a9d      	ldr	r2, [pc, #628]	@ (8001468 <__aeabi_dadd+0x388>)
 80011f4:	3701      	adds	r7, #1
 80011f6:	4297      	cmp	r7, r2
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x11c>
 80011fa:	e0d3      	b.n	80013a4 <__aeabi_dadd+0x2c4>
 80011fc:	4646      	mov	r6, r8
 80011fe:	499b      	ldr	r1, [pc, #620]	@ (800146c <__aeabi_dadd+0x38c>)
 8001200:	08ed      	lsrs	r5, r5, #3
 8001202:	4021      	ands	r1, r4
 8001204:	074a      	lsls	r2, r1, #29
 8001206:	432a      	orrs	r2, r5
 8001208:	057c      	lsls	r4, r7, #21
 800120a:	024d      	lsls	r5, r1, #9
 800120c:	0b2d      	lsrs	r5, r5, #12
 800120e:	0d64      	lsrs	r4, r4, #21
 8001210:	0524      	lsls	r4, r4, #20
 8001212:	432c      	orrs	r4, r5
 8001214:	07f6      	lsls	r6, r6, #31
 8001216:	4334      	orrs	r4, r6
 8001218:	0010      	movs	r0, r2
 800121a:	0021      	movs	r1, r4
 800121c:	b003      	add	sp, #12
 800121e:	bcf0      	pop	{r4, r5, r6, r7}
 8001220:	46bb      	mov	fp, r7
 8001222:	46b2      	mov	sl, r6
 8001224:	46a9      	mov	r9, r5
 8001226:	46a0      	mov	r8, r4
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	2a00      	cmp	r2, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x150>
 800122e:	e084      	b.n	800133a <__aeabi_dadd+0x25a>
 8001230:	464a      	mov	r2, r9
 8001232:	1bd2      	subs	r2, r2, r7
 8001234:	2f00      	cmp	r7, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x15a>
 8001238:	e16d      	b.n	8001516 <__aeabi_dadd+0x436>
 800123a:	0025      	movs	r5, r4
 800123c:	4305      	orrs	r5, r0
 800123e:	d100      	bne.n	8001242 <__aeabi_dadd+0x162>
 8001240:	e127      	b.n	8001492 <__aeabi_dadd+0x3b2>
 8001242:	1e56      	subs	r6, r2, #1
 8001244:	2a01      	cmp	r2, #1
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x16a>
 8001248:	e23b      	b.n	80016c2 <__aeabi_dadd+0x5e2>
 800124a:	4d87      	ldr	r5, [pc, #540]	@ (8001468 <__aeabi_dadd+0x388>)
 800124c:	42aa      	cmp	r2, r5
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x172>
 8001250:	e26a      	b.n	8001728 <__aeabi_dadd+0x648>
 8001252:	2501      	movs	r5, #1
 8001254:	2e38      	cmp	r6, #56	@ 0x38
 8001256:	dc12      	bgt.n	800127e <__aeabi_dadd+0x19e>
 8001258:	0032      	movs	r2, r6
 800125a:	2a1f      	cmp	r2, #31
 800125c:	dd00      	ble.n	8001260 <__aeabi_dadd+0x180>
 800125e:	e1f8      	b.n	8001652 <__aeabi_dadd+0x572>
 8001260:	2620      	movs	r6, #32
 8001262:	0025      	movs	r5, r4
 8001264:	1ab6      	subs	r6, r6, r2
 8001266:	0007      	movs	r7, r0
 8001268:	4653      	mov	r3, sl
 800126a:	40b0      	lsls	r0, r6
 800126c:	40d4      	lsrs	r4, r2
 800126e:	40b5      	lsls	r5, r6
 8001270:	40d7      	lsrs	r7, r2
 8001272:	1e46      	subs	r6, r0, #1
 8001274:	41b0      	sbcs	r0, r6
 8001276:	1b1b      	subs	r3, r3, r4
 8001278:	469a      	mov	sl, r3
 800127a:	433d      	orrs	r5, r7
 800127c:	4305      	orrs	r5, r0
 800127e:	4662      	mov	r2, ip
 8001280:	1b55      	subs	r5, r2, r5
 8001282:	45ac      	cmp	ip, r5
 8001284:	4192      	sbcs	r2, r2
 8001286:	4653      	mov	r3, sl
 8001288:	4252      	negs	r2, r2
 800128a:	000e      	movs	r6, r1
 800128c:	464f      	mov	r7, r9
 800128e:	4688      	mov	r8, r1
 8001290:	1a9c      	subs	r4, r3, r2
 8001292:	e778      	b.n	8001186 <__aeabi_dadd+0xa6>
 8001294:	2a00      	cmp	r2, #0
 8001296:	dc00      	bgt.n	800129a <__aeabi_dadd+0x1ba>
 8001298:	e08e      	b.n	80013b8 <__aeabi_dadd+0x2d8>
 800129a:	4649      	mov	r1, r9
 800129c:	2900      	cmp	r1, #0
 800129e:	d175      	bne.n	800138c <__aeabi_dadd+0x2ac>
 80012a0:	4661      	mov	r1, ip
 80012a2:	4653      	mov	r3, sl
 80012a4:	4319      	orrs	r1, r3
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x1ca>
 80012a8:	e0f6      	b.n	8001498 <__aeabi_dadd+0x3b8>
 80012aa:	1e51      	subs	r1, r2, #1
 80012ac:	2a01      	cmp	r2, #1
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x1d2>
 80012b0:	e191      	b.n	80015d6 <__aeabi_dadd+0x4f6>
 80012b2:	4d6d      	ldr	r5, [pc, #436]	@ (8001468 <__aeabi_dadd+0x388>)
 80012b4:	42aa      	cmp	r2, r5
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x1da>
 80012b8:	e0dc      	b.n	8001474 <__aeabi_dadd+0x394>
 80012ba:	2501      	movs	r5, #1
 80012bc:	2938      	cmp	r1, #56	@ 0x38
 80012be:	dc14      	bgt.n	80012ea <__aeabi_dadd+0x20a>
 80012c0:	000a      	movs	r2, r1
 80012c2:	2a1f      	cmp	r2, #31
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dadd+0x1e8>
 80012c6:	e1a2      	b.n	800160e <__aeabi_dadd+0x52e>
 80012c8:	2120      	movs	r1, #32
 80012ca:	4653      	mov	r3, sl
 80012cc:	1a89      	subs	r1, r1, r2
 80012ce:	408b      	lsls	r3, r1
 80012d0:	001d      	movs	r5, r3
 80012d2:	4663      	mov	r3, ip
 80012d4:	40d3      	lsrs	r3, r2
 80012d6:	431d      	orrs	r5, r3
 80012d8:	4663      	mov	r3, ip
 80012da:	408b      	lsls	r3, r1
 80012dc:	0019      	movs	r1, r3
 80012de:	1e4b      	subs	r3, r1, #1
 80012e0:	4199      	sbcs	r1, r3
 80012e2:	4653      	mov	r3, sl
 80012e4:	40d3      	lsrs	r3, r2
 80012e6:	430d      	orrs	r5, r1
 80012e8:	18e4      	adds	r4, r4, r3
 80012ea:	182d      	adds	r5, r5, r0
 80012ec:	4285      	cmp	r5, r0
 80012ee:	4180      	sbcs	r0, r0
 80012f0:	4240      	negs	r0, r0
 80012f2:	1824      	adds	r4, r4, r0
 80012f4:	0223      	lsls	r3, r4, #8
 80012f6:	d559      	bpl.n	80013ac <__aeabi_dadd+0x2cc>
 80012f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <__aeabi_dadd+0x388>)
 80012fa:	3701      	adds	r7, #1
 80012fc:	429f      	cmp	r7, r3
 80012fe:	d051      	beq.n	80013a4 <__aeabi_dadd+0x2c4>
 8001300:	2101      	movs	r1, #1
 8001302:	4b5a      	ldr	r3, [pc, #360]	@ (800146c <__aeabi_dadd+0x38c>)
 8001304:	086a      	lsrs	r2, r5, #1
 8001306:	401c      	ands	r4, r3
 8001308:	4029      	ands	r1, r5
 800130a:	430a      	orrs	r2, r1
 800130c:	07e5      	lsls	r5, r4, #31
 800130e:	4315      	orrs	r5, r2
 8001310:	0864      	lsrs	r4, r4, #1
 8001312:	e75f      	b.n	80011d4 <__aeabi_dadd+0xf4>
 8001314:	4661      	mov	r1, ip
 8001316:	4653      	mov	r3, sl
 8001318:	4319      	orrs	r1, r3
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x23e>
 800131c:	e0bc      	b.n	8001498 <__aeabi_dadd+0x3b8>
 800131e:	1e51      	subs	r1, r2, #1
 8001320:	2a01      	cmp	r2, #1
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x246>
 8001324:	e164      	b.n	80015f0 <__aeabi_dadd+0x510>
 8001326:	4d50      	ldr	r5, [pc, #320]	@ (8001468 <__aeabi_dadd+0x388>)
 8001328:	42aa      	cmp	r2, r5
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x24e>
 800132c:	e16a      	b.n	8001604 <__aeabi_dadd+0x524>
 800132e:	2501      	movs	r5, #1
 8001330:	2938      	cmp	r1, #56	@ 0x38
 8001332:	dd00      	ble.n	8001336 <__aeabi_dadd+0x256>
 8001334:	e722      	b.n	800117c <__aeabi_dadd+0x9c>
 8001336:	000a      	movs	r2, r1
 8001338:	e70e      	b.n	8001158 <__aeabi_dadd+0x78>
 800133a:	4a4d      	ldr	r2, [pc, #308]	@ (8001470 <__aeabi_dadd+0x390>)
 800133c:	1c7d      	adds	r5, r7, #1
 800133e:	4215      	tst	r5, r2
 8001340:	d000      	beq.n	8001344 <__aeabi_dadd+0x264>
 8001342:	e0d0      	b.n	80014e6 <__aeabi_dadd+0x406>
 8001344:	0025      	movs	r5, r4
 8001346:	4662      	mov	r2, ip
 8001348:	4653      	mov	r3, sl
 800134a:	4305      	orrs	r5, r0
 800134c:	431a      	orrs	r2, r3
 800134e:	2f00      	cmp	r7, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_dadd+0x274>
 8001352:	e137      	b.n	80015c4 <__aeabi_dadd+0x4e4>
 8001354:	2d00      	cmp	r5, #0
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x27a>
 8001358:	e1a8      	b.n	80016ac <__aeabi_dadd+0x5cc>
 800135a:	2a00      	cmp	r2, #0
 800135c:	d100      	bne.n	8001360 <__aeabi_dadd+0x280>
 800135e:	e16a      	b.n	8001636 <__aeabi_dadd+0x556>
 8001360:	4663      	mov	r3, ip
 8001362:	1ac5      	subs	r5, r0, r3
 8001364:	4653      	mov	r3, sl
 8001366:	1ae2      	subs	r2, r4, r3
 8001368:	42a8      	cmp	r0, r5
 800136a:	419b      	sbcs	r3, r3
 800136c:	425b      	negs	r3, r3
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	d400      	bmi.n	8001376 <__aeabi_dadd+0x296>
 8001374:	e203      	b.n	800177e <__aeabi_dadd+0x69e>
 8001376:	4663      	mov	r3, ip
 8001378:	1a1d      	subs	r5, r3, r0
 800137a:	45ac      	cmp	ip, r5
 800137c:	4192      	sbcs	r2, r2
 800137e:	4653      	mov	r3, sl
 8001380:	4252      	negs	r2, r2
 8001382:	1b1c      	subs	r4, r3, r4
 8001384:	000e      	movs	r6, r1
 8001386:	4688      	mov	r8, r1
 8001388:	1aa4      	subs	r4, r4, r2
 800138a:	e723      	b.n	80011d4 <__aeabi_dadd+0xf4>
 800138c:	4936      	ldr	r1, [pc, #216]	@ (8001468 <__aeabi_dadd+0x388>)
 800138e:	428f      	cmp	r7, r1
 8001390:	d070      	beq.n	8001474 <__aeabi_dadd+0x394>
 8001392:	2501      	movs	r5, #1
 8001394:	2a38      	cmp	r2, #56	@ 0x38
 8001396:	dca8      	bgt.n	80012ea <__aeabi_dadd+0x20a>
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	4653      	mov	r3, sl
 800139c:	0409      	lsls	r1, r1, #16
 800139e:	430b      	orrs	r3, r1
 80013a0:	469a      	mov	sl, r3
 80013a2:	e78e      	b.n	80012c2 <__aeabi_dadd+0x1e2>
 80013a4:	003c      	movs	r4, r7
 80013a6:	2500      	movs	r5, #0
 80013a8:	2200      	movs	r2, #0
 80013aa:	e731      	b.n	8001210 <__aeabi_dadd+0x130>
 80013ac:	2307      	movs	r3, #7
 80013ae:	402b      	ands	r3, r5
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x2d6>
 80013b4:	e710      	b.n	80011d8 <__aeabi_dadd+0xf8>
 80013b6:	e093      	b.n	80014e0 <__aeabi_dadd+0x400>
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d074      	beq.n	80014a6 <__aeabi_dadd+0x3c6>
 80013bc:	464a      	mov	r2, r9
 80013be:	1bd2      	subs	r2, r2, r7
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x2e6>
 80013c4:	e0c7      	b.n	8001556 <__aeabi_dadd+0x476>
 80013c6:	4928      	ldr	r1, [pc, #160]	@ (8001468 <__aeabi_dadd+0x388>)
 80013c8:	4589      	cmp	r9, r1
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x2ee>
 80013cc:	e185      	b.n	80016da <__aeabi_dadd+0x5fa>
 80013ce:	2501      	movs	r5, #1
 80013d0:	2a38      	cmp	r2, #56	@ 0x38
 80013d2:	dc12      	bgt.n	80013fa <__aeabi_dadd+0x31a>
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	0409      	lsls	r1, r1, #16
 80013d8:	430c      	orrs	r4, r1
 80013da:	2a1f      	cmp	r2, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dadd+0x300>
 80013de:	e1ab      	b.n	8001738 <__aeabi_dadd+0x658>
 80013e0:	2120      	movs	r1, #32
 80013e2:	0025      	movs	r5, r4
 80013e4:	1a89      	subs	r1, r1, r2
 80013e6:	0007      	movs	r7, r0
 80013e8:	4088      	lsls	r0, r1
 80013ea:	408d      	lsls	r5, r1
 80013ec:	40d7      	lsrs	r7, r2
 80013ee:	1e41      	subs	r1, r0, #1
 80013f0:	4188      	sbcs	r0, r1
 80013f2:	40d4      	lsrs	r4, r2
 80013f4:	433d      	orrs	r5, r7
 80013f6:	4305      	orrs	r5, r0
 80013f8:	44a2      	add	sl, r4
 80013fa:	4465      	add	r5, ip
 80013fc:	4565      	cmp	r5, ip
 80013fe:	4192      	sbcs	r2, r2
 8001400:	4252      	negs	r2, r2
 8001402:	4452      	add	r2, sl
 8001404:	0014      	movs	r4, r2
 8001406:	464f      	mov	r7, r9
 8001408:	e774      	b.n	80012f4 <__aeabi_dadd+0x214>
 800140a:	0028      	movs	r0, r5
 800140c:	f001 fdc2 	bl	8002f94 <__clzsi2>
 8001410:	0003      	movs	r3, r0
 8001412:	3318      	adds	r3, #24
 8001414:	2b1f      	cmp	r3, #31
 8001416:	dc00      	bgt.n	800141a <__aeabi_dadd+0x33a>
 8001418:	e6c2      	b.n	80011a0 <__aeabi_dadd+0xc0>
 800141a:	002a      	movs	r2, r5
 800141c:	3808      	subs	r0, #8
 800141e:	4082      	lsls	r2, r0
 8001420:	429f      	cmp	r7, r3
 8001422:	dd00      	ble.n	8001426 <__aeabi_dadd+0x346>
 8001424:	e0a9      	b.n	800157a <__aeabi_dadd+0x49a>
 8001426:	1bdb      	subs	r3, r3, r7
 8001428:	1c58      	adds	r0, r3, #1
 800142a:	281f      	cmp	r0, #31
 800142c:	dc00      	bgt.n	8001430 <__aeabi_dadd+0x350>
 800142e:	e1ac      	b.n	800178a <__aeabi_dadd+0x6aa>
 8001430:	0015      	movs	r5, r2
 8001432:	3b1f      	subs	r3, #31
 8001434:	40dd      	lsrs	r5, r3
 8001436:	2820      	cmp	r0, #32
 8001438:	d005      	beq.n	8001446 <__aeabi_dadd+0x366>
 800143a:	2340      	movs	r3, #64	@ 0x40
 800143c:	1a1b      	subs	r3, r3, r0
 800143e:	409a      	lsls	r2, r3
 8001440:	1e53      	subs	r3, r2, #1
 8001442:	419a      	sbcs	r2, r3
 8001444:	4315      	orrs	r5, r2
 8001446:	2307      	movs	r3, #7
 8001448:	2700      	movs	r7, #0
 800144a:	402b      	ands	r3, r5
 800144c:	e7b0      	b.n	80013b0 <__aeabi_dadd+0x2d0>
 800144e:	08ed      	lsrs	r5, r5, #3
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <__aeabi_dadd+0x388>)
 8001452:	0762      	lsls	r2, r4, #29
 8001454:	432a      	orrs	r2, r5
 8001456:	08e4      	lsrs	r4, r4, #3
 8001458:	429f      	cmp	r7, r3
 800145a:	d00f      	beq.n	800147c <__aeabi_dadd+0x39c>
 800145c:	0324      	lsls	r4, r4, #12
 800145e:	0b25      	lsrs	r5, r4, #12
 8001460:	057c      	lsls	r4, r7, #21
 8001462:	0d64      	lsrs	r4, r4, #21
 8001464:	e6d4      	b.n	8001210 <__aeabi_dadd+0x130>
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff
 800146c:	ff7fffff 	.word	0xff7fffff
 8001470:	000007fe 	.word	0x000007fe
 8001474:	08c0      	lsrs	r0, r0, #3
 8001476:	0762      	lsls	r2, r4, #29
 8001478:	4302      	orrs	r2, r0
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	0013      	movs	r3, r2
 800147e:	4323      	orrs	r3, r4
 8001480:	d100      	bne.n	8001484 <__aeabi_dadd+0x3a4>
 8001482:	e186      	b.n	8001792 <__aeabi_dadd+0x6b2>
 8001484:	2580      	movs	r5, #128	@ 0x80
 8001486:	032d      	lsls	r5, r5, #12
 8001488:	4325      	orrs	r5, r4
 800148a:	032d      	lsls	r5, r5, #12
 800148c:	4cc3      	ldr	r4, [pc, #780]	@ (800179c <__aeabi_dadd+0x6bc>)
 800148e:	0b2d      	lsrs	r5, r5, #12
 8001490:	e6be      	b.n	8001210 <__aeabi_dadd+0x130>
 8001492:	4660      	mov	r0, ip
 8001494:	4654      	mov	r4, sl
 8001496:	000e      	movs	r6, r1
 8001498:	0017      	movs	r7, r2
 800149a:	08c5      	lsrs	r5, r0, #3
 800149c:	e7d8      	b.n	8001450 <__aeabi_dadd+0x370>
 800149e:	4cc0      	ldr	r4, [pc, #768]	@ (80017a0 <__aeabi_dadd+0x6c0>)
 80014a0:	1aff      	subs	r7, r7, r3
 80014a2:	4014      	ands	r4, r2
 80014a4:	e696      	b.n	80011d4 <__aeabi_dadd+0xf4>
 80014a6:	4abf      	ldr	r2, [pc, #764]	@ (80017a4 <__aeabi_dadd+0x6c4>)
 80014a8:	1c79      	adds	r1, r7, #1
 80014aa:	4211      	tst	r1, r2
 80014ac:	d16b      	bne.n	8001586 <__aeabi_dadd+0x4a6>
 80014ae:	0022      	movs	r2, r4
 80014b0:	4302      	orrs	r2, r0
 80014b2:	2f00      	cmp	r7, #0
 80014b4:	d000      	beq.n	80014b8 <__aeabi_dadd+0x3d8>
 80014b6:	e0db      	b.n	8001670 <__aeabi_dadd+0x590>
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x3de>
 80014bc:	e12d      	b.n	800171a <__aeabi_dadd+0x63a>
 80014be:	4662      	mov	r2, ip
 80014c0:	4653      	mov	r3, sl
 80014c2:	431a      	orrs	r2, r3
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x3e8>
 80014c6:	e0b6      	b.n	8001636 <__aeabi_dadd+0x556>
 80014c8:	4663      	mov	r3, ip
 80014ca:	18c5      	adds	r5, r0, r3
 80014cc:	4285      	cmp	r5, r0
 80014ce:	4180      	sbcs	r0, r0
 80014d0:	4454      	add	r4, sl
 80014d2:	4240      	negs	r0, r0
 80014d4:	1824      	adds	r4, r4, r0
 80014d6:	0223      	lsls	r3, r4, #8
 80014d8:	d502      	bpl.n	80014e0 <__aeabi_dadd+0x400>
 80014da:	000f      	movs	r7, r1
 80014dc:	4bb0      	ldr	r3, [pc, #704]	@ (80017a0 <__aeabi_dadd+0x6c0>)
 80014de:	401c      	ands	r4, r3
 80014e0:	003a      	movs	r2, r7
 80014e2:	0028      	movs	r0, r5
 80014e4:	e7d8      	b.n	8001498 <__aeabi_dadd+0x3b8>
 80014e6:	4662      	mov	r2, ip
 80014e8:	1a85      	subs	r5, r0, r2
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	4192      	sbcs	r2, r2
 80014ee:	4653      	mov	r3, sl
 80014f0:	4252      	negs	r2, r2
 80014f2:	4691      	mov	r9, r2
 80014f4:	1ae3      	subs	r3, r4, r3
 80014f6:	001a      	movs	r2, r3
 80014f8:	464b      	mov	r3, r9
 80014fa:	1ad2      	subs	r2, r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	4691      	mov	r9, r2
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	d454      	bmi.n	80015ae <__aeabi_dadd+0x4ce>
 8001504:	464a      	mov	r2, r9
 8001506:	464c      	mov	r4, r9
 8001508:	432a      	orrs	r2, r5
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x42e>
 800150c:	e640      	b.n	8001190 <__aeabi_dadd+0xb0>
 800150e:	2600      	movs	r6, #0
 8001510:	2400      	movs	r4, #0
 8001512:	2500      	movs	r5, #0
 8001514:	e67c      	b.n	8001210 <__aeabi_dadd+0x130>
 8001516:	4da1      	ldr	r5, [pc, #644]	@ (800179c <__aeabi_dadd+0x6bc>)
 8001518:	45a9      	cmp	r9, r5
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x43e>
 800151c:	e090      	b.n	8001640 <__aeabi_dadd+0x560>
 800151e:	2501      	movs	r5, #1
 8001520:	2a38      	cmp	r2, #56	@ 0x38
 8001522:	dd00      	ble.n	8001526 <__aeabi_dadd+0x446>
 8001524:	e6ab      	b.n	800127e <__aeabi_dadd+0x19e>
 8001526:	2580      	movs	r5, #128	@ 0x80
 8001528:	042d      	lsls	r5, r5, #16
 800152a:	432c      	orrs	r4, r5
 800152c:	e695      	b.n	800125a <__aeabi_dadd+0x17a>
 800152e:	0011      	movs	r1, r2
 8001530:	4655      	mov	r5, sl
 8001532:	3920      	subs	r1, #32
 8001534:	40cd      	lsrs	r5, r1
 8001536:	46a9      	mov	r9, r5
 8001538:	2a20      	cmp	r2, #32
 800153a:	d006      	beq.n	800154a <__aeabi_dadd+0x46a>
 800153c:	2140      	movs	r1, #64	@ 0x40
 800153e:	4653      	mov	r3, sl
 8001540:	1a8a      	subs	r2, r1, r2
 8001542:	4093      	lsls	r3, r2
 8001544:	4662      	mov	r2, ip
 8001546:	431a      	orrs	r2, r3
 8001548:	4694      	mov	ip, r2
 800154a:	4665      	mov	r5, ip
 800154c:	1e6b      	subs	r3, r5, #1
 800154e:	419d      	sbcs	r5, r3
 8001550:	464b      	mov	r3, r9
 8001552:	431d      	orrs	r5, r3
 8001554:	e612      	b.n	800117c <__aeabi_dadd+0x9c>
 8001556:	0021      	movs	r1, r4
 8001558:	4301      	orrs	r1, r0
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x47e>
 800155c:	e0c4      	b.n	80016e8 <__aeabi_dadd+0x608>
 800155e:	1e51      	subs	r1, r2, #1
 8001560:	2a01      	cmp	r2, #1
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x486>
 8001564:	e0fb      	b.n	800175e <__aeabi_dadd+0x67e>
 8001566:	4d8d      	ldr	r5, [pc, #564]	@ (800179c <__aeabi_dadd+0x6bc>)
 8001568:	42aa      	cmp	r2, r5
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x48e>
 800156c:	e0b5      	b.n	80016da <__aeabi_dadd+0x5fa>
 800156e:	2501      	movs	r5, #1
 8001570:	2938      	cmp	r1, #56	@ 0x38
 8001572:	dd00      	ble.n	8001576 <__aeabi_dadd+0x496>
 8001574:	e741      	b.n	80013fa <__aeabi_dadd+0x31a>
 8001576:	000a      	movs	r2, r1
 8001578:	e72f      	b.n	80013da <__aeabi_dadd+0x2fa>
 800157a:	4c89      	ldr	r4, [pc, #548]	@ (80017a0 <__aeabi_dadd+0x6c0>)
 800157c:	1aff      	subs	r7, r7, r3
 800157e:	4014      	ands	r4, r2
 8001580:	0762      	lsls	r2, r4, #29
 8001582:	08e4      	lsrs	r4, r4, #3
 8001584:	e76a      	b.n	800145c <__aeabi_dadd+0x37c>
 8001586:	4a85      	ldr	r2, [pc, #532]	@ (800179c <__aeabi_dadd+0x6bc>)
 8001588:	4291      	cmp	r1, r2
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x4ae>
 800158c:	e0e3      	b.n	8001756 <__aeabi_dadd+0x676>
 800158e:	4663      	mov	r3, ip
 8001590:	18c2      	adds	r2, r0, r3
 8001592:	4282      	cmp	r2, r0
 8001594:	4180      	sbcs	r0, r0
 8001596:	0023      	movs	r3, r4
 8001598:	4240      	negs	r0, r0
 800159a:	4453      	add	r3, sl
 800159c:	181b      	adds	r3, r3, r0
 800159e:	07dd      	lsls	r5, r3, #31
 80015a0:	085c      	lsrs	r4, r3, #1
 80015a2:	2307      	movs	r3, #7
 80015a4:	0852      	lsrs	r2, r2, #1
 80015a6:	4315      	orrs	r5, r2
 80015a8:	000f      	movs	r7, r1
 80015aa:	402b      	ands	r3, r5
 80015ac:	e700      	b.n	80013b0 <__aeabi_dadd+0x2d0>
 80015ae:	4663      	mov	r3, ip
 80015b0:	1a1d      	subs	r5, r3, r0
 80015b2:	45ac      	cmp	ip, r5
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	4653      	mov	r3, sl
 80015b8:	4252      	negs	r2, r2
 80015ba:	1b1c      	subs	r4, r3, r4
 80015bc:	000e      	movs	r6, r1
 80015be:	4688      	mov	r8, r1
 80015c0:	1aa4      	subs	r4, r4, r2
 80015c2:	e5e5      	b.n	8001190 <__aeabi_dadd+0xb0>
 80015c4:	2d00      	cmp	r5, #0
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x4ea>
 80015c8:	e091      	b.n	80016ee <__aeabi_dadd+0x60e>
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d138      	bne.n	8001640 <__aeabi_dadd+0x560>
 80015ce:	2480      	movs	r4, #128	@ 0x80
 80015d0:	2600      	movs	r6, #0
 80015d2:	0324      	lsls	r4, r4, #12
 80015d4:	e756      	b.n	8001484 <__aeabi_dadd+0x3a4>
 80015d6:	4663      	mov	r3, ip
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	4285      	cmp	r5, r0
 80015dc:	4180      	sbcs	r0, r0
 80015de:	4454      	add	r4, sl
 80015e0:	4240      	negs	r0, r0
 80015e2:	1824      	adds	r4, r4, r0
 80015e4:	2701      	movs	r7, #1
 80015e6:	0223      	lsls	r3, r4, #8
 80015e8:	d400      	bmi.n	80015ec <__aeabi_dadd+0x50c>
 80015ea:	e6df      	b.n	80013ac <__aeabi_dadd+0x2cc>
 80015ec:	2702      	movs	r7, #2
 80015ee:	e687      	b.n	8001300 <__aeabi_dadd+0x220>
 80015f0:	4663      	mov	r3, ip
 80015f2:	1ac5      	subs	r5, r0, r3
 80015f4:	42a8      	cmp	r0, r5
 80015f6:	4180      	sbcs	r0, r0
 80015f8:	4653      	mov	r3, sl
 80015fa:	4240      	negs	r0, r0
 80015fc:	1ae4      	subs	r4, r4, r3
 80015fe:	2701      	movs	r7, #1
 8001600:	1a24      	subs	r4, r4, r0
 8001602:	e5c0      	b.n	8001186 <__aeabi_dadd+0xa6>
 8001604:	0762      	lsls	r2, r4, #29
 8001606:	08c0      	lsrs	r0, r0, #3
 8001608:	4302      	orrs	r2, r0
 800160a:	08e4      	lsrs	r4, r4, #3
 800160c:	e736      	b.n	800147c <__aeabi_dadd+0x39c>
 800160e:	0011      	movs	r1, r2
 8001610:	4653      	mov	r3, sl
 8001612:	3920      	subs	r1, #32
 8001614:	40cb      	lsrs	r3, r1
 8001616:	4699      	mov	r9, r3
 8001618:	2a20      	cmp	r2, #32
 800161a:	d006      	beq.n	800162a <__aeabi_dadd+0x54a>
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	4653      	mov	r3, sl
 8001620:	1a8a      	subs	r2, r1, r2
 8001622:	4093      	lsls	r3, r2
 8001624:	4662      	mov	r2, ip
 8001626:	431a      	orrs	r2, r3
 8001628:	4694      	mov	ip, r2
 800162a:	4665      	mov	r5, ip
 800162c:	1e6b      	subs	r3, r5, #1
 800162e:	419d      	sbcs	r5, r3
 8001630:	464b      	mov	r3, r9
 8001632:	431d      	orrs	r5, r3
 8001634:	e659      	b.n	80012ea <__aeabi_dadd+0x20a>
 8001636:	0762      	lsls	r2, r4, #29
 8001638:	08c0      	lsrs	r0, r0, #3
 800163a:	4302      	orrs	r2, r0
 800163c:	08e4      	lsrs	r4, r4, #3
 800163e:	e70d      	b.n	800145c <__aeabi_dadd+0x37c>
 8001640:	4653      	mov	r3, sl
 8001642:	075a      	lsls	r2, r3, #29
 8001644:	4663      	mov	r3, ip
 8001646:	08d8      	lsrs	r0, r3, #3
 8001648:	4653      	mov	r3, sl
 800164a:	000e      	movs	r6, r1
 800164c:	4302      	orrs	r2, r0
 800164e:	08dc      	lsrs	r4, r3, #3
 8001650:	e714      	b.n	800147c <__aeabi_dadd+0x39c>
 8001652:	0015      	movs	r5, r2
 8001654:	0026      	movs	r6, r4
 8001656:	3d20      	subs	r5, #32
 8001658:	40ee      	lsrs	r6, r5
 800165a:	2a20      	cmp	r2, #32
 800165c:	d003      	beq.n	8001666 <__aeabi_dadd+0x586>
 800165e:	2540      	movs	r5, #64	@ 0x40
 8001660:	1aaa      	subs	r2, r5, r2
 8001662:	4094      	lsls	r4, r2
 8001664:	4320      	orrs	r0, r4
 8001666:	1e42      	subs	r2, r0, #1
 8001668:	4190      	sbcs	r0, r2
 800166a:	0005      	movs	r5, r0
 800166c:	4335      	orrs	r5, r6
 800166e:	e606      	b.n	800127e <__aeabi_dadd+0x19e>
 8001670:	2a00      	cmp	r2, #0
 8001672:	d07c      	beq.n	800176e <__aeabi_dadd+0x68e>
 8001674:	4662      	mov	r2, ip
 8001676:	4653      	mov	r3, sl
 8001678:	08c0      	lsrs	r0, r0, #3
 800167a:	431a      	orrs	r2, r3
 800167c:	d100      	bne.n	8001680 <__aeabi_dadd+0x5a0>
 800167e:	e6fa      	b.n	8001476 <__aeabi_dadd+0x396>
 8001680:	0762      	lsls	r2, r4, #29
 8001682:	4310      	orrs	r0, r2
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	08e4      	lsrs	r4, r4, #3
 8001688:	0312      	lsls	r2, r2, #12
 800168a:	4214      	tst	r4, r2
 800168c:	d008      	beq.n	80016a0 <__aeabi_dadd+0x5c0>
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	4211      	tst	r1, r2
 8001692:	d105      	bne.n	80016a0 <__aeabi_dadd+0x5c0>
 8001694:	4663      	mov	r3, ip
 8001696:	08d8      	lsrs	r0, r3, #3
 8001698:	4653      	mov	r3, sl
 800169a:	000c      	movs	r4, r1
 800169c:	075b      	lsls	r3, r3, #29
 800169e:	4318      	orrs	r0, r3
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00c0      	lsls	r0, r0, #3
 80016a4:	08c0      	lsrs	r0, r0, #3
 80016a6:	0752      	lsls	r2, r2, #29
 80016a8:	4302      	orrs	r2, r0
 80016aa:	e6e7      	b.n	800147c <__aeabi_dadd+0x39c>
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x5d2>
 80016b0:	e72d      	b.n	800150e <__aeabi_dadd+0x42e>
 80016b2:	4663      	mov	r3, ip
 80016b4:	08d8      	lsrs	r0, r3, #3
 80016b6:	4653      	mov	r3, sl
 80016b8:	075a      	lsls	r2, r3, #29
 80016ba:	000e      	movs	r6, r1
 80016bc:	4302      	orrs	r2, r0
 80016be:	08dc      	lsrs	r4, r3, #3
 80016c0:	e6cc      	b.n	800145c <__aeabi_dadd+0x37c>
 80016c2:	4663      	mov	r3, ip
 80016c4:	1a1d      	subs	r5, r3, r0
 80016c6:	45ac      	cmp	ip, r5
 80016c8:	4192      	sbcs	r2, r2
 80016ca:	4653      	mov	r3, sl
 80016cc:	4252      	negs	r2, r2
 80016ce:	1b1c      	subs	r4, r3, r4
 80016d0:	000e      	movs	r6, r1
 80016d2:	4688      	mov	r8, r1
 80016d4:	1aa4      	subs	r4, r4, r2
 80016d6:	3701      	adds	r7, #1
 80016d8:	e555      	b.n	8001186 <__aeabi_dadd+0xa6>
 80016da:	4663      	mov	r3, ip
 80016dc:	08d9      	lsrs	r1, r3, #3
 80016de:	4653      	mov	r3, sl
 80016e0:	075a      	lsls	r2, r3, #29
 80016e2:	430a      	orrs	r2, r1
 80016e4:	08dc      	lsrs	r4, r3, #3
 80016e6:	e6c9      	b.n	800147c <__aeabi_dadd+0x39c>
 80016e8:	4660      	mov	r0, ip
 80016ea:	4654      	mov	r4, sl
 80016ec:	e6d4      	b.n	8001498 <__aeabi_dadd+0x3b8>
 80016ee:	08c0      	lsrs	r0, r0, #3
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x616>
 80016f4:	e6bf      	b.n	8001476 <__aeabi_dadd+0x396>
 80016f6:	0762      	lsls	r2, r4, #29
 80016f8:	4310      	orrs	r0, r2
 80016fa:	2280      	movs	r2, #128	@ 0x80
 80016fc:	08e4      	lsrs	r4, r4, #3
 80016fe:	0312      	lsls	r2, r2, #12
 8001700:	4214      	tst	r4, r2
 8001702:	d0cd      	beq.n	80016a0 <__aeabi_dadd+0x5c0>
 8001704:	08dd      	lsrs	r5, r3, #3
 8001706:	4215      	tst	r5, r2
 8001708:	d1ca      	bne.n	80016a0 <__aeabi_dadd+0x5c0>
 800170a:	4663      	mov	r3, ip
 800170c:	08d8      	lsrs	r0, r3, #3
 800170e:	4653      	mov	r3, sl
 8001710:	075b      	lsls	r3, r3, #29
 8001712:	000e      	movs	r6, r1
 8001714:	002c      	movs	r4, r5
 8001716:	4318      	orrs	r0, r3
 8001718:	e7c2      	b.n	80016a0 <__aeabi_dadd+0x5c0>
 800171a:	4663      	mov	r3, ip
 800171c:	08d9      	lsrs	r1, r3, #3
 800171e:	4653      	mov	r3, sl
 8001720:	075a      	lsls	r2, r3, #29
 8001722:	430a      	orrs	r2, r1
 8001724:	08dc      	lsrs	r4, r3, #3
 8001726:	e699      	b.n	800145c <__aeabi_dadd+0x37c>
 8001728:	4663      	mov	r3, ip
 800172a:	08d8      	lsrs	r0, r3, #3
 800172c:	4653      	mov	r3, sl
 800172e:	075a      	lsls	r2, r3, #29
 8001730:	000e      	movs	r6, r1
 8001732:	4302      	orrs	r2, r0
 8001734:	08dc      	lsrs	r4, r3, #3
 8001736:	e6a1      	b.n	800147c <__aeabi_dadd+0x39c>
 8001738:	0011      	movs	r1, r2
 800173a:	0027      	movs	r7, r4
 800173c:	3920      	subs	r1, #32
 800173e:	40cf      	lsrs	r7, r1
 8001740:	2a20      	cmp	r2, #32
 8001742:	d003      	beq.n	800174c <__aeabi_dadd+0x66c>
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	1a8a      	subs	r2, r1, r2
 8001748:	4094      	lsls	r4, r2
 800174a:	4320      	orrs	r0, r4
 800174c:	1e42      	subs	r2, r0, #1
 800174e:	4190      	sbcs	r0, r2
 8001750:	0005      	movs	r5, r0
 8001752:	433d      	orrs	r5, r7
 8001754:	e651      	b.n	80013fa <__aeabi_dadd+0x31a>
 8001756:	000c      	movs	r4, r1
 8001758:	2500      	movs	r5, #0
 800175a:	2200      	movs	r2, #0
 800175c:	e558      	b.n	8001210 <__aeabi_dadd+0x130>
 800175e:	4460      	add	r0, ip
 8001760:	4560      	cmp	r0, ip
 8001762:	4192      	sbcs	r2, r2
 8001764:	4454      	add	r4, sl
 8001766:	4252      	negs	r2, r2
 8001768:	0005      	movs	r5, r0
 800176a:	18a4      	adds	r4, r4, r2
 800176c:	e73a      	b.n	80015e4 <__aeabi_dadd+0x504>
 800176e:	4653      	mov	r3, sl
 8001770:	075a      	lsls	r2, r3, #29
 8001772:	4663      	mov	r3, ip
 8001774:	08d9      	lsrs	r1, r3, #3
 8001776:	4653      	mov	r3, sl
 8001778:	430a      	orrs	r2, r1
 800177a:	08dc      	lsrs	r4, r3, #3
 800177c:	e67e      	b.n	800147c <__aeabi_dadd+0x39c>
 800177e:	001a      	movs	r2, r3
 8001780:	001c      	movs	r4, r3
 8001782:	432a      	orrs	r2, r5
 8001784:	d000      	beq.n	8001788 <__aeabi_dadd+0x6a8>
 8001786:	e6ab      	b.n	80014e0 <__aeabi_dadd+0x400>
 8001788:	e6c1      	b.n	800150e <__aeabi_dadd+0x42e>
 800178a:	2120      	movs	r1, #32
 800178c:	2500      	movs	r5, #0
 800178e:	1a09      	subs	r1, r1, r0
 8001790:	e519      	b.n	80011c6 <__aeabi_dadd+0xe6>
 8001792:	2200      	movs	r2, #0
 8001794:	2500      	movs	r5, #0
 8001796:	4c01      	ldr	r4, [pc, #4]	@ (800179c <__aeabi_dadd+0x6bc>)
 8001798:	e53a      	b.n	8001210 <__aeabi_dadd+0x130>
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	ff7fffff 	.word	0xff7fffff
 80017a4:	000007fe 	.word	0x000007fe

080017a8 <__aeabi_ddiv>:
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	46de      	mov	lr, fp
 80017ac:	4645      	mov	r5, r8
 80017ae:	4657      	mov	r7, sl
 80017b0:	464e      	mov	r6, r9
 80017b2:	b5e0      	push	{r5, r6, r7, lr}
 80017b4:	b087      	sub	sp, #28
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	030b      	lsls	r3, r1, #12
 80017bc:	0b1b      	lsrs	r3, r3, #12
 80017be:	469b      	mov	fp, r3
 80017c0:	0fca      	lsrs	r2, r1, #31
 80017c2:	004b      	lsls	r3, r1, #1
 80017c4:	0004      	movs	r4, r0
 80017c6:	4680      	mov	r8, r0
 80017c8:	0d5b      	lsrs	r3, r3, #21
 80017ca:	9202      	str	r2, [sp, #8]
 80017cc:	d100      	bne.n	80017d0 <__aeabi_ddiv+0x28>
 80017ce:	e16a      	b.n	8001aa6 <__aeabi_ddiv+0x2fe>
 80017d0:	4ad4      	ldr	r2, [pc, #848]	@ (8001b24 <__aeabi_ddiv+0x37c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d100      	bne.n	80017d8 <__aeabi_ddiv+0x30>
 80017d6:	e18c      	b.n	8001af2 <__aeabi_ddiv+0x34a>
 80017d8:	4659      	mov	r1, fp
 80017da:	0f42      	lsrs	r2, r0, #29
 80017dc:	00c9      	lsls	r1, r1, #3
 80017de:	430a      	orrs	r2, r1
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0409      	lsls	r1, r1, #16
 80017e4:	4311      	orrs	r1, r2
 80017e6:	00c2      	lsls	r2, r0, #3
 80017e8:	4690      	mov	r8, r2
 80017ea:	4acf      	ldr	r2, [pc, #828]	@ (8001b28 <__aeabi_ddiv+0x380>)
 80017ec:	4689      	mov	r9, r1
 80017ee:	4692      	mov	sl, r2
 80017f0:	449a      	add	sl, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	2400      	movs	r4, #0
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	9e00      	ldr	r6, [sp, #0]
 80017fa:	9f01      	ldr	r7, [sp, #4]
 80017fc:	033b      	lsls	r3, r7, #12
 80017fe:	0b1b      	lsrs	r3, r3, #12
 8001800:	469b      	mov	fp, r3
 8001802:	007b      	lsls	r3, r7, #1
 8001804:	0030      	movs	r0, r6
 8001806:	0d5b      	lsrs	r3, r3, #21
 8001808:	0ffd      	lsrs	r5, r7, #31
 800180a:	2b00      	cmp	r3, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x68>
 800180e:	e128      	b.n	8001a62 <__aeabi_ddiv+0x2ba>
 8001810:	4ac4      	ldr	r2, [pc, #784]	@ (8001b24 <__aeabi_ddiv+0x37c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d100      	bne.n	8001818 <__aeabi_ddiv+0x70>
 8001816:	e177      	b.n	8001b08 <__aeabi_ddiv+0x360>
 8001818:	4659      	mov	r1, fp
 800181a:	0f72      	lsrs	r2, r6, #29
 800181c:	00c9      	lsls	r1, r1, #3
 800181e:	430a      	orrs	r2, r1
 8001820:	2180      	movs	r1, #128	@ 0x80
 8001822:	0409      	lsls	r1, r1, #16
 8001824:	4311      	orrs	r1, r2
 8001826:	468b      	mov	fp, r1
 8001828:	49bf      	ldr	r1, [pc, #764]	@ (8001b28 <__aeabi_ddiv+0x380>)
 800182a:	00f2      	lsls	r2, r6, #3
 800182c:	468c      	mov	ip, r1
 800182e:	4651      	mov	r1, sl
 8001830:	4463      	add	r3, ip
 8001832:	1acb      	subs	r3, r1, r3
 8001834:	469a      	mov	sl, r3
 8001836:	2300      	movs	r3, #0
 8001838:	9e02      	ldr	r6, [sp, #8]
 800183a:	406e      	eors	r6, r5
 800183c:	2c0f      	cmp	r4, #15
 800183e:	d827      	bhi.n	8001890 <__aeabi_ddiv+0xe8>
 8001840:	49ba      	ldr	r1, [pc, #744]	@ (8001b2c <__aeabi_ddiv+0x384>)
 8001842:	00a4      	lsls	r4, r4, #2
 8001844:	5909      	ldr	r1, [r1, r4]
 8001846:	468f      	mov	pc, r1
 8001848:	46cb      	mov	fp, r9
 800184a:	4642      	mov	r2, r8
 800184c:	9e02      	ldr	r6, [sp, #8]
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d016      	beq.n	8001882 <__aeabi_ddiv+0xda>
 8001854:	2b03      	cmp	r3, #3
 8001856:	d100      	bne.n	800185a <__aeabi_ddiv+0xb2>
 8001858:	e2a6      	b.n	8001da8 <__aeabi_ddiv+0x600>
 800185a:	2b01      	cmp	r3, #1
 800185c:	d000      	beq.n	8001860 <__aeabi_ddiv+0xb8>
 800185e:	e0df      	b.n	8001a20 <__aeabi_ddiv+0x278>
 8001860:	2200      	movs	r2, #0
 8001862:	2300      	movs	r3, #0
 8001864:	2400      	movs	r4, #0
 8001866:	4690      	mov	r8, r2
 8001868:	051b      	lsls	r3, r3, #20
 800186a:	4323      	orrs	r3, r4
 800186c:	07f6      	lsls	r6, r6, #31
 800186e:	4333      	orrs	r3, r6
 8001870:	4640      	mov	r0, r8
 8001872:	0019      	movs	r1, r3
 8001874:	b007      	add	sp, #28
 8001876:	bcf0      	pop	{r4, r5, r6, r7}
 8001878:	46bb      	mov	fp, r7
 800187a:	46b2      	mov	sl, r6
 800187c:	46a9      	mov	r9, r5
 800187e:	46a0      	mov	r8, r4
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	2200      	movs	r2, #0
 8001884:	2400      	movs	r4, #0
 8001886:	4690      	mov	r8, r2
 8001888:	4ba6      	ldr	r3, [pc, #664]	@ (8001b24 <__aeabi_ddiv+0x37c>)
 800188a:	e7ed      	b.n	8001868 <__aeabi_ddiv+0xc0>
 800188c:	002e      	movs	r6, r5
 800188e:	e7df      	b.n	8001850 <__aeabi_ddiv+0xa8>
 8001890:	45cb      	cmp	fp, r9
 8001892:	d200      	bcs.n	8001896 <__aeabi_ddiv+0xee>
 8001894:	e1d4      	b.n	8001c40 <__aeabi_ddiv+0x498>
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0xf2>
 8001898:	e1cf      	b.n	8001c3a <__aeabi_ddiv+0x492>
 800189a:	2301      	movs	r3, #1
 800189c:	425b      	negs	r3, r3
 800189e:	469c      	mov	ip, r3
 80018a0:	4644      	mov	r4, r8
 80018a2:	4648      	mov	r0, r9
 80018a4:	2700      	movs	r7, #0
 80018a6:	44e2      	add	sl, ip
 80018a8:	465b      	mov	r3, fp
 80018aa:	0e15      	lsrs	r5, r2, #24
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	431d      	orrs	r5, r3
 80018b0:	0c19      	lsrs	r1, r3, #16
 80018b2:	042b      	lsls	r3, r5, #16
 80018b4:	0212      	lsls	r2, r2, #8
 80018b6:	9500      	str	r5, [sp, #0]
 80018b8:	0c1d      	lsrs	r5, r3, #16
 80018ba:	4691      	mov	r9, r2
 80018bc:	9102      	str	r1, [sp, #8]
 80018be:	9503      	str	r5, [sp, #12]
 80018c0:	f7fe fca8 	bl	8000214 <__aeabi_uidivmod>
 80018c4:	0002      	movs	r2, r0
 80018c6:	436a      	muls	r2, r5
 80018c8:	040b      	lsls	r3, r1, #16
 80018ca:	0c21      	lsrs	r1, r4, #16
 80018cc:	4680      	mov	r8, r0
 80018ce:	4319      	orrs	r1, r3
 80018d0:	428a      	cmp	r2, r1
 80018d2:	d909      	bls.n	80018e8 <__aeabi_ddiv+0x140>
 80018d4:	9d00      	ldr	r5, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	46ac      	mov	ip, r5
 80018da:	425b      	negs	r3, r3
 80018dc:	4461      	add	r1, ip
 80018de:	469c      	mov	ip, r3
 80018e0:	44e0      	add	r8, ip
 80018e2:	428d      	cmp	r5, r1
 80018e4:	d800      	bhi.n	80018e8 <__aeabi_ddiv+0x140>
 80018e6:	e1fb      	b.n	8001ce0 <__aeabi_ddiv+0x538>
 80018e8:	1a88      	subs	r0, r1, r2
 80018ea:	9902      	ldr	r1, [sp, #8]
 80018ec:	f7fe fc92 	bl	8000214 <__aeabi_uidivmod>
 80018f0:	9a03      	ldr	r2, [sp, #12]
 80018f2:	0424      	lsls	r4, r4, #16
 80018f4:	4342      	muls	r2, r0
 80018f6:	0409      	lsls	r1, r1, #16
 80018f8:	0c24      	lsrs	r4, r4, #16
 80018fa:	0003      	movs	r3, r0
 80018fc:	430c      	orrs	r4, r1
 80018fe:	42a2      	cmp	r2, r4
 8001900:	d906      	bls.n	8001910 <__aeabi_ddiv+0x168>
 8001902:	9900      	ldr	r1, [sp, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	468c      	mov	ip, r1
 8001908:	4464      	add	r4, ip
 800190a:	42a1      	cmp	r1, r4
 800190c:	d800      	bhi.n	8001910 <__aeabi_ddiv+0x168>
 800190e:	e1e1      	b.n	8001cd4 <__aeabi_ddiv+0x52c>
 8001910:	1aa0      	subs	r0, r4, r2
 8001912:	4642      	mov	r2, r8
 8001914:	0412      	lsls	r2, r2, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	4693      	mov	fp, r2
 800191a:	464b      	mov	r3, r9
 800191c:	4659      	mov	r1, fp
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	001d      	movs	r5, r3
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	040b      	lsls	r3, r1, #16
 8001926:	4649      	mov	r1, r9
 8001928:	0409      	lsls	r1, r1, #16
 800192a:	0c09      	lsrs	r1, r1, #16
 800192c:	000c      	movs	r4, r1
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	435c      	muls	r4, r3
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	436b      	muls	r3, r5
 8001936:	4688      	mov	r8, r1
 8001938:	4351      	muls	r1, r2
 800193a:	436a      	muls	r2, r5
 800193c:	0c25      	lsrs	r5, r4, #16
 800193e:	46ac      	mov	ip, r5
 8001940:	185b      	adds	r3, r3, r1
 8001942:	4463      	add	r3, ip
 8001944:	4299      	cmp	r1, r3
 8001946:	d903      	bls.n	8001950 <__aeabi_ddiv+0x1a8>
 8001948:	2180      	movs	r1, #128	@ 0x80
 800194a:	0249      	lsls	r1, r1, #9
 800194c:	468c      	mov	ip, r1
 800194e:	4462      	add	r2, ip
 8001950:	0c19      	lsrs	r1, r3, #16
 8001952:	0424      	lsls	r4, r4, #16
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c24      	lsrs	r4, r4, #16
 8001958:	188a      	adds	r2, r1, r2
 800195a:	191c      	adds	r4, r3, r4
 800195c:	4290      	cmp	r0, r2
 800195e:	d302      	bcc.n	8001966 <__aeabi_ddiv+0x1be>
 8001960:	d116      	bne.n	8001990 <__aeabi_ddiv+0x1e8>
 8001962:	42a7      	cmp	r7, r4
 8001964:	d214      	bcs.n	8001990 <__aeabi_ddiv+0x1e8>
 8001966:	465b      	mov	r3, fp
 8001968:	9d00      	ldr	r5, [sp, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	444f      	add	r7, r9
 800196e:	9305      	str	r3, [sp, #20]
 8001970:	454f      	cmp	r7, r9
 8001972:	419b      	sbcs	r3, r3
 8001974:	46ac      	mov	ip, r5
 8001976:	425b      	negs	r3, r3
 8001978:	4463      	add	r3, ip
 800197a:	18c0      	adds	r0, r0, r3
 800197c:	4285      	cmp	r5, r0
 800197e:	d300      	bcc.n	8001982 <__aeabi_ddiv+0x1da>
 8001980:	e1a1      	b.n	8001cc6 <__aeabi_ddiv+0x51e>
 8001982:	4282      	cmp	r2, r0
 8001984:	d900      	bls.n	8001988 <__aeabi_ddiv+0x1e0>
 8001986:	e1f6      	b.n	8001d76 <__aeabi_ddiv+0x5ce>
 8001988:	d100      	bne.n	800198c <__aeabi_ddiv+0x1e4>
 800198a:	e1f1      	b.n	8001d70 <__aeabi_ddiv+0x5c8>
 800198c:	9b05      	ldr	r3, [sp, #20]
 800198e:	469b      	mov	fp, r3
 8001990:	1b3c      	subs	r4, r7, r4
 8001992:	42a7      	cmp	r7, r4
 8001994:	41bf      	sbcs	r7, r7
 8001996:	9d00      	ldr	r5, [sp, #0]
 8001998:	1a80      	subs	r0, r0, r2
 800199a:	427f      	negs	r7, r7
 800199c:	1bc0      	subs	r0, r0, r7
 800199e:	4285      	cmp	r5, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x1fc>
 80019a2:	e1d0      	b.n	8001d46 <__aeabi_ddiv+0x59e>
 80019a4:	9902      	ldr	r1, [sp, #8]
 80019a6:	f7fe fc35 	bl	8000214 <__aeabi_uidivmod>
 80019aa:	9a03      	ldr	r2, [sp, #12]
 80019ac:	040b      	lsls	r3, r1, #16
 80019ae:	4342      	muls	r2, r0
 80019b0:	0c21      	lsrs	r1, r4, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d900      	bls.n	80019bc <__aeabi_ddiv+0x214>
 80019ba:	e178      	b.n	8001cae <__aeabi_ddiv+0x506>
 80019bc:	1a88      	subs	r0, r1, r2
 80019be:	9902      	ldr	r1, [sp, #8]
 80019c0:	f7fe fc28 	bl	8000214 <__aeabi_uidivmod>
 80019c4:	9a03      	ldr	r2, [sp, #12]
 80019c6:	0424      	lsls	r4, r4, #16
 80019c8:	4342      	muls	r2, r0
 80019ca:	0409      	lsls	r1, r1, #16
 80019cc:	0c24      	lsrs	r4, r4, #16
 80019ce:	0003      	movs	r3, r0
 80019d0:	430c      	orrs	r4, r1
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d900      	bls.n	80019d8 <__aeabi_ddiv+0x230>
 80019d6:	e15d      	b.n	8001c94 <__aeabi_ddiv+0x4ec>
 80019d8:	4641      	mov	r1, r8
 80019da:	1aa4      	subs	r4, r4, r2
 80019dc:	043a      	lsls	r2, r7, #16
 80019de:	431a      	orrs	r2, r3
 80019e0:	9d04      	ldr	r5, [sp, #16]
 80019e2:	0413      	lsls	r3, r2, #16
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	4359      	muls	r1, r3
 80019e8:	4647      	mov	r7, r8
 80019ea:	436b      	muls	r3, r5
 80019ec:	469c      	mov	ip, r3
 80019ee:	0c10      	lsrs	r0, r2, #16
 80019f0:	4347      	muls	r7, r0
 80019f2:	0c0b      	lsrs	r3, r1, #16
 80019f4:	44bc      	add	ip, r7
 80019f6:	4463      	add	r3, ip
 80019f8:	4368      	muls	r0, r5
 80019fa:	429f      	cmp	r7, r3
 80019fc:	d903      	bls.n	8001a06 <__aeabi_ddiv+0x25e>
 80019fe:	2580      	movs	r5, #128	@ 0x80
 8001a00:	026d      	lsls	r5, r5, #9
 8001a02:	46ac      	mov	ip, r5
 8001a04:	4460      	add	r0, ip
 8001a06:	0c1f      	lsrs	r7, r3, #16
 8001a08:	0409      	lsls	r1, r1, #16
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	0c09      	lsrs	r1, r1, #16
 8001a0e:	183f      	adds	r7, r7, r0
 8001a10:	185b      	adds	r3, r3, r1
 8001a12:	42bc      	cmp	r4, r7
 8001a14:	d200      	bcs.n	8001a18 <__aeabi_ddiv+0x270>
 8001a16:	e102      	b.n	8001c1e <__aeabi_ddiv+0x476>
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x274>
 8001a1a:	e0fd      	b.n	8001c18 <__aeabi_ddiv+0x470>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <__aeabi_ddiv+0x388>)
 8001a22:	4453      	add	r3, sl
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_ddiv+0x282>
 8001a28:	e0ae      	b.n	8001b88 <__aeabi_ddiv+0x3e0>
 8001a2a:	0751      	lsls	r1, r2, #29
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_ddiv+0x288>
 8001a2e:	e198      	b.n	8001d62 <__aeabi_ddiv+0x5ba>
 8001a30:	4659      	mov	r1, fp
 8001a32:	01c9      	lsls	r1, r1, #7
 8001a34:	d506      	bpl.n	8001a44 <__aeabi_ddiv+0x29c>
 8001a36:	4659      	mov	r1, fp
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <__aeabi_ddiv+0x38c>)
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	468b      	mov	fp, r1
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4453      	add	r3, sl
 8001a44:	493c      	ldr	r1, [pc, #240]	@ (8001b38 <__aeabi_ddiv+0x390>)
 8001a46:	428b      	cmp	r3, r1
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_ddiv+0x2a4>
 8001a4a:	e71a      	b.n	8001882 <__aeabi_ddiv+0xda>
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	08d2      	lsrs	r2, r2, #3
 8001a50:	0749      	lsls	r1, r1, #29
 8001a52:	4311      	orrs	r1, r2
 8001a54:	465a      	mov	r2, fp
 8001a56:	055b      	lsls	r3, r3, #21
 8001a58:	0254      	lsls	r4, r2, #9
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	0b24      	lsrs	r4, r4, #12
 8001a5e:	0d5b      	lsrs	r3, r3, #21
 8001a60:	e702      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001a62:	465a      	mov	r2, fp
 8001a64:	9b00      	ldr	r3, [sp, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	d100      	bne.n	8001a6c <__aeabi_ddiv+0x2c4>
 8001a6a:	e07e      	b.n	8001b6a <__aeabi_ddiv+0x3c2>
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x2cc>
 8001a72:	e100      	b.n	8001c76 <__aeabi_ddiv+0x4ce>
 8001a74:	4658      	mov	r0, fp
 8001a76:	f001 fa8d 	bl	8002f94 <__clzsi2>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	3a0b      	subs	r2, #11
 8001a80:	271d      	movs	r7, #29
 8001a82:	9e00      	ldr	r6, [sp, #0]
 8001a84:	1aba      	subs	r2, r7, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	4658      	mov	r0, fp
 8001a8a:	40d6      	lsrs	r6, r2
 8001a8c:	3908      	subs	r1, #8
 8001a8e:	4088      	lsls	r0, r1
 8001a90:	0032      	movs	r2, r6
 8001a92:	4302      	orrs	r2, r0
 8001a94:	4693      	mov	fp, r2
 8001a96:	9a00      	ldr	r2, [sp, #0]
 8001a98:	408a      	lsls	r2, r1
 8001a9a:	4928      	ldr	r1, [pc, #160]	@ (8001b3c <__aeabi_ddiv+0x394>)
 8001a9c:	4453      	add	r3, sl
 8001a9e:	468a      	mov	sl, r1
 8001aa0:	449a      	add	sl, r3
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e6c8      	b.n	8001838 <__aeabi_ddiv+0x90>
 8001aa6:	465b      	mov	r3, fp
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	d056      	beq.n	8001b5c <__aeabi_ddiv+0x3b4>
 8001aae:	465b      	mov	r3, fp
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x30e>
 8001ab4:	e0cd      	b.n	8001c52 <__aeabi_ddiv+0x4aa>
 8001ab6:	4658      	mov	r0, fp
 8001ab8:	f001 fa6c 	bl	8002f94 <__clzsi2>
 8001abc:	230b      	movs	r3, #11
 8001abe:	425b      	negs	r3, r3
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	4484      	add	ip, r0
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	231d      	movs	r3, #29
 8001aca:	1b9b      	subs	r3, r3, r6
 8001acc:	0026      	movs	r6, r4
 8001ace:	0011      	movs	r1, r2
 8001ad0:	4658      	mov	r0, fp
 8001ad2:	40de      	lsrs	r6, r3
 8001ad4:	3908      	subs	r1, #8
 8001ad6:	4088      	lsls	r0, r1
 8001ad8:	0033      	movs	r3, r6
 8001ada:	4303      	orrs	r3, r0
 8001adc:	4699      	mov	r9, r3
 8001ade:	0023      	movs	r3, r4
 8001ae0:	408b      	lsls	r3, r1
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <__aeabi_ddiv+0x398>)
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	469a      	mov	sl, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9303      	str	r3, [sp, #12]
 8001af0:	e682      	b.n	80017f8 <__aeabi_ddiv+0x50>
 8001af2:	465a      	mov	r2, fp
 8001af4:	4302      	orrs	r2, r0
 8001af6:	4691      	mov	r9, r2
 8001af8:	d12a      	bne.n	8001b50 <__aeabi_ddiv+0x3a8>
 8001afa:	2200      	movs	r2, #0
 8001afc:	469a      	mov	sl, r3
 8001afe:	2302      	movs	r3, #2
 8001b00:	4690      	mov	r8, r2
 8001b02:	2408      	movs	r4, #8
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	e677      	b.n	80017f8 <__aeabi_ddiv+0x50>
 8001b08:	465a      	mov	r2, fp
 8001b0a:	9b00      	ldr	r3, [sp, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <__aeabi_ddiv+0x39c>)
 8001b10:	469c      	mov	ip, r3
 8001b12:	44e2      	add	sl, ip
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d117      	bne.n	8001b48 <__aeabi_ddiv+0x3a0>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	431c      	orrs	r4, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	469b      	mov	fp, r3
 8001b20:	3302      	adds	r3, #2
 8001b22:	e689      	b.n	8001838 <__aeabi_ddiv+0x90>
 8001b24:	000007ff 	.word	0x000007ff
 8001b28:	fffffc01 	.word	0xfffffc01
 8001b2c:	0800713c 	.word	0x0800713c
 8001b30:	000003ff 	.word	0x000003ff
 8001b34:	feffffff 	.word	0xfeffffff
 8001b38:	000007fe 	.word	0x000007fe
 8001b3c:	000003f3 	.word	0x000003f3
 8001b40:	fffffc0d 	.word	0xfffffc0d
 8001b44:	fffff801 	.word	0xfffff801
 8001b48:	2303      	movs	r3, #3
 8001b4a:	0032      	movs	r2, r6
 8001b4c:	431c      	orrs	r4, r3
 8001b4e:	e673      	b.n	8001838 <__aeabi_ddiv+0x90>
 8001b50:	469a      	mov	sl, r3
 8001b52:	2303      	movs	r3, #3
 8001b54:	46d9      	mov	r9, fp
 8001b56:	240c      	movs	r4, #12
 8001b58:	9303      	str	r3, [sp, #12]
 8001b5a:	e64d      	b.n	80017f8 <__aeabi_ddiv+0x50>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4698      	mov	r8, r3
 8001b60:	469a      	mov	sl, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	2404      	movs	r4, #4
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	e646      	b.n	80017f8 <__aeabi_ddiv+0x50>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	431c      	orrs	r4, r3
 8001b6e:	2300      	movs	r3, #0
 8001b70:	469b      	mov	fp, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	e660      	b.n	8001838 <__aeabi_ddiv+0x90>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2480      	movs	r4, #128	@ 0x80
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	2600      	movs	r6, #0
 8001b7e:	4b92      	ldr	r3, [pc, #584]	@ (8001dc8 <__aeabi_ddiv+0x620>)
 8001b80:	0324      	lsls	r4, r4, #12
 8001b82:	e671      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001b84:	2201      	movs	r2, #1
 8001b86:	4252      	negs	r2, r2
 8001b88:	2101      	movs	r1, #1
 8001b8a:	1ac9      	subs	r1, r1, r3
 8001b8c:	2938      	cmp	r1, #56	@ 0x38
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_ddiv+0x3ea>
 8001b90:	e666      	b.n	8001860 <__aeabi_ddiv+0xb8>
 8001b92:	291f      	cmp	r1, #31
 8001b94:	dc00      	bgt.n	8001b98 <__aeabi_ddiv+0x3f0>
 8001b96:	e0ab      	b.n	8001cf0 <__aeabi_ddiv+0x548>
 8001b98:	201f      	movs	r0, #31
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	1ac3      	subs	r3, r0, r3
 8001b9e:	4658      	mov	r0, fp
 8001ba0:	40d8      	lsrs	r0, r3
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	2920      	cmp	r1, #32
 8001ba6:	d004      	beq.n	8001bb2 <__aeabi_ddiv+0x40a>
 8001ba8:	4658      	mov	r0, fp
 8001baa:	4988      	ldr	r1, [pc, #544]	@ (8001dcc <__aeabi_ddiv+0x624>)
 8001bac:	4451      	add	r1, sl
 8001bae:	4088      	lsls	r0, r1
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	1e51      	subs	r1, r2, #1
 8001bb4:	418a      	sbcs	r2, r1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	2307      	movs	r3, #7
 8001bba:	0019      	movs	r1, r3
 8001bbc:	2400      	movs	r4, #0
 8001bbe:	4011      	ands	r1, r2
 8001bc0:	4213      	tst	r3, r2
 8001bc2:	d00c      	beq.n	8001bde <__aeabi_ddiv+0x436>
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d100      	bne.n	8001bce <__aeabi_ddiv+0x426>
 8001bcc:	e0f9      	b.n	8001dc2 <__aeabi_ddiv+0x61a>
 8001bce:	1d11      	adds	r1, r2, #4
 8001bd0:	4291      	cmp	r1, r2
 8001bd2:	419b      	sbcs	r3, r3
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	0759      	lsls	r1, r3, #29
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	0b1c      	lsrs	r4, r3, #12
 8001bde:	08d2      	lsrs	r2, r2, #3
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4690      	mov	r8, r2
 8001be4:	2300      	movs	r3, #0
 8001be6:	e63f      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001be8:	2480      	movs	r4, #128	@ 0x80
 8001bea:	464b      	mov	r3, r9
 8001bec:	0324      	lsls	r4, r4, #12
 8001bee:	4223      	tst	r3, r4
 8001bf0:	d009      	beq.n	8001c06 <__aeabi_ddiv+0x45e>
 8001bf2:	465b      	mov	r3, fp
 8001bf4:	4223      	tst	r3, r4
 8001bf6:	d106      	bne.n	8001c06 <__aeabi_ddiv+0x45e>
 8001bf8:	431c      	orrs	r4, r3
 8001bfa:	0324      	lsls	r4, r4, #12
 8001bfc:	002e      	movs	r6, r5
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4b71      	ldr	r3, [pc, #452]	@ (8001dc8 <__aeabi_ddiv+0x620>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e630      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001c06:	2480      	movs	r4, #128	@ 0x80
 8001c08:	464b      	mov	r3, r9
 8001c0a:	0324      	lsls	r4, r4, #12
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	0324      	lsls	r4, r4, #12
 8001c10:	9e02      	ldr	r6, [sp, #8]
 8001c12:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc8 <__aeabi_ddiv+0x620>)
 8001c14:	0b24      	lsrs	r4, r4, #12
 8001c16:	e627      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_ddiv+0x476>
 8001c1c:	e700      	b.n	8001a20 <__aeabi_ddiv+0x278>
 8001c1e:	9800      	ldr	r0, [sp, #0]
 8001c20:	1e51      	subs	r1, r2, #1
 8001c22:	4684      	mov	ip, r0
 8001c24:	4464      	add	r4, ip
 8001c26:	4284      	cmp	r4, r0
 8001c28:	d200      	bcs.n	8001c2c <__aeabi_ddiv+0x484>
 8001c2a:	e084      	b.n	8001d36 <__aeabi_ddiv+0x58e>
 8001c2c:	42bc      	cmp	r4, r7
 8001c2e:	d200      	bcs.n	8001c32 <__aeabi_ddiv+0x48a>
 8001c30:	e0ae      	b.n	8001d90 <__aeabi_ddiv+0x5e8>
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x48e>
 8001c34:	e0c1      	b.n	8001dba <__aeabi_ddiv+0x612>
 8001c36:	000a      	movs	r2, r1
 8001c38:	e6f0      	b.n	8001a1c <__aeabi_ddiv+0x274>
 8001c3a:	4542      	cmp	r2, r8
 8001c3c:	d900      	bls.n	8001c40 <__aeabi_ddiv+0x498>
 8001c3e:	e62c      	b.n	800189a <__aeabi_ddiv+0xf2>
 8001c40:	464b      	mov	r3, r9
 8001c42:	07dc      	lsls	r4, r3, #31
 8001c44:	0858      	lsrs	r0, r3, #1
 8001c46:	4643      	mov	r3, r8
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	431c      	orrs	r4, r3
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	07df      	lsls	r7, r3, #31
 8001c50:	e62a      	b.n	80018a8 <__aeabi_ddiv+0x100>
 8001c52:	f001 f99f 	bl	8002f94 <__clzsi2>
 8001c56:	2315      	movs	r3, #21
 8001c58:	469c      	mov	ip, r3
 8001c5a:	4484      	add	ip, r0
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	4663      	mov	r3, ip
 8001c60:	3220      	adds	r2, #32
 8001c62:	2b1c      	cmp	r3, #28
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_ddiv+0x4c0>
 8001c66:	e72e      	b.n	8001ac6 <__aeabi_ddiv+0x31e>
 8001c68:	0023      	movs	r3, r4
 8001c6a:	3808      	subs	r0, #8
 8001c6c:	4083      	lsls	r3, r0
 8001c6e:	4699      	mov	r9, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	4698      	mov	r8, r3
 8001c74:	e736      	b.n	8001ae4 <__aeabi_ddiv+0x33c>
 8001c76:	f001 f98d 	bl	8002f94 <__clzsi2>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	3215      	adds	r2, #21
 8001c80:	3320      	adds	r3, #32
 8001c82:	2a1c      	cmp	r2, #28
 8001c84:	dc00      	bgt.n	8001c88 <__aeabi_ddiv+0x4e0>
 8001c86:	e6fb      	b.n	8001a80 <__aeabi_ddiv+0x2d8>
 8001c88:	9900      	ldr	r1, [sp, #0]
 8001c8a:	3808      	subs	r0, #8
 8001c8c:	4081      	lsls	r1, r0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	468b      	mov	fp, r1
 8001c92:	e702      	b.n	8001a9a <__aeabi_ddiv+0x2f2>
 8001c94:	9900      	ldr	r1, [sp, #0]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	468c      	mov	ip, r1
 8001c9a:	4464      	add	r4, ip
 8001c9c:	42a1      	cmp	r1, r4
 8001c9e:	d900      	bls.n	8001ca2 <__aeabi_ddiv+0x4fa>
 8001ca0:	e69a      	b.n	80019d8 <__aeabi_ddiv+0x230>
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d800      	bhi.n	8001ca8 <__aeabi_ddiv+0x500>
 8001ca6:	e697      	b.n	80019d8 <__aeabi_ddiv+0x230>
 8001ca8:	1e83      	subs	r3, r0, #2
 8001caa:	4464      	add	r4, ip
 8001cac:	e694      	b.n	80019d8 <__aeabi_ddiv+0x230>
 8001cae:	46ac      	mov	ip, r5
 8001cb0:	4461      	add	r1, ip
 8001cb2:	3f01      	subs	r7, #1
 8001cb4:	428d      	cmp	r5, r1
 8001cb6:	d900      	bls.n	8001cba <__aeabi_ddiv+0x512>
 8001cb8:	e680      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d800      	bhi.n	8001cc0 <__aeabi_ddiv+0x518>
 8001cbe:	e67d      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001cc0:	1e87      	subs	r7, r0, #2
 8001cc2:	4461      	add	r1, ip
 8001cc4:	e67a      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001cc6:	4285      	cmp	r5, r0
 8001cc8:	d000      	beq.n	8001ccc <__aeabi_ddiv+0x524>
 8001cca:	e65f      	b.n	800198c <__aeabi_ddiv+0x1e4>
 8001ccc:	45b9      	cmp	r9, r7
 8001cce:	d900      	bls.n	8001cd2 <__aeabi_ddiv+0x52a>
 8001cd0:	e65c      	b.n	800198c <__aeabi_ddiv+0x1e4>
 8001cd2:	e656      	b.n	8001982 <__aeabi_ddiv+0x1da>
 8001cd4:	42a2      	cmp	r2, r4
 8001cd6:	d800      	bhi.n	8001cda <__aeabi_ddiv+0x532>
 8001cd8:	e61a      	b.n	8001910 <__aeabi_ddiv+0x168>
 8001cda:	1e83      	subs	r3, r0, #2
 8001cdc:	4464      	add	r4, ip
 8001cde:	e617      	b.n	8001910 <__aeabi_ddiv+0x168>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d800      	bhi.n	8001ce6 <__aeabi_ddiv+0x53e>
 8001ce4:	e600      	b.n	80018e8 <__aeabi_ddiv+0x140>
 8001ce6:	46ac      	mov	ip, r5
 8001ce8:	1e83      	subs	r3, r0, #2
 8001cea:	4698      	mov	r8, r3
 8001cec:	4461      	add	r1, ip
 8001cee:	e5fb      	b.n	80018e8 <__aeabi_ddiv+0x140>
 8001cf0:	4837      	ldr	r0, [pc, #220]	@ (8001dd0 <__aeabi_ddiv+0x628>)
 8001cf2:	0014      	movs	r4, r2
 8001cf4:	4450      	add	r0, sl
 8001cf6:	4082      	lsls	r2, r0
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	0017      	movs	r7, r2
 8001cfc:	4083      	lsls	r3, r0
 8001cfe:	40cc      	lsrs	r4, r1
 8001d00:	1e7a      	subs	r2, r7, #1
 8001d02:	4197      	sbcs	r7, r2
 8001d04:	4323      	orrs	r3, r4
 8001d06:	433b      	orrs	r3, r7
 8001d08:	001a      	movs	r2, r3
 8001d0a:	465b      	mov	r3, fp
 8001d0c:	40cb      	lsrs	r3, r1
 8001d0e:	0751      	lsls	r1, r2, #29
 8001d10:	d009      	beq.n	8001d26 <__aeabi_ddiv+0x57e>
 8001d12:	210f      	movs	r1, #15
 8001d14:	4011      	ands	r1, r2
 8001d16:	2904      	cmp	r1, #4
 8001d18:	d005      	beq.n	8001d26 <__aeabi_ddiv+0x57e>
 8001d1a:	1d11      	adds	r1, r2, #4
 8001d1c:	4291      	cmp	r1, r2
 8001d1e:	4192      	sbcs	r2, r2
 8001d20:	4252      	negs	r2, r2
 8001d22:	189b      	adds	r3, r3, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	0219      	lsls	r1, r3, #8
 8001d28:	d400      	bmi.n	8001d2c <__aeabi_ddiv+0x584>
 8001d2a:	e755      	b.n	8001bd8 <__aeabi_ddiv+0x430>
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2400      	movs	r4, #0
 8001d32:	4690      	mov	r8, r2
 8001d34:	e598      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001d36:	000a      	movs	r2, r1
 8001d38:	42bc      	cmp	r4, r7
 8001d3a:	d000      	beq.n	8001d3e <__aeabi_ddiv+0x596>
 8001d3c:	e66e      	b.n	8001a1c <__aeabi_ddiv+0x274>
 8001d3e:	454b      	cmp	r3, r9
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x59c>
 8001d42:	e66b      	b.n	8001a1c <__aeabi_ddiv+0x274>
 8001d44:	e66c      	b.n	8001a20 <__aeabi_ddiv+0x278>
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <__aeabi_ddiv+0x62c>)
 8001d48:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <__aeabi_ddiv+0x630>)
 8001d4a:	4453      	add	r3, sl
 8001d4c:	4592      	cmp	sl, r2
 8001d4e:	da00      	bge.n	8001d52 <__aeabi_ddiv+0x5aa>
 8001d50:	e718      	b.n	8001b84 <__aeabi_ddiv+0x3dc>
 8001d52:	2101      	movs	r1, #1
 8001d54:	4249      	negs	r1, r1
 8001d56:	1d0a      	adds	r2, r1, #4
 8001d58:	428a      	cmp	r2, r1
 8001d5a:	4189      	sbcs	r1, r1
 8001d5c:	4249      	negs	r1, r1
 8001d5e:	448b      	add	fp, r1
 8001d60:	e666      	b.n	8001a30 <__aeabi_ddiv+0x288>
 8001d62:	210f      	movs	r1, #15
 8001d64:	4011      	ands	r1, r2
 8001d66:	2904      	cmp	r1, #4
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x5c4>
 8001d6a:	e661      	b.n	8001a30 <__aeabi_ddiv+0x288>
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	e7f2      	b.n	8001d56 <__aeabi_ddiv+0x5ae>
 8001d70:	42bc      	cmp	r4, r7
 8001d72:	d800      	bhi.n	8001d76 <__aeabi_ddiv+0x5ce>
 8001d74:	e60a      	b.n	800198c <__aeabi_ddiv+0x1e4>
 8001d76:	2302      	movs	r3, #2
 8001d78:	425b      	negs	r3, r3
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	9900      	ldr	r1, [sp, #0]
 8001d7e:	444f      	add	r7, r9
 8001d80:	454f      	cmp	r7, r9
 8001d82:	419b      	sbcs	r3, r3
 8001d84:	44e3      	add	fp, ip
 8001d86:	468c      	mov	ip, r1
 8001d88:	425b      	negs	r3, r3
 8001d8a:	4463      	add	r3, ip
 8001d8c:	18c0      	adds	r0, r0, r3
 8001d8e:	e5ff      	b.n	8001990 <__aeabi_ddiv+0x1e8>
 8001d90:	4649      	mov	r1, r9
 8001d92:	9d00      	ldr	r5, [sp, #0]
 8001d94:	0048      	lsls	r0, r1, #1
 8001d96:	4548      	cmp	r0, r9
 8001d98:	4189      	sbcs	r1, r1
 8001d9a:	46ac      	mov	ip, r5
 8001d9c:	4249      	negs	r1, r1
 8001d9e:	4461      	add	r1, ip
 8001da0:	4681      	mov	r9, r0
 8001da2:	3a02      	subs	r2, #2
 8001da4:	1864      	adds	r4, r4, r1
 8001da6:	e7c7      	b.n	8001d38 <__aeabi_ddiv+0x590>
 8001da8:	2480      	movs	r4, #128	@ 0x80
 8001daa:	465b      	mov	r3, fp
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	431c      	orrs	r4, r3
 8001db0:	0324      	lsls	r4, r4, #12
 8001db2:	4690      	mov	r8, r2
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <__aeabi_ddiv+0x620>)
 8001db6:	0b24      	lsrs	r4, r4, #12
 8001db8:	e556      	b.n	8001868 <__aeabi_ddiv+0xc0>
 8001dba:	4599      	cmp	r9, r3
 8001dbc:	d3e8      	bcc.n	8001d90 <__aeabi_ddiv+0x5e8>
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	e7bd      	b.n	8001d3e <__aeabi_ddiv+0x596>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e708      	b.n	8001bd8 <__aeabi_ddiv+0x430>
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	000007ff 	.word	0x000007ff
 8001dcc:	0000043e 	.word	0x0000043e
 8001dd0:	0000041e 	.word	0x0000041e
 8001dd4:	000003ff 	.word	0x000003ff
 8001dd8:	fffffc02 	.word	0xfffffc02

08001ddc <__eqdf2>:
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	4657      	mov	r7, sl
 8001de0:	46de      	mov	lr, fp
 8001de2:	464e      	mov	r6, r9
 8001de4:	4645      	mov	r5, r8
 8001de6:	b5e0      	push	{r5, r6, r7, lr}
 8001de8:	000d      	movs	r5, r1
 8001dea:	0004      	movs	r4, r0
 8001dec:	0fe8      	lsrs	r0, r5, #31
 8001dee:	4683      	mov	fp, r0
 8001df0:	0309      	lsls	r1, r1, #12
 8001df2:	0fd8      	lsrs	r0, r3, #31
 8001df4:	0b09      	lsrs	r1, r1, #12
 8001df6:	4682      	mov	sl, r0
 8001df8:	4819      	ldr	r0, [pc, #100]	@ (8001e60 <__eqdf2+0x84>)
 8001dfa:	468c      	mov	ip, r1
 8001dfc:	031f      	lsls	r7, r3, #12
 8001dfe:	0069      	lsls	r1, r5, #1
 8001e00:	005e      	lsls	r6, r3, #1
 8001e02:	0d49      	lsrs	r1, r1, #21
 8001e04:	0b3f      	lsrs	r7, r7, #12
 8001e06:	0d76      	lsrs	r6, r6, #21
 8001e08:	4281      	cmp	r1, r0
 8001e0a:	d018      	beq.n	8001e3e <__eqdf2+0x62>
 8001e0c:	4286      	cmp	r6, r0
 8001e0e:	d00f      	beq.n	8001e30 <__eqdf2+0x54>
 8001e10:	2001      	movs	r0, #1
 8001e12:	42b1      	cmp	r1, r6
 8001e14:	d10d      	bne.n	8001e32 <__eqdf2+0x56>
 8001e16:	45bc      	cmp	ip, r7
 8001e18:	d10b      	bne.n	8001e32 <__eqdf2+0x56>
 8001e1a:	4294      	cmp	r4, r2
 8001e1c:	d109      	bne.n	8001e32 <__eqdf2+0x56>
 8001e1e:	45d3      	cmp	fp, sl
 8001e20:	d01c      	beq.n	8001e5c <__eqdf2+0x80>
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d105      	bne.n	8001e32 <__eqdf2+0x56>
 8001e26:	4660      	mov	r0, ip
 8001e28:	4320      	orrs	r0, r4
 8001e2a:	1e43      	subs	r3, r0, #1
 8001e2c:	4198      	sbcs	r0, r3
 8001e2e:	e000      	b.n	8001e32 <__eqdf2+0x56>
 8001e30:	2001      	movs	r0, #1
 8001e32:	bcf0      	pop	{r4, r5, r6, r7}
 8001e34:	46bb      	mov	fp, r7
 8001e36:	46b2      	mov	sl, r6
 8001e38:	46a9      	mov	r9, r5
 8001e3a:	46a0      	mov	r8, r4
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	2001      	movs	r0, #1
 8001e40:	428e      	cmp	r6, r1
 8001e42:	d1f6      	bne.n	8001e32 <__eqdf2+0x56>
 8001e44:	4661      	mov	r1, ip
 8001e46:	4339      	orrs	r1, r7
 8001e48:	000f      	movs	r7, r1
 8001e4a:	4317      	orrs	r7, r2
 8001e4c:	4327      	orrs	r7, r4
 8001e4e:	d1f0      	bne.n	8001e32 <__eqdf2+0x56>
 8001e50:	465b      	mov	r3, fp
 8001e52:	4652      	mov	r2, sl
 8001e54:	1a98      	subs	r0, r3, r2
 8001e56:	1e43      	subs	r3, r0, #1
 8001e58:	4198      	sbcs	r0, r3
 8001e5a:	e7ea      	b.n	8001e32 <__eqdf2+0x56>
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	e7e8      	b.n	8001e32 <__eqdf2+0x56>
 8001e60:	000007ff 	.word	0x000007ff

08001e64 <__gedf2>:
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	4657      	mov	r7, sl
 8001e68:	464e      	mov	r6, r9
 8001e6a:	4645      	mov	r5, r8
 8001e6c:	46de      	mov	lr, fp
 8001e6e:	b5e0      	push	{r5, r6, r7, lr}
 8001e70:	000d      	movs	r5, r1
 8001e72:	030f      	lsls	r7, r1, #12
 8001e74:	0b39      	lsrs	r1, r7, #12
 8001e76:	b083      	sub	sp, #12
 8001e78:	0004      	movs	r4, r0
 8001e7a:	4680      	mov	r8, r0
 8001e7c:	9101      	str	r1, [sp, #4]
 8001e7e:	0058      	lsls	r0, r3, #1
 8001e80:	0fe9      	lsrs	r1, r5, #31
 8001e82:	4f31      	ldr	r7, [pc, #196]	@ (8001f48 <__gedf2+0xe4>)
 8001e84:	0d40      	lsrs	r0, r0, #21
 8001e86:	468c      	mov	ip, r1
 8001e88:	006e      	lsls	r6, r5, #1
 8001e8a:	0319      	lsls	r1, r3, #12
 8001e8c:	4682      	mov	sl, r0
 8001e8e:	4691      	mov	r9, r2
 8001e90:	0d76      	lsrs	r6, r6, #21
 8001e92:	0b09      	lsrs	r1, r1, #12
 8001e94:	0fd8      	lsrs	r0, r3, #31
 8001e96:	42be      	cmp	r6, r7
 8001e98:	d01f      	beq.n	8001eda <__gedf2+0x76>
 8001e9a:	45ba      	cmp	sl, r7
 8001e9c:	d00f      	beq.n	8001ebe <__gedf2+0x5a>
 8001e9e:	2e00      	cmp	r6, #0
 8001ea0:	d12f      	bne.n	8001f02 <__gedf2+0x9e>
 8001ea2:	4655      	mov	r5, sl
 8001ea4:	9e01      	ldr	r6, [sp, #4]
 8001ea6:	4334      	orrs	r4, r6
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	d127      	bne.n	8001efc <__gedf2+0x98>
 8001eac:	430a      	orrs	r2, r1
 8001eae:	d03a      	beq.n	8001f26 <__gedf2+0xc2>
 8001eb0:	2c00      	cmp	r4, #0
 8001eb2:	d145      	bne.n	8001f40 <__gedf2+0xdc>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d11a      	bne.n	8001eee <__gedf2+0x8a>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	4240      	negs	r0, r0
 8001ebc:	e017      	b.n	8001eee <__gedf2+0x8a>
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	d13b      	bne.n	8001f3a <__gedf2+0xd6>
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d102      	bne.n	8001ecc <__gedf2+0x68>
 8001ec6:	9f01      	ldr	r7, [sp, #4]
 8001ec8:	4327      	orrs	r7, r4
 8001eca:	d0f3      	beq.n	8001eb4 <__gedf2+0x50>
 8001ecc:	4584      	cmp	ip, r0
 8001ece:	d109      	bne.n	8001ee4 <__gedf2+0x80>
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <__gedf2+0x54>
 8001ed6:	4660      	mov	r0, ip
 8001ed8:	e009      	b.n	8001eee <__gedf2+0x8a>
 8001eda:	9f01      	ldr	r7, [sp, #4]
 8001edc:	4327      	orrs	r7, r4
 8001ede:	d12c      	bne.n	8001f3a <__gedf2+0xd6>
 8001ee0:	45b2      	cmp	sl, r6
 8001ee2:	d024      	beq.n	8001f2e <__gedf2+0xca>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	4018      	ands	r0, r3
 8001eec:	3801      	subs	r0, #1
 8001eee:	b003      	add	sp, #12
 8001ef0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef2:	46bb      	mov	fp, r7
 8001ef4:	46b2      	mov	sl, r6
 8001ef6:	46a9      	mov	r9, r5
 8001ef8:	46a0      	mov	r8, r4
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efc:	2c00      	cmp	r4, #0
 8001efe:	d0d9      	beq.n	8001eb4 <__gedf2+0x50>
 8001f00:	e7e4      	b.n	8001ecc <__gedf2+0x68>
 8001f02:	4654      	mov	r4, sl
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d0ed      	beq.n	8001ee4 <__gedf2+0x80>
 8001f08:	4584      	cmp	ip, r0
 8001f0a:	d1eb      	bne.n	8001ee4 <__gedf2+0x80>
 8001f0c:	4556      	cmp	r6, sl
 8001f0e:	dce9      	bgt.n	8001ee4 <__gedf2+0x80>
 8001f10:	dbde      	blt.n	8001ed0 <__gedf2+0x6c>
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	428b      	cmp	r3, r1
 8001f16:	d8e5      	bhi.n	8001ee4 <__gedf2+0x80>
 8001f18:	d1da      	bne.n	8001ed0 <__gedf2+0x6c>
 8001f1a:	45c8      	cmp	r8, r9
 8001f1c:	d8e2      	bhi.n	8001ee4 <__gedf2+0x80>
 8001f1e:	2000      	movs	r0, #0
 8001f20:	45c8      	cmp	r8, r9
 8001f22:	d2e4      	bcs.n	8001eee <__gedf2+0x8a>
 8001f24:	e7d4      	b.n	8001ed0 <__gedf2+0x6c>
 8001f26:	2000      	movs	r0, #0
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d0e0      	beq.n	8001eee <__gedf2+0x8a>
 8001f2c:	e7da      	b.n	8001ee4 <__gedf2+0x80>
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	d103      	bne.n	8001f3a <__gedf2+0xd6>
 8001f32:	4584      	cmp	ip, r0
 8001f34:	d1d6      	bne.n	8001ee4 <__gedf2+0x80>
 8001f36:	2000      	movs	r0, #0
 8001f38:	e7d9      	b.n	8001eee <__gedf2+0x8a>
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	e7d6      	b.n	8001eee <__gedf2+0x8a>
 8001f40:	4584      	cmp	ip, r0
 8001f42:	d0e6      	beq.n	8001f12 <__gedf2+0xae>
 8001f44:	e7ce      	b.n	8001ee4 <__gedf2+0x80>
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	000007ff 	.word	0x000007ff

08001f4c <__ledf2>:
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	4657      	mov	r7, sl
 8001f50:	464e      	mov	r6, r9
 8001f52:	4645      	mov	r5, r8
 8001f54:	46de      	mov	lr, fp
 8001f56:	b5e0      	push	{r5, r6, r7, lr}
 8001f58:	000d      	movs	r5, r1
 8001f5a:	030f      	lsls	r7, r1, #12
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	4680      	mov	r8, r0
 8001f60:	0fe8      	lsrs	r0, r5, #31
 8001f62:	0b39      	lsrs	r1, r7, #12
 8001f64:	4684      	mov	ip, r0
 8001f66:	b083      	sub	sp, #12
 8001f68:	0058      	lsls	r0, r3, #1
 8001f6a:	4f30      	ldr	r7, [pc, #192]	@ (800202c <__ledf2+0xe0>)
 8001f6c:	0d40      	lsrs	r0, r0, #21
 8001f6e:	9101      	str	r1, [sp, #4]
 8001f70:	031e      	lsls	r6, r3, #12
 8001f72:	0069      	lsls	r1, r5, #1
 8001f74:	4682      	mov	sl, r0
 8001f76:	4691      	mov	r9, r2
 8001f78:	0d49      	lsrs	r1, r1, #21
 8001f7a:	0b36      	lsrs	r6, r6, #12
 8001f7c:	0fd8      	lsrs	r0, r3, #31
 8001f7e:	42b9      	cmp	r1, r7
 8001f80:	d020      	beq.n	8001fc4 <__ledf2+0x78>
 8001f82:	45ba      	cmp	sl, r7
 8001f84:	d00f      	beq.n	8001fa6 <__ledf2+0x5a>
 8001f86:	2900      	cmp	r1, #0
 8001f88:	d12b      	bne.n	8001fe2 <__ledf2+0x96>
 8001f8a:	9901      	ldr	r1, [sp, #4]
 8001f8c:	430c      	orrs	r4, r1
 8001f8e:	4651      	mov	r1, sl
 8001f90:	2900      	cmp	r1, #0
 8001f92:	d137      	bne.n	8002004 <__ledf2+0xb8>
 8001f94:	4332      	orrs	r2, r6
 8001f96:	d038      	beq.n	800200a <__ledf2+0xbe>
 8001f98:	2c00      	cmp	r4, #0
 8001f9a:	d144      	bne.n	8002026 <__ledf2+0xda>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d119      	bne.n	8001fd4 <__ledf2+0x88>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	4240      	negs	r0, r0
 8001fa4:	e016      	b.n	8001fd4 <__ledf2+0x88>
 8001fa6:	4316      	orrs	r6, r2
 8001fa8:	d113      	bne.n	8001fd2 <__ledf2+0x86>
 8001faa:	2900      	cmp	r1, #0
 8001fac:	d102      	bne.n	8001fb4 <__ledf2+0x68>
 8001fae:	9f01      	ldr	r7, [sp, #4]
 8001fb0:	4327      	orrs	r7, r4
 8001fb2:	d0f3      	beq.n	8001f9c <__ledf2+0x50>
 8001fb4:	4584      	cmp	ip, r0
 8001fb6:	d020      	beq.n	8001ffa <__ledf2+0xae>
 8001fb8:	4663      	mov	r3, ip
 8001fba:	2002      	movs	r0, #2
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	4018      	ands	r0, r3
 8001fc0:	3801      	subs	r0, #1
 8001fc2:	e007      	b.n	8001fd4 <__ledf2+0x88>
 8001fc4:	9f01      	ldr	r7, [sp, #4]
 8001fc6:	4327      	orrs	r7, r4
 8001fc8:	d103      	bne.n	8001fd2 <__ledf2+0x86>
 8001fca:	458a      	cmp	sl, r1
 8001fcc:	d1f4      	bne.n	8001fb8 <__ledf2+0x6c>
 8001fce:	4316      	orrs	r6, r2
 8001fd0:	d01f      	beq.n	8002012 <__ledf2+0xc6>
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	b003      	add	sp, #12
 8001fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd8:	46bb      	mov	fp, r7
 8001fda:	46b2      	mov	sl, r6
 8001fdc:	46a9      	mov	r9, r5
 8001fde:	46a0      	mov	r8, r4
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	2c00      	cmp	r4, #0
 8001fe6:	d0e7      	beq.n	8001fb8 <__ledf2+0x6c>
 8001fe8:	4584      	cmp	ip, r0
 8001fea:	d1e5      	bne.n	8001fb8 <__ledf2+0x6c>
 8001fec:	4551      	cmp	r1, sl
 8001fee:	dce3      	bgt.n	8001fb8 <__ledf2+0x6c>
 8001ff0:	db03      	blt.n	8001ffa <__ledf2+0xae>
 8001ff2:	9b01      	ldr	r3, [sp, #4]
 8001ff4:	42b3      	cmp	r3, r6
 8001ff6:	d8df      	bhi.n	8001fb8 <__ledf2+0x6c>
 8001ff8:	d00f      	beq.n	800201a <__ledf2+0xce>
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0cf      	beq.n	8001fa0 <__ledf2+0x54>
 8002000:	4660      	mov	r0, ip
 8002002:	e7e7      	b.n	8001fd4 <__ledf2+0x88>
 8002004:	2c00      	cmp	r4, #0
 8002006:	d0c9      	beq.n	8001f9c <__ledf2+0x50>
 8002008:	e7d4      	b.n	8001fb4 <__ledf2+0x68>
 800200a:	2000      	movs	r0, #0
 800200c:	2c00      	cmp	r4, #0
 800200e:	d0e1      	beq.n	8001fd4 <__ledf2+0x88>
 8002010:	e7d2      	b.n	8001fb8 <__ledf2+0x6c>
 8002012:	4584      	cmp	ip, r0
 8002014:	d1d0      	bne.n	8001fb8 <__ledf2+0x6c>
 8002016:	2000      	movs	r0, #0
 8002018:	e7dc      	b.n	8001fd4 <__ledf2+0x88>
 800201a:	45c8      	cmp	r8, r9
 800201c:	d8cc      	bhi.n	8001fb8 <__ledf2+0x6c>
 800201e:	2000      	movs	r0, #0
 8002020:	45c8      	cmp	r8, r9
 8002022:	d2d7      	bcs.n	8001fd4 <__ledf2+0x88>
 8002024:	e7e9      	b.n	8001ffa <__ledf2+0xae>
 8002026:	4584      	cmp	ip, r0
 8002028:	d0e3      	beq.n	8001ff2 <__ledf2+0xa6>
 800202a:	e7c5      	b.n	8001fb8 <__ledf2+0x6c>
 800202c:	000007ff 	.word	0x000007ff

08002030 <__aeabi_dmul>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	4657      	mov	r7, sl
 8002034:	46de      	mov	lr, fp
 8002036:	464e      	mov	r6, r9
 8002038:	4645      	mov	r5, r8
 800203a:	b5e0      	push	{r5, r6, r7, lr}
 800203c:	001f      	movs	r7, r3
 800203e:	030b      	lsls	r3, r1, #12
 8002040:	0b1b      	lsrs	r3, r3, #12
 8002042:	0016      	movs	r6, r2
 8002044:	469a      	mov	sl, r3
 8002046:	0fca      	lsrs	r2, r1, #31
 8002048:	004b      	lsls	r3, r1, #1
 800204a:	0004      	movs	r4, r0
 800204c:	4693      	mov	fp, r2
 800204e:	b087      	sub	sp, #28
 8002050:	0d5b      	lsrs	r3, r3, #21
 8002052:	d100      	bne.n	8002056 <__aeabi_dmul+0x26>
 8002054:	e0d5      	b.n	8002202 <__aeabi_dmul+0x1d2>
 8002056:	4abb      	ldr	r2, [pc, #748]	@ (8002344 <__aeabi_dmul+0x314>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d100      	bne.n	800205e <__aeabi_dmul+0x2e>
 800205c:	e0f8      	b.n	8002250 <__aeabi_dmul+0x220>
 800205e:	4651      	mov	r1, sl
 8002060:	0f42      	lsrs	r2, r0, #29
 8002062:	00c9      	lsls	r1, r1, #3
 8002064:	430a      	orrs	r2, r1
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	0409      	lsls	r1, r1, #16
 800206a:	4311      	orrs	r1, r2
 800206c:	00c2      	lsls	r2, r0, #3
 800206e:	4691      	mov	r9, r2
 8002070:	4ab5      	ldr	r2, [pc, #724]	@ (8002348 <__aeabi_dmul+0x318>)
 8002072:	468a      	mov	sl, r1
 8002074:	189d      	adds	r5, r3, r2
 8002076:	2300      	movs	r3, #0
 8002078:	4698      	mov	r8, r3
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	033c      	lsls	r4, r7, #12
 800207e:	007b      	lsls	r3, r7, #1
 8002080:	0ffa      	lsrs	r2, r7, #31
 8002082:	0030      	movs	r0, r6
 8002084:	0b24      	lsrs	r4, r4, #12
 8002086:	0d5b      	lsrs	r3, r3, #21
 8002088:	9200      	str	r2, [sp, #0]
 800208a:	d100      	bne.n	800208e <__aeabi_dmul+0x5e>
 800208c:	e096      	b.n	80021bc <__aeabi_dmul+0x18c>
 800208e:	4aad      	ldr	r2, [pc, #692]	@ (8002344 <__aeabi_dmul+0x314>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d031      	beq.n	80020f8 <__aeabi_dmul+0xc8>
 8002094:	0f72      	lsrs	r2, r6, #29
 8002096:	00e4      	lsls	r4, r4, #3
 8002098:	4322      	orrs	r2, r4
 800209a:	2480      	movs	r4, #128	@ 0x80
 800209c:	0424      	lsls	r4, r4, #16
 800209e:	4314      	orrs	r4, r2
 80020a0:	4aa9      	ldr	r2, [pc, #676]	@ (8002348 <__aeabi_dmul+0x318>)
 80020a2:	00f0      	lsls	r0, r6, #3
 80020a4:	4694      	mov	ip, r2
 80020a6:	4463      	add	r3, ip
 80020a8:	195b      	adds	r3, r3, r5
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	4642      	mov	r2, r8
 80020b0:	2600      	movs	r6, #0
 80020b2:	2a0a      	cmp	r2, #10
 80020b4:	dc42      	bgt.n	800213c <__aeabi_dmul+0x10c>
 80020b6:	465a      	mov	r2, fp
 80020b8:	9900      	ldr	r1, [sp, #0]
 80020ba:	404a      	eors	r2, r1
 80020bc:	4693      	mov	fp, r2
 80020be:	4642      	mov	r2, r8
 80020c0:	2a02      	cmp	r2, #2
 80020c2:	dc32      	bgt.n	800212a <__aeabi_dmul+0xfa>
 80020c4:	3a01      	subs	r2, #1
 80020c6:	2a01      	cmp	r2, #1
 80020c8:	d900      	bls.n	80020cc <__aeabi_dmul+0x9c>
 80020ca:	e149      	b.n	8002360 <__aeabi_dmul+0x330>
 80020cc:	2e02      	cmp	r6, #2
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dmul+0xa2>
 80020d0:	e0ca      	b.n	8002268 <__aeabi_dmul+0x238>
 80020d2:	2e01      	cmp	r6, #1
 80020d4:	d13d      	bne.n	8002152 <__aeabi_dmul+0x122>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	0010      	movs	r0, r2
 80020de:	465a      	mov	r2, fp
 80020e0:	051b      	lsls	r3, r3, #20
 80020e2:	4323      	orrs	r3, r4
 80020e4:	07d2      	lsls	r2, r2, #31
 80020e6:	4313      	orrs	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	b007      	add	sp, #28
 80020ec:	bcf0      	pop	{r4, r5, r6, r7}
 80020ee:	46bb      	mov	fp, r7
 80020f0:	46b2      	mov	sl, r6
 80020f2:	46a9      	mov	r9, r5
 80020f4:	46a0      	mov	r8, r4
 80020f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f8:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <__aeabi_dmul+0x314>)
 80020fa:	4326      	orrs	r6, r4
 80020fc:	18eb      	adds	r3, r5, r3
 80020fe:	2e00      	cmp	r6, #0
 8002100:	d100      	bne.n	8002104 <__aeabi_dmul+0xd4>
 8002102:	e0bb      	b.n	800227c <__aeabi_dmul+0x24c>
 8002104:	2203      	movs	r2, #3
 8002106:	4641      	mov	r1, r8
 8002108:	4311      	orrs	r1, r2
 800210a:	465a      	mov	r2, fp
 800210c:	4688      	mov	r8, r1
 800210e:	9900      	ldr	r1, [sp, #0]
 8002110:	404a      	eors	r2, r1
 8002112:	2180      	movs	r1, #128	@ 0x80
 8002114:	0109      	lsls	r1, r1, #4
 8002116:	468c      	mov	ip, r1
 8002118:	0029      	movs	r1, r5
 800211a:	4461      	add	r1, ip
 800211c:	9101      	str	r1, [sp, #4]
 800211e:	4641      	mov	r1, r8
 8002120:	290a      	cmp	r1, #10
 8002122:	dd00      	ble.n	8002126 <__aeabi_dmul+0xf6>
 8002124:	e233      	b.n	800258e <__aeabi_dmul+0x55e>
 8002126:	4693      	mov	fp, r2
 8002128:	2603      	movs	r6, #3
 800212a:	4642      	mov	r2, r8
 800212c:	2701      	movs	r7, #1
 800212e:	4097      	lsls	r7, r2
 8002130:	21a6      	movs	r1, #166	@ 0xa6
 8002132:	003a      	movs	r2, r7
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	400a      	ands	r2, r1
 8002138:	420f      	tst	r7, r1
 800213a:	d031      	beq.n	80021a0 <__aeabi_dmul+0x170>
 800213c:	9e02      	ldr	r6, [sp, #8]
 800213e:	2e02      	cmp	r6, #2
 8002140:	d100      	bne.n	8002144 <__aeabi_dmul+0x114>
 8002142:	e235      	b.n	80025b0 <__aeabi_dmul+0x580>
 8002144:	2e03      	cmp	r6, #3
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x11a>
 8002148:	e1d2      	b.n	80024f0 <__aeabi_dmul+0x4c0>
 800214a:	4654      	mov	r4, sl
 800214c:	4648      	mov	r0, r9
 800214e:	2e01      	cmp	r6, #1
 8002150:	d0c1      	beq.n	80020d6 <__aeabi_dmul+0xa6>
 8002152:	9a01      	ldr	r2, [sp, #4]
 8002154:	4b7d      	ldr	r3, [pc, #500]	@ (800234c <__aeabi_dmul+0x31c>)
 8002156:	4694      	mov	ip, r2
 8002158:	4463      	add	r3, ip
 800215a:	2b00      	cmp	r3, #0
 800215c:	dc00      	bgt.n	8002160 <__aeabi_dmul+0x130>
 800215e:	e0c0      	b.n	80022e2 <__aeabi_dmul+0x2b2>
 8002160:	0742      	lsls	r2, r0, #29
 8002162:	d009      	beq.n	8002178 <__aeabi_dmul+0x148>
 8002164:	220f      	movs	r2, #15
 8002166:	4002      	ands	r2, r0
 8002168:	2a04      	cmp	r2, #4
 800216a:	d005      	beq.n	8002178 <__aeabi_dmul+0x148>
 800216c:	1d02      	adds	r2, r0, #4
 800216e:	4282      	cmp	r2, r0
 8002170:	4180      	sbcs	r0, r0
 8002172:	4240      	negs	r0, r0
 8002174:	1824      	adds	r4, r4, r0
 8002176:	0010      	movs	r0, r2
 8002178:	01e2      	lsls	r2, r4, #7
 800217a:	d506      	bpl.n	800218a <__aeabi_dmul+0x15a>
 800217c:	4b74      	ldr	r3, [pc, #464]	@ (8002350 <__aeabi_dmul+0x320>)
 800217e:	9a01      	ldr	r2, [sp, #4]
 8002180:	401c      	ands	r4, r3
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	4694      	mov	ip, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4463      	add	r3, ip
 800218a:	4a72      	ldr	r2, [pc, #456]	@ (8002354 <__aeabi_dmul+0x324>)
 800218c:	4293      	cmp	r3, r2
 800218e:	dc6b      	bgt.n	8002268 <__aeabi_dmul+0x238>
 8002190:	0762      	lsls	r2, r4, #29
 8002192:	08c0      	lsrs	r0, r0, #3
 8002194:	0264      	lsls	r4, r4, #9
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	4302      	orrs	r2, r0
 800219a:	0b24      	lsrs	r4, r4, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	e79d      	b.n	80020dc <__aeabi_dmul+0xac>
 80021a0:	2190      	movs	r1, #144	@ 0x90
 80021a2:	0089      	lsls	r1, r1, #2
 80021a4:	420f      	tst	r7, r1
 80021a6:	d163      	bne.n	8002270 <__aeabi_dmul+0x240>
 80021a8:	2288      	movs	r2, #136	@ 0x88
 80021aa:	423a      	tst	r2, r7
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x180>
 80021ae:	e0d7      	b.n	8002360 <__aeabi_dmul+0x330>
 80021b0:	9b00      	ldr	r3, [sp, #0]
 80021b2:	46a2      	mov	sl, r4
 80021b4:	469b      	mov	fp, r3
 80021b6:	4681      	mov	r9, r0
 80021b8:	9602      	str	r6, [sp, #8]
 80021ba:	e7bf      	b.n	800213c <__aeabi_dmul+0x10c>
 80021bc:	0023      	movs	r3, r4
 80021be:	4333      	orrs	r3, r6
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dmul+0x194>
 80021c2:	e07f      	b.n	80022c4 <__aeabi_dmul+0x294>
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dmul+0x19a>
 80021c8:	e1ad      	b.n	8002526 <__aeabi_dmul+0x4f6>
 80021ca:	0020      	movs	r0, r4
 80021cc:	f000 fee2 	bl	8002f94 <__clzsi2>
 80021d0:	0002      	movs	r2, r0
 80021d2:	0003      	movs	r3, r0
 80021d4:	3a0b      	subs	r2, #11
 80021d6:	201d      	movs	r0, #29
 80021d8:	0019      	movs	r1, r3
 80021da:	1a82      	subs	r2, r0, r2
 80021dc:	0030      	movs	r0, r6
 80021de:	3908      	subs	r1, #8
 80021e0:	40d0      	lsrs	r0, r2
 80021e2:	408c      	lsls	r4, r1
 80021e4:	4304      	orrs	r4, r0
 80021e6:	0030      	movs	r0, r6
 80021e8:	4088      	lsls	r0, r1
 80021ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002358 <__aeabi_dmul+0x328>)
 80021ec:	1aeb      	subs	r3, r5, r3
 80021ee:	4694      	mov	ip, r2
 80021f0:	4463      	add	r3, ip
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	9201      	str	r2, [sp, #4]
 80021f6:	4642      	mov	r2, r8
 80021f8:	2600      	movs	r6, #0
 80021fa:	2a0a      	cmp	r2, #10
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_dmul+0x1d0>
 80021fe:	e75a      	b.n	80020b6 <__aeabi_dmul+0x86>
 8002200:	e79c      	b.n	800213c <__aeabi_dmul+0x10c>
 8002202:	4653      	mov	r3, sl
 8002204:	4303      	orrs	r3, r0
 8002206:	4699      	mov	r9, r3
 8002208:	d054      	beq.n	80022b4 <__aeabi_dmul+0x284>
 800220a:	4653      	mov	r3, sl
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <__aeabi_dmul+0x1e2>
 8002210:	e177      	b.n	8002502 <__aeabi_dmul+0x4d2>
 8002212:	4650      	mov	r0, sl
 8002214:	f000 febe 	bl	8002f94 <__clzsi2>
 8002218:	230b      	movs	r3, #11
 800221a:	425b      	negs	r3, r3
 800221c:	469c      	mov	ip, r3
 800221e:	0002      	movs	r2, r0
 8002220:	4484      	add	ip, r0
 8002222:	0011      	movs	r1, r2
 8002224:	4650      	mov	r0, sl
 8002226:	3908      	subs	r1, #8
 8002228:	4088      	lsls	r0, r1
 800222a:	231d      	movs	r3, #29
 800222c:	4680      	mov	r8, r0
 800222e:	4660      	mov	r0, ip
 8002230:	1a1b      	subs	r3, r3, r0
 8002232:	0020      	movs	r0, r4
 8002234:	40d8      	lsrs	r0, r3
 8002236:	0003      	movs	r3, r0
 8002238:	4640      	mov	r0, r8
 800223a:	4303      	orrs	r3, r0
 800223c:	469a      	mov	sl, r3
 800223e:	0023      	movs	r3, r4
 8002240:	408b      	lsls	r3, r1
 8002242:	4699      	mov	r9, r3
 8002244:	2300      	movs	r3, #0
 8002246:	4d44      	ldr	r5, [pc, #272]	@ (8002358 <__aeabi_dmul+0x328>)
 8002248:	4698      	mov	r8, r3
 800224a:	1aad      	subs	r5, r5, r2
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	e715      	b.n	800207c <__aeabi_dmul+0x4c>
 8002250:	4652      	mov	r2, sl
 8002252:	4302      	orrs	r2, r0
 8002254:	4691      	mov	r9, r2
 8002256:	d126      	bne.n	80022a6 <__aeabi_dmul+0x276>
 8002258:	2200      	movs	r2, #0
 800225a:	001d      	movs	r5, r3
 800225c:	2302      	movs	r3, #2
 800225e:	4692      	mov	sl, r2
 8002260:	3208      	adds	r2, #8
 8002262:	4690      	mov	r8, r2
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	e709      	b.n	800207c <__aeabi_dmul+0x4c>
 8002268:	2400      	movs	r4, #0
 800226a:	2200      	movs	r2, #0
 800226c:	4b35      	ldr	r3, [pc, #212]	@ (8002344 <__aeabi_dmul+0x314>)
 800226e:	e735      	b.n	80020dc <__aeabi_dmul+0xac>
 8002270:	2300      	movs	r3, #0
 8002272:	2480      	movs	r4, #128	@ 0x80
 8002274:	469b      	mov	fp, r3
 8002276:	0324      	lsls	r4, r4, #12
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <__aeabi_dmul+0x314>)
 800227a:	e72f      	b.n	80020dc <__aeabi_dmul+0xac>
 800227c:	2202      	movs	r2, #2
 800227e:	4641      	mov	r1, r8
 8002280:	4311      	orrs	r1, r2
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	4694      	mov	ip, r2
 8002288:	002a      	movs	r2, r5
 800228a:	4462      	add	r2, ip
 800228c:	4688      	mov	r8, r1
 800228e:	9201      	str	r2, [sp, #4]
 8002290:	290a      	cmp	r1, #10
 8002292:	dd00      	ble.n	8002296 <__aeabi_dmul+0x266>
 8002294:	e752      	b.n	800213c <__aeabi_dmul+0x10c>
 8002296:	465a      	mov	r2, fp
 8002298:	2000      	movs	r0, #0
 800229a:	9900      	ldr	r1, [sp, #0]
 800229c:	0004      	movs	r4, r0
 800229e:	404a      	eors	r2, r1
 80022a0:	4693      	mov	fp, r2
 80022a2:	2602      	movs	r6, #2
 80022a4:	e70b      	b.n	80020be <__aeabi_dmul+0x8e>
 80022a6:	220c      	movs	r2, #12
 80022a8:	001d      	movs	r5, r3
 80022aa:	2303      	movs	r3, #3
 80022ac:	4681      	mov	r9, r0
 80022ae:	4690      	mov	r8, r2
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	e6e3      	b.n	800207c <__aeabi_dmul+0x4c>
 80022b4:	2300      	movs	r3, #0
 80022b6:	469a      	mov	sl, r3
 80022b8:	3304      	adds	r3, #4
 80022ba:	4698      	mov	r8, r3
 80022bc:	3b03      	subs	r3, #3
 80022be:	2500      	movs	r5, #0
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	e6db      	b.n	800207c <__aeabi_dmul+0x4c>
 80022c4:	4642      	mov	r2, r8
 80022c6:	3301      	adds	r3, #1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	002b      	movs	r3, r5
 80022cc:	4690      	mov	r8, r2
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	4642      	mov	r2, r8
 80022d4:	2400      	movs	r4, #0
 80022d6:	2000      	movs	r0, #0
 80022d8:	2601      	movs	r6, #1
 80022da:	2a0a      	cmp	r2, #10
 80022dc:	dc00      	bgt.n	80022e0 <__aeabi_dmul+0x2b0>
 80022de:	e6ea      	b.n	80020b6 <__aeabi_dmul+0x86>
 80022e0:	e72c      	b.n	800213c <__aeabi_dmul+0x10c>
 80022e2:	2201      	movs	r2, #1
 80022e4:	1ad2      	subs	r2, r2, r3
 80022e6:	2a38      	cmp	r2, #56	@ 0x38
 80022e8:	dd00      	ble.n	80022ec <__aeabi_dmul+0x2bc>
 80022ea:	e6f4      	b.n	80020d6 <__aeabi_dmul+0xa6>
 80022ec:	2a1f      	cmp	r2, #31
 80022ee:	dc00      	bgt.n	80022f2 <__aeabi_dmul+0x2c2>
 80022f0:	e12a      	b.n	8002548 <__aeabi_dmul+0x518>
 80022f2:	211f      	movs	r1, #31
 80022f4:	4249      	negs	r1, r1
 80022f6:	1acb      	subs	r3, r1, r3
 80022f8:	0021      	movs	r1, r4
 80022fa:	40d9      	lsrs	r1, r3
 80022fc:	000b      	movs	r3, r1
 80022fe:	2a20      	cmp	r2, #32
 8002300:	d005      	beq.n	800230e <__aeabi_dmul+0x2de>
 8002302:	4a16      	ldr	r2, [pc, #88]	@ (800235c <__aeabi_dmul+0x32c>)
 8002304:	9d01      	ldr	r5, [sp, #4]
 8002306:	4694      	mov	ip, r2
 8002308:	4465      	add	r5, ip
 800230a:	40ac      	lsls	r4, r5
 800230c:	4320      	orrs	r0, r4
 800230e:	1e42      	subs	r2, r0, #1
 8002310:	4190      	sbcs	r0, r2
 8002312:	4318      	orrs	r0, r3
 8002314:	2307      	movs	r3, #7
 8002316:	0019      	movs	r1, r3
 8002318:	2400      	movs	r4, #0
 800231a:	4001      	ands	r1, r0
 800231c:	4203      	tst	r3, r0
 800231e:	d00c      	beq.n	800233a <__aeabi_dmul+0x30a>
 8002320:	230f      	movs	r3, #15
 8002322:	4003      	ands	r3, r0
 8002324:	2b04      	cmp	r3, #4
 8002326:	d100      	bne.n	800232a <__aeabi_dmul+0x2fa>
 8002328:	e140      	b.n	80025ac <__aeabi_dmul+0x57c>
 800232a:	1d03      	adds	r3, r0, #4
 800232c:	4283      	cmp	r3, r0
 800232e:	41a4      	sbcs	r4, r4
 8002330:	0018      	movs	r0, r3
 8002332:	4264      	negs	r4, r4
 8002334:	0761      	lsls	r1, r4, #29
 8002336:	0264      	lsls	r4, r4, #9
 8002338:	0b24      	lsrs	r4, r4, #12
 800233a:	08c2      	lsrs	r2, r0, #3
 800233c:	2300      	movs	r3, #0
 800233e:	430a      	orrs	r2, r1
 8002340:	e6cc      	b.n	80020dc <__aeabi_dmul+0xac>
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	000007ff 	.word	0x000007ff
 8002348:	fffffc01 	.word	0xfffffc01
 800234c:	000003ff 	.word	0x000003ff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	000007fe 	.word	0x000007fe
 8002358:	fffffc0d 	.word	0xfffffc0d
 800235c:	0000043e 	.word	0x0000043e
 8002360:	4649      	mov	r1, r9
 8002362:	464a      	mov	r2, r9
 8002364:	0409      	lsls	r1, r1, #16
 8002366:	0c09      	lsrs	r1, r1, #16
 8002368:	000d      	movs	r5, r1
 800236a:	0c16      	lsrs	r6, r2, #16
 800236c:	0c02      	lsrs	r2, r0, #16
 800236e:	0400      	lsls	r0, r0, #16
 8002370:	0c00      	lsrs	r0, r0, #16
 8002372:	4345      	muls	r5, r0
 8002374:	46ac      	mov	ip, r5
 8002376:	0005      	movs	r5, r0
 8002378:	4375      	muls	r5, r6
 800237a:	46a8      	mov	r8, r5
 800237c:	0015      	movs	r5, r2
 800237e:	000f      	movs	r7, r1
 8002380:	4375      	muls	r5, r6
 8002382:	9200      	str	r2, [sp, #0]
 8002384:	9502      	str	r5, [sp, #8]
 8002386:	002a      	movs	r2, r5
 8002388:	9d00      	ldr	r5, [sp, #0]
 800238a:	436f      	muls	r7, r5
 800238c:	4665      	mov	r5, ip
 800238e:	0c2d      	lsrs	r5, r5, #16
 8002390:	46a9      	mov	r9, r5
 8002392:	4447      	add	r7, r8
 8002394:	444f      	add	r7, r9
 8002396:	45b8      	cmp	r8, r7
 8002398:	d905      	bls.n	80023a6 <__aeabi_dmul+0x376>
 800239a:	0015      	movs	r5, r2
 800239c:	2280      	movs	r2, #128	@ 0x80
 800239e:	0252      	lsls	r2, r2, #9
 80023a0:	4690      	mov	r8, r2
 80023a2:	4445      	add	r5, r8
 80023a4:	9502      	str	r5, [sp, #8]
 80023a6:	0c3d      	lsrs	r5, r7, #16
 80023a8:	9503      	str	r5, [sp, #12]
 80023aa:	4665      	mov	r5, ip
 80023ac:	042d      	lsls	r5, r5, #16
 80023ae:	043f      	lsls	r7, r7, #16
 80023b0:	0c2d      	lsrs	r5, r5, #16
 80023b2:	46ac      	mov	ip, r5
 80023b4:	003d      	movs	r5, r7
 80023b6:	4465      	add	r5, ip
 80023b8:	9504      	str	r5, [sp, #16]
 80023ba:	0c25      	lsrs	r5, r4, #16
 80023bc:	0424      	lsls	r4, r4, #16
 80023be:	0c24      	lsrs	r4, r4, #16
 80023c0:	46ac      	mov	ip, r5
 80023c2:	0025      	movs	r5, r4
 80023c4:	4375      	muls	r5, r6
 80023c6:	46a8      	mov	r8, r5
 80023c8:	4665      	mov	r5, ip
 80023ca:	000f      	movs	r7, r1
 80023cc:	4369      	muls	r1, r5
 80023ce:	4441      	add	r1, r8
 80023d0:	4689      	mov	r9, r1
 80023d2:	4367      	muls	r7, r4
 80023d4:	0c39      	lsrs	r1, r7, #16
 80023d6:	4449      	add	r1, r9
 80023d8:	436e      	muls	r6, r5
 80023da:	4588      	cmp	r8, r1
 80023dc:	d903      	bls.n	80023e6 <__aeabi_dmul+0x3b6>
 80023de:	2280      	movs	r2, #128	@ 0x80
 80023e0:	0252      	lsls	r2, r2, #9
 80023e2:	4690      	mov	r8, r2
 80023e4:	4446      	add	r6, r8
 80023e6:	0c0d      	lsrs	r5, r1, #16
 80023e8:	46a8      	mov	r8, r5
 80023ea:	0035      	movs	r5, r6
 80023ec:	4445      	add	r5, r8
 80023ee:	9505      	str	r5, [sp, #20]
 80023f0:	9d03      	ldr	r5, [sp, #12]
 80023f2:	043f      	lsls	r7, r7, #16
 80023f4:	46a8      	mov	r8, r5
 80023f6:	0c3f      	lsrs	r7, r7, #16
 80023f8:	0409      	lsls	r1, r1, #16
 80023fa:	19c9      	adds	r1, r1, r7
 80023fc:	4488      	add	r8, r1
 80023fe:	4645      	mov	r5, r8
 8002400:	9503      	str	r5, [sp, #12]
 8002402:	4655      	mov	r5, sl
 8002404:	042e      	lsls	r6, r5, #16
 8002406:	0c36      	lsrs	r6, r6, #16
 8002408:	0c2f      	lsrs	r7, r5, #16
 800240a:	0035      	movs	r5, r6
 800240c:	4345      	muls	r5, r0
 800240e:	4378      	muls	r0, r7
 8002410:	4681      	mov	r9, r0
 8002412:	0038      	movs	r0, r7
 8002414:	46a8      	mov	r8, r5
 8002416:	0c2d      	lsrs	r5, r5, #16
 8002418:	46aa      	mov	sl, r5
 800241a:	9a00      	ldr	r2, [sp, #0]
 800241c:	4350      	muls	r0, r2
 800241e:	4372      	muls	r2, r6
 8002420:	444a      	add	r2, r9
 8002422:	4452      	add	r2, sl
 8002424:	4591      	cmp	r9, r2
 8002426:	d903      	bls.n	8002430 <__aeabi_dmul+0x400>
 8002428:	2580      	movs	r5, #128	@ 0x80
 800242a:	026d      	lsls	r5, r5, #9
 800242c:	46a9      	mov	r9, r5
 800242e:	4448      	add	r0, r9
 8002430:	0c15      	lsrs	r5, r2, #16
 8002432:	46a9      	mov	r9, r5
 8002434:	4645      	mov	r5, r8
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	0c2d      	lsrs	r5, r5, #16
 800243a:	46a8      	mov	r8, r5
 800243c:	4665      	mov	r5, ip
 800243e:	437d      	muls	r5, r7
 8002440:	0412      	lsls	r2, r2, #16
 8002442:	4448      	add	r0, r9
 8002444:	4490      	add	r8, r2
 8002446:	46a9      	mov	r9, r5
 8002448:	0032      	movs	r2, r6
 800244a:	4665      	mov	r5, ip
 800244c:	4362      	muls	r2, r4
 800244e:	436e      	muls	r6, r5
 8002450:	437c      	muls	r4, r7
 8002452:	0c17      	lsrs	r7, r2, #16
 8002454:	1936      	adds	r6, r6, r4
 8002456:	19bf      	adds	r7, r7, r6
 8002458:	42bc      	cmp	r4, r7
 800245a:	d903      	bls.n	8002464 <__aeabi_dmul+0x434>
 800245c:	2480      	movs	r4, #128	@ 0x80
 800245e:	0264      	lsls	r4, r4, #9
 8002460:	46a4      	mov	ip, r4
 8002462:	44e1      	add	r9, ip
 8002464:	9c02      	ldr	r4, [sp, #8]
 8002466:	9e03      	ldr	r6, [sp, #12]
 8002468:	46a4      	mov	ip, r4
 800246a:	9d05      	ldr	r5, [sp, #20]
 800246c:	4466      	add	r6, ip
 800246e:	428e      	cmp	r6, r1
 8002470:	4189      	sbcs	r1, r1
 8002472:	46ac      	mov	ip, r5
 8002474:	0412      	lsls	r2, r2, #16
 8002476:	043c      	lsls	r4, r7, #16
 8002478:	0c12      	lsrs	r2, r2, #16
 800247a:	18a2      	adds	r2, r4, r2
 800247c:	4462      	add	r2, ip
 800247e:	4249      	negs	r1, r1
 8002480:	1854      	adds	r4, r2, r1
 8002482:	4446      	add	r6, r8
 8002484:	46a4      	mov	ip, r4
 8002486:	4546      	cmp	r6, r8
 8002488:	41a4      	sbcs	r4, r4
 800248a:	4682      	mov	sl, r0
 800248c:	4264      	negs	r4, r4
 800248e:	46a0      	mov	r8, r4
 8002490:	42aa      	cmp	r2, r5
 8002492:	4192      	sbcs	r2, r2
 8002494:	458c      	cmp	ip, r1
 8002496:	4189      	sbcs	r1, r1
 8002498:	44e2      	add	sl, ip
 800249a:	44d0      	add	r8, sl
 800249c:	4249      	negs	r1, r1
 800249e:	4252      	negs	r2, r2
 80024a0:	430a      	orrs	r2, r1
 80024a2:	45a0      	cmp	r8, r4
 80024a4:	41a4      	sbcs	r4, r4
 80024a6:	4582      	cmp	sl, r0
 80024a8:	4189      	sbcs	r1, r1
 80024aa:	4264      	negs	r4, r4
 80024ac:	4249      	negs	r1, r1
 80024ae:	430c      	orrs	r4, r1
 80024b0:	4641      	mov	r1, r8
 80024b2:	0c3f      	lsrs	r7, r7, #16
 80024b4:	19d2      	adds	r2, r2, r7
 80024b6:	1912      	adds	r2, r2, r4
 80024b8:	0dcc      	lsrs	r4, r1, #23
 80024ba:	9904      	ldr	r1, [sp, #16]
 80024bc:	0270      	lsls	r0, r6, #9
 80024be:	4308      	orrs	r0, r1
 80024c0:	1e41      	subs	r1, r0, #1
 80024c2:	4188      	sbcs	r0, r1
 80024c4:	4641      	mov	r1, r8
 80024c6:	444a      	add	r2, r9
 80024c8:	0df6      	lsrs	r6, r6, #23
 80024ca:	0252      	lsls	r2, r2, #9
 80024cc:	4330      	orrs	r0, r6
 80024ce:	0249      	lsls	r1, r1, #9
 80024d0:	4314      	orrs	r4, r2
 80024d2:	4308      	orrs	r0, r1
 80024d4:	01d2      	lsls	r2, r2, #7
 80024d6:	d535      	bpl.n	8002544 <__aeabi_dmul+0x514>
 80024d8:	2201      	movs	r2, #1
 80024da:	0843      	lsrs	r3, r0, #1
 80024dc:	4002      	ands	r2, r0
 80024de:	4313      	orrs	r3, r2
 80024e0:	07e0      	lsls	r0, r4, #31
 80024e2:	4318      	orrs	r0, r3
 80024e4:	0864      	lsrs	r4, r4, #1
 80024e6:	e634      	b.n	8002152 <__aeabi_dmul+0x122>
 80024e8:	9b00      	ldr	r3, [sp, #0]
 80024ea:	46a2      	mov	sl, r4
 80024ec:	469b      	mov	fp, r3
 80024ee:	4681      	mov	r9, r0
 80024f0:	2480      	movs	r4, #128	@ 0x80
 80024f2:	4653      	mov	r3, sl
 80024f4:	0324      	lsls	r4, r4, #12
 80024f6:	431c      	orrs	r4, r3
 80024f8:	0324      	lsls	r4, r4, #12
 80024fa:	464a      	mov	r2, r9
 80024fc:	4b2e      	ldr	r3, [pc, #184]	@ (80025b8 <__aeabi_dmul+0x588>)
 80024fe:	0b24      	lsrs	r4, r4, #12
 8002500:	e5ec      	b.n	80020dc <__aeabi_dmul+0xac>
 8002502:	f000 fd47 	bl	8002f94 <__clzsi2>
 8002506:	2315      	movs	r3, #21
 8002508:	469c      	mov	ip, r3
 800250a:	4484      	add	ip, r0
 800250c:	0002      	movs	r2, r0
 800250e:	4663      	mov	r3, ip
 8002510:	3220      	adds	r2, #32
 8002512:	2b1c      	cmp	r3, #28
 8002514:	dc00      	bgt.n	8002518 <__aeabi_dmul+0x4e8>
 8002516:	e684      	b.n	8002222 <__aeabi_dmul+0x1f2>
 8002518:	2300      	movs	r3, #0
 800251a:	4699      	mov	r9, r3
 800251c:	0023      	movs	r3, r4
 800251e:	3808      	subs	r0, #8
 8002520:	4083      	lsls	r3, r0
 8002522:	469a      	mov	sl, r3
 8002524:	e68e      	b.n	8002244 <__aeabi_dmul+0x214>
 8002526:	f000 fd35 	bl	8002f94 <__clzsi2>
 800252a:	0002      	movs	r2, r0
 800252c:	0003      	movs	r3, r0
 800252e:	3215      	adds	r2, #21
 8002530:	3320      	adds	r3, #32
 8002532:	2a1c      	cmp	r2, #28
 8002534:	dc00      	bgt.n	8002538 <__aeabi_dmul+0x508>
 8002536:	e64e      	b.n	80021d6 <__aeabi_dmul+0x1a6>
 8002538:	0002      	movs	r2, r0
 800253a:	0034      	movs	r4, r6
 800253c:	3a08      	subs	r2, #8
 800253e:	2000      	movs	r0, #0
 8002540:	4094      	lsls	r4, r2
 8002542:	e652      	b.n	80021ea <__aeabi_dmul+0x1ba>
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	e604      	b.n	8002152 <__aeabi_dmul+0x122>
 8002548:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <__aeabi_dmul+0x58c>)
 800254a:	0021      	movs	r1, r4
 800254c:	469c      	mov	ip, r3
 800254e:	0003      	movs	r3, r0
 8002550:	9d01      	ldr	r5, [sp, #4]
 8002552:	40d3      	lsrs	r3, r2
 8002554:	4465      	add	r5, ip
 8002556:	40a9      	lsls	r1, r5
 8002558:	4319      	orrs	r1, r3
 800255a:	0003      	movs	r3, r0
 800255c:	40ab      	lsls	r3, r5
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	4183      	sbcs	r3, r0
 8002562:	4319      	orrs	r1, r3
 8002564:	0008      	movs	r0, r1
 8002566:	40d4      	lsrs	r4, r2
 8002568:	074b      	lsls	r3, r1, #29
 800256a:	d009      	beq.n	8002580 <__aeabi_dmul+0x550>
 800256c:	230f      	movs	r3, #15
 800256e:	400b      	ands	r3, r1
 8002570:	2b04      	cmp	r3, #4
 8002572:	d005      	beq.n	8002580 <__aeabi_dmul+0x550>
 8002574:	1d0b      	adds	r3, r1, #4
 8002576:	428b      	cmp	r3, r1
 8002578:	4180      	sbcs	r0, r0
 800257a:	4240      	negs	r0, r0
 800257c:	1824      	adds	r4, r4, r0
 800257e:	0018      	movs	r0, r3
 8002580:	0223      	lsls	r3, r4, #8
 8002582:	d400      	bmi.n	8002586 <__aeabi_dmul+0x556>
 8002584:	e6d6      	b.n	8002334 <__aeabi_dmul+0x304>
 8002586:	2301      	movs	r3, #1
 8002588:	2400      	movs	r4, #0
 800258a:	2200      	movs	r2, #0
 800258c:	e5a6      	b.n	80020dc <__aeabi_dmul+0xac>
 800258e:	290f      	cmp	r1, #15
 8002590:	d1aa      	bne.n	80024e8 <__aeabi_dmul+0x4b8>
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	4652      	mov	r2, sl
 8002596:	031b      	lsls	r3, r3, #12
 8002598:	421a      	tst	r2, r3
 800259a:	d0a9      	beq.n	80024f0 <__aeabi_dmul+0x4c0>
 800259c:	421c      	tst	r4, r3
 800259e:	d1a7      	bne.n	80024f0 <__aeabi_dmul+0x4c0>
 80025a0:	431c      	orrs	r4, r3
 80025a2:	9b00      	ldr	r3, [sp, #0]
 80025a4:	0002      	movs	r2, r0
 80025a6:	469b      	mov	fp, r3
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <__aeabi_dmul+0x588>)
 80025aa:	e597      	b.n	80020dc <__aeabi_dmul+0xac>
 80025ac:	2400      	movs	r4, #0
 80025ae:	e6c1      	b.n	8002334 <__aeabi_dmul+0x304>
 80025b0:	2400      	movs	r4, #0
 80025b2:	4b01      	ldr	r3, [pc, #4]	@ (80025b8 <__aeabi_dmul+0x588>)
 80025b4:	0022      	movs	r2, r4
 80025b6:	e591      	b.n	80020dc <__aeabi_dmul+0xac>
 80025b8:	000007ff 	.word	0x000007ff
 80025bc:	0000041e 	.word	0x0000041e

080025c0 <__aeabi_dsub>:
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	464e      	mov	r6, r9
 80025c4:	4645      	mov	r5, r8
 80025c6:	46de      	mov	lr, fp
 80025c8:	4657      	mov	r7, sl
 80025ca:	b5e0      	push	{r5, r6, r7, lr}
 80025cc:	b085      	sub	sp, #20
 80025ce:	9000      	str	r0, [sp, #0]
 80025d0:	9101      	str	r1, [sp, #4]
 80025d2:	030c      	lsls	r4, r1, #12
 80025d4:	004f      	lsls	r7, r1, #1
 80025d6:	0fce      	lsrs	r6, r1, #31
 80025d8:	0a61      	lsrs	r1, r4, #9
 80025da:	9c00      	ldr	r4, [sp, #0]
 80025dc:	46b0      	mov	r8, r6
 80025de:	0f64      	lsrs	r4, r4, #29
 80025e0:	430c      	orrs	r4, r1
 80025e2:	9900      	ldr	r1, [sp, #0]
 80025e4:	0d7f      	lsrs	r7, r7, #21
 80025e6:	00c8      	lsls	r0, r1, #3
 80025e8:	0011      	movs	r1, r2
 80025ea:	001a      	movs	r2, r3
 80025ec:	031b      	lsls	r3, r3, #12
 80025ee:	469c      	mov	ip, r3
 80025f0:	9100      	str	r1, [sp, #0]
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	0051      	lsls	r1, r2, #1
 80025f6:	0d4b      	lsrs	r3, r1, #21
 80025f8:	4699      	mov	r9, r3
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	9d00      	ldr	r5, [sp, #0]
 80025fe:	0fd9      	lsrs	r1, r3, #31
 8002600:	4663      	mov	r3, ip
 8002602:	0f6a      	lsrs	r2, r5, #29
 8002604:	0a5b      	lsrs	r3, r3, #9
 8002606:	4313      	orrs	r3, r2
 8002608:	00ea      	lsls	r2, r5, #3
 800260a:	4694      	mov	ip, r2
 800260c:	4693      	mov	fp, r2
 800260e:	4ac1      	ldr	r2, [pc, #772]	@ (8002914 <__aeabi_dsub+0x354>)
 8002610:	9003      	str	r0, [sp, #12]
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	4591      	cmp	r9, r2
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x5a>
 8002618:	e0cd      	b.n	80027b6 <__aeabi_dsub+0x1f6>
 800261a:	2501      	movs	r5, #1
 800261c:	4069      	eors	r1, r5
 800261e:	464d      	mov	r5, r9
 8002620:	1b7d      	subs	r5, r7, r5
 8002622:	46aa      	mov	sl, r5
 8002624:	428e      	cmp	r6, r1
 8002626:	d100      	bne.n	800262a <__aeabi_dsub+0x6a>
 8002628:	e080      	b.n	800272c <__aeabi_dsub+0x16c>
 800262a:	2d00      	cmp	r5, #0
 800262c:	dc00      	bgt.n	8002630 <__aeabi_dsub+0x70>
 800262e:	e335      	b.n	8002c9c <__aeabi_dsub+0x6dc>
 8002630:	4649      	mov	r1, r9
 8002632:	2900      	cmp	r1, #0
 8002634:	d100      	bne.n	8002638 <__aeabi_dsub+0x78>
 8002636:	e0df      	b.n	80027f8 <__aeabi_dsub+0x238>
 8002638:	4297      	cmp	r7, r2
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x7e>
 800263c:	e194      	b.n	8002968 <__aeabi_dsub+0x3a8>
 800263e:	4652      	mov	r2, sl
 8002640:	2501      	movs	r5, #1
 8002642:	2a38      	cmp	r2, #56	@ 0x38
 8002644:	dc19      	bgt.n	800267a <__aeabi_dsub+0xba>
 8002646:	2280      	movs	r2, #128	@ 0x80
 8002648:	9b02      	ldr	r3, [sp, #8]
 800264a:	0412      	lsls	r2, r2, #16
 800264c:	4313      	orrs	r3, r2
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	4652      	mov	r2, sl
 8002652:	2a1f      	cmp	r2, #31
 8002654:	dd00      	ble.n	8002658 <__aeabi_dsub+0x98>
 8002656:	e1e3      	b.n	8002a20 <__aeabi_dsub+0x460>
 8002658:	4653      	mov	r3, sl
 800265a:	2220      	movs	r2, #32
 800265c:	4661      	mov	r1, ip
 800265e:	9d02      	ldr	r5, [sp, #8]
 8002660:	1ad2      	subs	r2, r2, r3
 8002662:	4095      	lsls	r5, r2
 8002664:	40d9      	lsrs	r1, r3
 8002666:	430d      	orrs	r5, r1
 8002668:	4661      	mov	r1, ip
 800266a:	4091      	lsls	r1, r2
 800266c:	000a      	movs	r2, r1
 800266e:	1e51      	subs	r1, r2, #1
 8002670:	418a      	sbcs	r2, r1
 8002672:	4315      	orrs	r5, r2
 8002674:	9a02      	ldr	r2, [sp, #8]
 8002676:	40da      	lsrs	r2, r3
 8002678:	1aa4      	subs	r4, r4, r2
 800267a:	1b45      	subs	r5, r0, r5
 800267c:	42a8      	cmp	r0, r5
 800267e:	4180      	sbcs	r0, r0
 8002680:	4240      	negs	r0, r0
 8002682:	1a24      	subs	r4, r4, r0
 8002684:	0223      	lsls	r3, r4, #8
 8002686:	d400      	bmi.n	800268a <__aeabi_dsub+0xca>
 8002688:	e13d      	b.n	8002906 <__aeabi_dsub+0x346>
 800268a:	0264      	lsls	r4, r4, #9
 800268c:	0a64      	lsrs	r4, r4, #9
 800268e:	2c00      	cmp	r4, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0xd4>
 8002692:	e147      	b.n	8002924 <__aeabi_dsub+0x364>
 8002694:	0020      	movs	r0, r4
 8002696:	f000 fc7d 	bl	8002f94 <__clzsi2>
 800269a:	0003      	movs	r3, r0
 800269c:	3b08      	subs	r3, #8
 800269e:	2120      	movs	r1, #32
 80026a0:	0028      	movs	r0, r5
 80026a2:	1aca      	subs	r2, r1, r3
 80026a4:	40d0      	lsrs	r0, r2
 80026a6:	409c      	lsls	r4, r3
 80026a8:	0002      	movs	r2, r0
 80026aa:	409d      	lsls	r5, r3
 80026ac:	4322      	orrs	r2, r4
 80026ae:	429f      	cmp	r7, r3
 80026b0:	dd00      	ble.n	80026b4 <__aeabi_dsub+0xf4>
 80026b2:	e177      	b.n	80029a4 <__aeabi_dsub+0x3e4>
 80026b4:	1bd8      	subs	r0, r3, r7
 80026b6:	3001      	adds	r0, #1
 80026b8:	1a09      	subs	r1, r1, r0
 80026ba:	002c      	movs	r4, r5
 80026bc:	408d      	lsls	r5, r1
 80026be:	40c4      	lsrs	r4, r0
 80026c0:	1e6b      	subs	r3, r5, #1
 80026c2:	419d      	sbcs	r5, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	40c2      	lsrs	r2, r0
 80026c8:	408b      	lsls	r3, r1
 80026ca:	4325      	orrs	r5, r4
 80026cc:	2700      	movs	r7, #0
 80026ce:	0014      	movs	r4, r2
 80026d0:	431d      	orrs	r5, r3
 80026d2:	076b      	lsls	r3, r5, #29
 80026d4:	d009      	beq.n	80026ea <__aeabi_dsub+0x12a>
 80026d6:	230f      	movs	r3, #15
 80026d8:	402b      	ands	r3, r5
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d005      	beq.n	80026ea <__aeabi_dsub+0x12a>
 80026de:	1d2b      	adds	r3, r5, #4
 80026e0:	42ab      	cmp	r3, r5
 80026e2:	41ad      	sbcs	r5, r5
 80026e4:	426d      	negs	r5, r5
 80026e6:	1964      	adds	r4, r4, r5
 80026e8:	001d      	movs	r5, r3
 80026ea:	0223      	lsls	r3, r4, #8
 80026ec:	d400      	bmi.n	80026f0 <__aeabi_dsub+0x130>
 80026ee:	e140      	b.n	8002972 <__aeabi_dsub+0x3b2>
 80026f0:	4a88      	ldr	r2, [pc, #544]	@ (8002914 <__aeabi_dsub+0x354>)
 80026f2:	3701      	adds	r7, #1
 80026f4:	4297      	cmp	r7, r2
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x13a>
 80026f8:	e101      	b.n	80028fe <__aeabi_dsub+0x33e>
 80026fa:	2601      	movs	r6, #1
 80026fc:	4643      	mov	r3, r8
 80026fe:	4986      	ldr	r1, [pc, #536]	@ (8002918 <__aeabi_dsub+0x358>)
 8002700:	08ed      	lsrs	r5, r5, #3
 8002702:	4021      	ands	r1, r4
 8002704:	074a      	lsls	r2, r1, #29
 8002706:	432a      	orrs	r2, r5
 8002708:	057c      	lsls	r4, r7, #21
 800270a:	024d      	lsls	r5, r1, #9
 800270c:	0b2d      	lsrs	r5, r5, #12
 800270e:	0d64      	lsrs	r4, r4, #21
 8002710:	401e      	ands	r6, r3
 8002712:	0524      	lsls	r4, r4, #20
 8002714:	432c      	orrs	r4, r5
 8002716:	07f6      	lsls	r6, r6, #31
 8002718:	4334      	orrs	r4, r6
 800271a:	0010      	movs	r0, r2
 800271c:	0021      	movs	r1, r4
 800271e:	b005      	add	sp, #20
 8002720:	bcf0      	pop	{r4, r5, r6, r7}
 8002722:	46bb      	mov	fp, r7
 8002724:	46b2      	mov	sl, r6
 8002726:	46a9      	mov	r9, r5
 8002728:	46a0      	mov	r8, r4
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272c:	2d00      	cmp	r5, #0
 800272e:	dc00      	bgt.n	8002732 <__aeabi_dsub+0x172>
 8002730:	e2d0      	b.n	8002cd4 <__aeabi_dsub+0x714>
 8002732:	4649      	mov	r1, r9
 8002734:	2900      	cmp	r1, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x17a>
 8002738:	e0d4      	b.n	80028e4 <__aeabi_dsub+0x324>
 800273a:	4661      	mov	r1, ip
 800273c:	9b02      	ldr	r3, [sp, #8]
 800273e:	4319      	orrs	r1, r3
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x184>
 8002742:	e12b      	b.n	800299c <__aeabi_dsub+0x3dc>
 8002744:	1e69      	subs	r1, r5, #1
 8002746:	2d01      	cmp	r5, #1
 8002748:	d100      	bne.n	800274c <__aeabi_dsub+0x18c>
 800274a:	e1d9      	b.n	8002b00 <__aeabi_dsub+0x540>
 800274c:	4295      	cmp	r5, r2
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x192>
 8002750:	e10a      	b.n	8002968 <__aeabi_dsub+0x3a8>
 8002752:	2501      	movs	r5, #1
 8002754:	2938      	cmp	r1, #56	@ 0x38
 8002756:	dc17      	bgt.n	8002788 <__aeabi_dsub+0x1c8>
 8002758:	468a      	mov	sl, r1
 800275a:	4653      	mov	r3, sl
 800275c:	2b1f      	cmp	r3, #31
 800275e:	dd00      	ble.n	8002762 <__aeabi_dsub+0x1a2>
 8002760:	e1e7      	b.n	8002b32 <__aeabi_dsub+0x572>
 8002762:	2220      	movs	r2, #32
 8002764:	1ad2      	subs	r2, r2, r3
 8002766:	9b02      	ldr	r3, [sp, #8]
 8002768:	4661      	mov	r1, ip
 800276a:	4093      	lsls	r3, r2
 800276c:	001d      	movs	r5, r3
 800276e:	4653      	mov	r3, sl
 8002770:	40d9      	lsrs	r1, r3
 8002772:	4663      	mov	r3, ip
 8002774:	4093      	lsls	r3, r2
 8002776:	001a      	movs	r2, r3
 8002778:	430d      	orrs	r5, r1
 800277a:	1e51      	subs	r1, r2, #1
 800277c:	418a      	sbcs	r2, r1
 800277e:	4653      	mov	r3, sl
 8002780:	4315      	orrs	r5, r2
 8002782:	9a02      	ldr	r2, [sp, #8]
 8002784:	40da      	lsrs	r2, r3
 8002786:	18a4      	adds	r4, r4, r2
 8002788:	182d      	adds	r5, r5, r0
 800278a:	4285      	cmp	r5, r0
 800278c:	4180      	sbcs	r0, r0
 800278e:	4240      	negs	r0, r0
 8002790:	1824      	adds	r4, r4, r0
 8002792:	0223      	lsls	r3, r4, #8
 8002794:	d400      	bmi.n	8002798 <__aeabi_dsub+0x1d8>
 8002796:	e0b6      	b.n	8002906 <__aeabi_dsub+0x346>
 8002798:	4b5e      	ldr	r3, [pc, #376]	@ (8002914 <__aeabi_dsub+0x354>)
 800279a:	3701      	adds	r7, #1
 800279c:	429f      	cmp	r7, r3
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x1e2>
 80027a0:	e0ad      	b.n	80028fe <__aeabi_dsub+0x33e>
 80027a2:	2101      	movs	r1, #1
 80027a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002918 <__aeabi_dsub+0x358>)
 80027a6:	086a      	lsrs	r2, r5, #1
 80027a8:	401c      	ands	r4, r3
 80027aa:	4029      	ands	r1, r5
 80027ac:	430a      	orrs	r2, r1
 80027ae:	07e5      	lsls	r5, r4, #31
 80027b0:	4315      	orrs	r5, r2
 80027b2:	0864      	lsrs	r4, r4, #1
 80027b4:	e78d      	b.n	80026d2 <__aeabi_dsub+0x112>
 80027b6:	4a59      	ldr	r2, [pc, #356]	@ (800291c <__aeabi_dsub+0x35c>)
 80027b8:	9b02      	ldr	r3, [sp, #8]
 80027ba:	4692      	mov	sl, r2
 80027bc:	4662      	mov	r2, ip
 80027be:	44ba      	add	sl, r7
 80027c0:	431a      	orrs	r2, r3
 80027c2:	d02c      	beq.n	800281e <__aeabi_dsub+0x25e>
 80027c4:	428e      	cmp	r6, r1
 80027c6:	d02e      	beq.n	8002826 <__aeabi_dsub+0x266>
 80027c8:	4652      	mov	r2, sl
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d060      	beq.n	8002890 <__aeabi_dsub+0x2d0>
 80027ce:	2f00      	cmp	r7, #0
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x214>
 80027d2:	e0db      	b.n	800298c <__aeabi_dsub+0x3cc>
 80027d4:	4663      	mov	r3, ip
 80027d6:	000e      	movs	r6, r1
 80027d8:	9c02      	ldr	r4, [sp, #8]
 80027da:	08d8      	lsrs	r0, r3, #3
 80027dc:	0762      	lsls	r2, r4, #29
 80027de:	4302      	orrs	r2, r0
 80027e0:	08e4      	lsrs	r4, r4, #3
 80027e2:	0013      	movs	r3, r2
 80027e4:	4323      	orrs	r3, r4
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x22a>
 80027e8:	e254      	b.n	8002c94 <__aeabi_dsub+0x6d4>
 80027ea:	2580      	movs	r5, #128	@ 0x80
 80027ec:	032d      	lsls	r5, r5, #12
 80027ee:	4325      	orrs	r5, r4
 80027f0:	032d      	lsls	r5, r5, #12
 80027f2:	4c48      	ldr	r4, [pc, #288]	@ (8002914 <__aeabi_dsub+0x354>)
 80027f4:	0b2d      	lsrs	r5, r5, #12
 80027f6:	e78c      	b.n	8002712 <__aeabi_dsub+0x152>
 80027f8:	4661      	mov	r1, ip
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	4319      	orrs	r1, r3
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x242>
 8002800:	e0cc      	b.n	800299c <__aeabi_dsub+0x3dc>
 8002802:	0029      	movs	r1, r5
 8002804:	3901      	subs	r1, #1
 8002806:	2d01      	cmp	r5, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x24c>
 800280a:	e188      	b.n	8002b1e <__aeabi_dsub+0x55e>
 800280c:	4295      	cmp	r5, r2
 800280e:	d100      	bne.n	8002812 <__aeabi_dsub+0x252>
 8002810:	e0aa      	b.n	8002968 <__aeabi_dsub+0x3a8>
 8002812:	2501      	movs	r5, #1
 8002814:	2938      	cmp	r1, #56	@ 0x38
 8002816:	dd00      	ble.n	800281a <__aeabi_dsub+0x25a>
 8002818:	e72f      	b.n	800267a <__aeabi_dsub+0xba>
 800281a:	468a      	mov	sl, r1
 800281c:	e718      	b.n	8002650 <__aeabi_dsub+0x90>
 800281e:	2201      	movs	r2, #1
 8002820:	4051      	eors	r1, r2
 8002822:	428e      	cmp	r6, r1
 8002824:	d1d0      	bne.n	80027c8 <__aeabi_dsub+0x208>
 8002826:	4653      	mov	r3, sl
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <__aeabi_dsub+0x26e>
 800282c:	e0be      	b.n	80029ac <__aeabi_dsub+0x3ec>
 800282e:	2f00      	cmp	r7, #0
 8002830:	d000      	beq.n	8002834 <__aeabi_dsub+0x274>
 8002832:	e138      	b.n	8002aa6 <__aeabi_dsub+0x4e6>
 8002834:	46ca      	mov	sl, r9
 8002836:	0022      	movs	r2, r4
 8002838:	4302      	orrs	r2, r0
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x27e>
 800283c:	e1e2      	b.n	8002c04 <__aeabi_dsub+0x644>
 800283e:	4653      	mov	r3, sl
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x288>
 8002846:	e20d      	b.n	8002c64 <__aeabi_dsub+0x6a4>
 8002848:	4a32      	ldr	r2, [pc, #200]	@ (8002914 <__aeabi_dsub+0x354>)
 800284a:	4592      	cmp	sl, r2
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x290>
 800284e:	e1d2      	b.n	8002bf6 <__aeabi_dsub+0x636>
 8002850:	2701      	movs	r7, #1
 8002852:	2938      	cmp	r1, #56	@ 0x38
 8002854:	dc13      	bgt.n	800287e <__aeabi_dsub+0x2be>
 8002856:	291f      	cmp	r1, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x29c>
 800285a:	e1ee      	b.n	8002c3a <__aeabi_dsub+0x67a>
 800285c:	2220      	movs	r2, #32
 800285e:	9b02      	ldr	r3, [sp, #8]
 8002860:	1a52      	subs	r2, r2, r1
 8002862:	0025      	movs	r5, r4
 8002864:	0007      	movs	r7, r0
 8002866:	469a      	mov	sl, r3
 8002868:	40cc      	lsrs	r4, r1
 800286a:	4090      	lsls	r0, r2
 800286c:	4095      	lsls	r5, r2
 800286e:	40cf      	lsrs	r7, r1
 8002870:	44a2      	add	sl, r4
 8002872:	1e42      	subs	r2, r0, #1
 8002874:	4190      	sbcs	r0, r2
 8002876:	4653      	mov	r3, sl
 8002878:	432f      	orrs	r7, r5
 800287a:	4307      	orrs	r7, r0
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	003d      	movs	r5, r7
 8002880:	4465      	add	r5, ip
 8002882:	4565      	cmp	r5, ip
 8002884:	4192      	sbcs	r2, r2
 8002886:	9b02      	ldr	r3, [sp, #8]
 8002888:	4252      	negs	r2, r2
 800288a:	464f      	mov	r7, r9
 800288c:	18d4      	adds	r4, r2, r3
 800288e:	e780      	b.n	8002792 <__aeabi_dsub+0x1d2>
 8002890:	4a23      	ldr	r2, [pc, #140]	@ (8002920 <__aeabi_dsub+0x360>)
 8002892:	1c7d      	adds	r5, r7, #1
 8002894:	4215      	tst	r5, r2
 8002896:	d000      	beq.n	800289a <__aeabi_dsub+0x2da>
 8002898:	e0aa      	b.n	80029f0 <__aeabi_dsub+0x430>
 800289a:	4662      	mov	r2, ip
 800289c:	0025      	movs	r5, r4
 800289e:	9b02      	ldr	r3, [sp, #8]
 80028a0:	4305      	orrs	r5, r0
 80028a2:	431a      	orrs	r2, r3
 80028a4:	2f00      	cmp	r7, #0
 80028a6:	d000      	beq.n	80028aa <__aeabi_dsub+0x2ea>
 80028a8:	e0f5      	b.n	8002a96 <__aeabi_dsub+0x4d6>
 80028aa:	2d00      	cmp	r5, #0
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x2f0>
 80028ae:	e16b      	b.n	8002b88 <__aeabi_dsub+0x5c8>
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x2f6>
 80028b4:	e152      	b.n	8002b5c <__aeabi_dsub+0x59c>
 80028b6:	4663      	mov	r3, ip
 80028b8:	1ac5      	subs	r5, r0, r3
 80028ba:	9b02      	ldr	r3, [sp, #8]
 80028bc:	1ae2      	subs	r2, r4, r3
 80028be:	42a8      	cmp	r0, r5
 80028c0:	419b      	sbcs	r3, r3
 80028c2:	425b      	negs	r3, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	021a      	lsls	r2, r3, #8
 80028c8:	d400      	bmi.n	80028cc <__aeabi_dsub+0x30c>
 80028ca:	e1d5      	b.n	8002c78 <__aeabi_dsub+0x6b8>
 80028cc:	4663      	mov	r3, ip
 80028ce:	1a1d      	subs	r5, r3, r0
 80028d0:	45ac      	cmp	ip, r5
 80028d2:	4192      	sbcs	r2, r2
 80028d4:	2601      	movs	r6, #1
 80028d6:	9b02      	ldr	r3, [sp, #8]
 80028d8:	4252      	negs	r2, r2
 80028da:	1b1c      	subs	r4, r3, r4
 80028dc:	4688      	mov	r8, r1
 80028de:	1aa4      	subs	r4, r4, r2
 80028e0:	400e      	ands	r6, r1
 80028e2:	e6f6      	b.n	80026d2 <__aeabi_dsub+0x112>
 80028e4:	4297      	cmp	r7, r2
 80028e6:	d03f      	beq.n	8002968 <__aeabi_dsub+0x3a8>
 80028e8:	4652      	mov	r2, sl
 80028ea:	2501      	movs	r5, #1
 80028ec:	2a38      	cmp	r2, #56	@ 0x38
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0x332>
 80028f0:	e74a      	b.n	8002788 <__aeabi_dsub+0x1c8>
 80028f2:	2280      	movs	r2, #128	@ 0x80
 80028f4:	9b02      	ldr	r3, [sp, #8]
 80028f6:	0412      	lsls	r2, r2, #16
 80028f8:	4313      	orrs	r3, r2
 80028fa:	9302      	str	r3, [sp, #8]
 80028fc:	e72d      	b.n	800275a <__aeabi_dsub+0x19a>
 80028fe:	003c      	movs	r4, r7
 8002900:	2500      	movs	r5, #0
 8002902:	2200      	movs	r2, #0
 8002904:	e705      	b.n	8002712 <__aeabi_dsub+0x152>
 8002906:	2307      	movs	r3, #7
 8002908:	402b      	ands	r3, r5
 800290a:	2b00      	cmp	r3, #0
 800290c:	d000      	beq.n	8002910 <__aeabi_dsub+0x350>
 800290e:	e6e2      	b.n	80026d6 <__aeabi_dsub+0x116>
 8002910:	e06b      	b.n	80029ea <__aeabi_dsub+0x42a>
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff
 8002918:	ff7fffff 	.word	0xff7fffff
 800291c:	fffff801 	.word	0xfffff801
 8002920:	000007fe 	.word	0x000007fe
 8002924:	0028      	movs	r0, r5
 8002926:	f000 fb35 	bl	8002f94 <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3318      	adds	r3, #24
 800292e:	2b1f      	cmp	r3, #31
 8002930:	dc00      	bgt.n	8002934 <__aeabi_dsub+0x374>
 8002932:	e6b4      	b.n	800269e <__aeabi_dsub+0xde>
 8002934:	002a      	movs	r2, r5
 8002936:	3808      	subs	r0, #8
 8002938:	4082      	lsls	r2, r0
 800293a:	429f      	cmp	r7, r3
 800293c:	dd00      	ble.n	8002940 <__aeabi_dsub+0x380>
 800293e:	e0b9      	b.n	8002ab4 <__aeabi_dsub+0x4f4>
 8002940:	1bdb      	subs	r3, r3, r7
 8002942:	1c58      	adds	r0, r3, #1
 8002944:	281f      	cmp	r0, #31
 8002946:	dc00      	bgt.n	800294a <__aeabi_dsub+0x38a>
 8002948:	e1a0      	b.n	8002c8c <__aeabi_dsub+0x6cc>
 800294a:	0015      	movs	r5, r2
 800294c:	3b1f      	subs	r3, #31
 800294e:	40dd      	lsrs	r5, r3
 8002950:	2820      	cmp	r0, #32
 8002952:	d005      	beq.n	8002960 <__aeabi_dsub+0x3a0>
 8002954:	2340      	movs	r3, #64	@ 0x40
 8002956:	1a1b      	subs	r3, r3, r0
 8002958:	409a      	lsls	r2, r3
 800295a:	1e53      	subs	r3, r2, #1
 800295c:	419a      	sbcs	r2, r3
 800295e:	4315      	orrs	r5, r2
 8002960:	2307      	movs	r3, #7
 8002962:	2700      	movs	r7, #0
 8002964:	402b      	ands	r3, r5
 8002966:	e7d0      	b.n	800290a <__aeabi_dsub+0x34a>
 8002968:	08c0      	lsrs	r0, r0, #3
 800296a:	0762      	lsls	r2, r4, #29
 800296c:	4302      	orrs	r2, r0
 800296e:	08e4      	lsrs	r4, r4, #3
 8002970:	e737      	b.n	80027e2 <__aeabi_dsub+0x222>
 8002972:	08ea      	lsrs	r2, r5, #3
 8002974:	0763      	lsls	r3, r4, #29
 8002976:	431a      	orrs	r2, r3
 8002978:	4bd3      	ldr	r3, [pc, #844]	@ (8002cc8 <__aeabi_dsub+0x708>)
 800297a:	08e4      	lsrs	r4, r4, #3
 800297c:	429f      	cmp	r7, r3
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x3c2>
 8002980:	e72f      	b.n	80027e2 <__aeabi_dsub+0x222>
 8002982:	0324      	lsls	r4, r4, #12
 8002984:	0b25      	lsrs	r5, r4, #12
 8002986:	057c      	lsls	r4, r7, #21
 8002988:	0d64      	lsrs	r4, r4, #21
 800298a:	e6c2      	b.n	8002712 <__aeabi_dsub+0x152>
 800298c:	46ca      	mov	sl, r9
 800298e:	0022      	movs	r2, r4
 8002990:	4302      	orrs	r2, r0
 8002992:	d158      	bne.n	8002a46 <__aeabi_dsub+0x486>
 8002994:	4663      	mov	r3, ip
 8002996:	000e      	movs	r6, r1
 8002998:	9c02      	ldr	r4, [sp, #8]
 800299a:	9303      	str	r3, [sp, #12]
 800299c:	9b03      	ldr	r3, [sp, #12]
 800299e:	4657      	mov	r7, sl
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	e7e7      	b.n	8002974 <__aeabi_dsub+0x3b4>
 80029a4:	4cc9      	ldr	r4, [pc, #804]	@ (8002ccc <__aeabi_dsub+0x70c>)
 80029a6:	1aff      	subs	r7, r7, r3
 80029a8:	4014      	ands	r4, r2
 80029aa:	e692      	b.n	80026d2 <__aeabi_dsub+0x112>
 80029ac:	4dc8      	ldr	r5, [pc, #800]	@ (8002cd0 <__aeabi_dsub+0x710>)
 80029ae:	1c7a      	adds	r2, r7, #1
 80029b0:	422a      	tst	r2, r5
 80029b2:	d000      	beq.n	80029b6 <__aeabi_dsub+0x3f6>
 80029b4:	e084      	b.n	8002ac0 <__aeabi_dsub+0x500>
 80029b6:	0022      	movs	r2, r4
 80029b8:	4302      	orrs	r2, r0
 80029ba:	2f00      	cmp	r7, #0
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dsub+0x400>
 80029be:	e0ef      	b.n	8002ba0 <__aeabi_dsub+0x5e0>
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x406>
 80029c4:	e0e5      	b.n	8002b92 <__aeabi_dsub+0x5d2>
 80029c6:	4662      	mov	r2, ip
 80029c8:	9902      	ldr	r1, [sp, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x410>
 80029ce:	e0c5      	b.n	8002b5c <__aeabi_dsub+0x59c>
 80029d0:	4663      	mov	r3, ip
 80029d2:	18c5      	adds	r5, r0, r3
 80029d4:	468c      	mov	ip, r1
 80029d6:	4285      	cmp	r5, r0
 80029d8:	4180      	sbcs	r0, r0
 80029da:	4464      	add	r4, ip
 80029dc:	4240      	negs	r0, r0
 80029de:	1824      	adds	r4, r4, r0
 80029e0:	0223      	lsls	r3, r4, #8
 80029e2:	d502      	bpl.n	80029ea <__aeabi_dsub+0x42a>
 80029e4:	4bb9      	ldr	r3, [pc, #740]	@ (8002ccc <__aeabi_dsub+0x70c>)
 80029e6:	3701      	adds	r7, #1
 80029e8:	401c      	ands	r4, r3
 80029ea:	46ba      	mov	sl, r7
 80029ec:	9503      	str	r5, [sp, #12]
 80029ee:	e7d5      	b.n	800299c <__aeabi_dsub+0x3dc>
 80029f0:	4662      	mov	r2, ip
 80029f2:	1a85      	subs	r5, r0, r2
 80029f4:	42a8      	cmp	r0, r5
 80029f6:	4192      	sbcs	r2, r2
 80029f8:	4252      	negs	r2, r2
 80029fa:	4691      	mov	r9, r2
 80029fc:	9b02      	ldr	r3, [sp, #8]
 80029fe:	1ae3      	subs	r3, r4, r3
 8002a00:	001a      	movs	r2, r3
 8002a02:	464b      	mov	r3, r9
 8002a04:	1ad2      	subs	r2, r2, r3
 8002a06:	0013      	movs	r3, r2
 8002a08:	4691      	mov	r9, r2
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	d46c      	bmi.n	8002ae8 <__aeabi_dsub+0x528>
 8002a0e:	464a      	mov	r2, r9
 8002a10:	464c      	mov	r4, r9
 8002a12:	432a      	orrs	r2, r5
 8002a14:	d000      	beq.n	8002a18 <__aeabi_dsub+0x458>
 8002a16:	e63a      	b.n	800268e <__aeabi_dsub+0xce>
 8002a18:	2600      	movs	r6, #0
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	2500      	movs	r5, #0
 8002a1e:	e678      	b.n	8002712 <__aeabi_dsub+0x152>
 8002a20:	9902      	ldr	r1, [sp, #8]
 8002a22:	4653      	mov	r3, sl
 8002a24:	000d      	movs	r5, r1
 8002a26:	3a20      	subs	r2, #32
 8002a28:	40d5      	lsrs	r5, r2
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d006      	beq.n	8002a3c <__aeabi_dsub+0x47c>
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	000b      	movs	r3, r1
 8002a34:	4093      	lsls	r3, r2
 8002a36:	4662      	mov	r2, ip
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	4693      	mov	fp, r2
 8002a3c:	465b      	mov	r3, fp
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	4193      	sbcs	r3, r2
 8002a42:	431d      	orrs	r5, r3
 8002a44:	e619      	b.n	800267a <__aeabi_dsub+0xba>
 8002a46:	4653      	mov	r3, sl
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x490>
 8002a4e:	e0c6      	b.n	8002bde <__aeabi_dsub+0x61e>
 8002a50:	4e9d      	ldr	r6, [pc, #628]	@ (8002cc8 <__aeabi_dsub+0x708>)
 8002a52:	45b2      	cmp	sl, r6
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x498>
 8002a56:	e6bd      	b.n	80027d4 <__aeabi_dsub+0x214>
 8002a58:	4688      	mov	r8, r1
 8002a5a:	000e      	movs	r6, r1
 8002a5c:	2501      	movs	r5, #1
 8002a5e:	2a38      	cmp	r2, #56	@ 0x38
 8002a60:	dc10      	bgt.n	8002a84 <__aeabi_dsub+0x4c4>
 8002a62:	2a1f      	cmp	r2, #31
 8002a64:	dc7f      	bgt.n	8002b66 <__aeabi_dsub+0x5a6>
 8002a66:	2120      	movs	r1, #32
 8002a68:	0025      	movs	r5, r4
 8002a6a:	1a89      	subs	r1, r1, r2
 8002a6c:	0007      	movs	r7, r0
 8002a6e:	4088      	lsls	r0, r1
 8002a70:	408d      	lsls	r5, r1
 8002a72:	40d7      	lsrs	r7, r2
 8002a74:	40d4      	lsrs	r4, r2
 8002a76:	1e41      	subs	r1, r0, #1
 8002a78:	4188      	sbcs	r0, r1
 8002a7a:	9b02      	ldr	r3, [sp, #8]
 8002a7c:	433d      	orrs	r5, r7
 8002a7e:	1b1b      	subs	r3, r3, r4
 8002a80:	4305      	orrs	r5, r0
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	4662      	mov	r2, ip
 8002a86:	1b55      	subs	r5, r2, r5
 8002a88:	45ac      	cmp	ip, r5
 8002a8a:	4192      	sbcs	r2, r2
 8002a8c:	9b02      	ldr	r3, [sp, #8]
 8002a8e:	4252      	negs	r2, r2
 8002a90:	464f      	mov	r7, r9
 8002a92:	1a9c      	subs	r4, r3, r2
 8002a94:	e5f6      	b.n	8002684 <__aeabi_dsub+0xc4>
 8002a96:	2d00      	cmp	r5, #0
 8002a98:	d000      	beq.n	8002a9c <__aeabi_dsub+0x4dc>
 8002a9a:	e0b7      	b.n	8002c0c <__aeabi_dsub+0x64c>
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x4e2>
 8002aa0:	e0f0      	b.n	8002c84 <__aeabi_dsub+0x6c4>
 8002aa2:	2601      	movs	r6, #1
 8002aa4:	400e      	ands	r6, r1
 8002aa6:	4663      	mov	r3, ip
 8002aa8:	9802      	ldr	r0, [sp, #8]
 8002aaa:	08d9      	lsrs	r1, r3, #3
 8002aac:	0742      	lsls	r2, r0, #29
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	08c4      	lsrs	r4, r0, #3
 8002ab2:	e696      	b.n	80027e2 <__aeabi_dsub+0x222>
 8002ab4:	4c85      	ldr	r4, [pc, #532]	@ (8002ccc <__aeabi_dsub+0x70c>)
 8002ab6:	1aff      	subs	r7, r7, r3
 8002ab8:	4014      	ands	r4, r2
 8002aba:	0762      	lsls	r2, r4, #29
 8002abc:	08e4      	lsrs	r4, r4, #3
 8002abe:	e760      	b.n	8002982 <__aeabi_dsub+0x3c2>
 8002ac0:	4981      	ldr	r1, [pc, #516]	@ (8002cc8 <__aeabi_dsub+0x708>)
 8002ac2:	428a      	cmp	r2, r1
 8002ac4:	d100      	bne.n	8002ac8 <__aeabi_dsub+0x508>
 8002ac6:	e0c9      	b.n	8002c5c <__aeabi_dsub+0x69c>
 8002ac8:	4663      	mov	r3, ip
 8002aca:	18c1      	adds	r1, r0, r3
 8002acc:	4281      	cmp	r1, r0
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	9b02      	ldr	r3, [sp, #8]
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	18e3      	adds	r3, r4, r3
 8002ad6:	181b      	adds	r3, r3, r0
 8002ad8:	07dd      	lsls	r5, r3, #31
 8002ada:	085c      	lsrs	r4, r3, #1
 8002adc:	2307      	movs	r3, #7
 8002ade:	0849      	lsrs	r1, r1, #1
 8002ae0:	430d      	orrs	r5, r1
 8002ae2:	0017      	movs	r7, r2
 8002ae4:	402b      	ands	r3, r5
 8002ae6:	e710      	b.n	800290a <__aeabi_dsub+0x34a>
 8002ae8:	4663      	mov	r3, ip
 8002aea:	1a1d      	subs	r5, r3, r0
 8002aec:	45ac      	cmp	ip, r5
 8002aee:	4192      	sbcs	r2, r2
 8002af0:	2601      	movs	r6, #1
 8002af2:	9b02      	ldr	r3, [sp, #8]
 8002af4:	4252      	negs	r2, r2
 8002af6:	1b1c      	subs	r4, r3, r4
 8002af8:	4688      	mov	r8, r1
 8002afa:	1aa4      	subs	r4, r4, r2
 8002afc:	400e      	ands	r6, r1
 8002afe:	e5c6      	b.n	800268e <__aeabi_dsub+0xce>
 8002b00:	4663      	mov	r3, ip
 8002b02:	18c5      	adds	r5, r0, r3
 8002b04:	9b02      	ldr	r3, [sp, #8]
 8002b06:	4285      	cmp	r5, r0
 8002b08:	4180      	sbcs	r0, r0
 8002b0a:	469c      	mov	ip, r3
 8002b0c:	4240      	negs	r0, r0
 8002b0e:	4464      	add	r4, ip
 8002b10:	1824      	adds	r4, r4, r0
 8002b12:	2701      	movs	r7, #1
 8002b14:	0223      	lsls	r3, r4, #8
 8002b16:	d400      	bmi.n	8002b1a <__aeabi_dsub+0x55a>
 8002b18:	e6f5      	b.n	8002906 <__aeabi_dsub+0x346>
 8002b1a:	2702      	movs	r7, #2
 8002b1c:	e641      	b.n	80027a2 <__aeabi_dsub+0x1e2>
 8002b1e:	4663      	mov	r3, ip
 8002b20:	1ac5      	subs	r5, r0, r3
 8002b22:	42a8      	cmp	r0, r5
 8002b24:	4180      	sbcs	r0, r0
 8002b26:	9b02      	ldr	r3, [sp, #8]
 8002b28:	4240      	negs	r0, r0
 8002b2a:	1ae4      	subs	r4, r4, r3
 8002b2c:	2701      	movs	r7, #1
 8002b2e:	1a24      	subs	r4, r4, r0
 8002b30:	e5a8      	b.n	8002684 <__aeabi_dsub+0xc4>
 8002b32:	9d02      	ldr	r5, [sp, #8]
 8002b34:	4652      	mov	r2, sl
 8002b36:	002b      	movs	r3, r5
 8002b38:	3a20      	subs	r2, #32
 8002b3a:	40d3      	lsrs	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	4653      	mov	r3, sl
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d006      	beq.n	8002b52 <__aeabi_dsub+0x592>
 8002b44:	2240      	movs	r2, #64	@ 0x40
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	002b      	movs	r3, r5
 8002b4a:	4093      	lsls	r3, r2
 8002b4c:	4662      	mov	r2, ip
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	4693      	mov	fp, r2
 8002b52:	465d      	mov	r5, fp
 8002b54:	1e6b      	subs	r3, r5, #1
 8002b56:	419d      	sbcs	r5, r3
 8002b58:	430d      	orrs	r5, r1
 8002b5a:	e615      	b.n	8002788 <__aeabi_dsub+0x1c8>
 8002b5c:	0762      	lsls	r2, r4, #29
 8002b5e:	08c0      	lsrs	r0, r0, #3
 8002b60:	4302      	orrs	r2, r0
 8002b62:	08e4      	lsrs	r4, r4, #3
 8002b64:	e70d      	b.n	8002982 <__aeabi_dsub+0x3c2>
 8002b66:	0011      	movs	r1, r2
 8002b68:	0027      	movs	r7, r4
 8002b6a:	3920      	subs	r1, #32
 8002b6c:	40cf      	lsrs	r7, r1
 8002b6e:	2a20      	cmp	r2, #32
 8002b70:	d005      	beq.n	8002b7e <__aeabi_dsub+0x5be>
 8002b72:	2140      	movs	r1, #64	@ 0x40
 8002b74:	1a8a      	subs	r2, r1, r2
 8002b76:	4094      	lsls	r4, r2
 8002b78:	0025      	movs	r5, r4
 8002b7a:	4305      	orrs	r5, r0
 8002b7c:	9503      	str	r5, [sp, #12]
 8002b7e:	9d03      	ldr	r5, [sp, #12]
 8002b80:	1e6a      	subs	r2, r5, #1
 8002b82:	4195      	sbcs	r5, r2
 8002b84:	433d      	orrs	r5, r7
 8002b86:	e77d      	b.n	8002a84 <__aeabi_dsub+0x4c4>
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	d100      	bne.n	8002b8e <__aeabi_dsub+0x5ce>
 8002b8c:	e744      	b.n	8002a18 <__aeabi_dsub+0x458>
 8002b8e:	2601      	movs	r6, #1
 8002b90:	400e      	ands	r6, r1
 8002b92:	4663      	mov	r3, ip
 8002b94:	08d9      	lsrs	r1, r3, #3
 8002b96:	9b02      	ldr	r3, [sp, #8]
 8002b98:	075a      	lsls	r2, r3, #29
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	08dc      	lsrs	r4, r3, #3
 8002b9e:	e6f0      	b.n	8002982 <__aeabi_dsub+0x3c2>
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d028      	beq.n	8002bf6 <__aeabi_dsub+0x636>
 8002ba4:	4662      	mov	r2, ip
 8002ba6:	9f02      	ldr	r7, [sp, #8]
 8002ba8:	08c0      	lsrs	r0, r0, #3
 8002baa:	433a      	orrs	r2, r7
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x5f0>
 8002bae:	e6dc      	b.n	800296a <__aeabi_dsub+0x3aa>
 8002bb0:	0762      	lsls	r2, r4, #29
 8002bb2:	4310      	orrs	r0, r2
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	08e4      	lsrs	r4, r4, #3
 8002bb8:	0312      	lsls	r2, r2, #12
 8002bba:	4214      	tst	r4, r2
 8002bbc:	d009      	beq.n	8002bd2 <__aeabi_dsub+0x612>
 8002bbe:	08fd      	lsrs	r5, r7, #3
 8002bc0:	4215      	tst	r5, r2
 8002bc2:	d106      	bne.n	8002bd2 <__aeabi_dsub+0x612>
 8002bc4:	4663      	mov	r3, ip
 8002bc6:	2601      	movs	r6, #1
 8002bc8:	002c      	movs	r4, r5
 8002bca:	08d8      	lsrs	r0, r3, #3
 8002bcc:	077b      	lsls	r3, r7, #29
 8002bce:	4318      	orrs	r0, r3
 8002bd0:	400e      	ands	r6, r1
 8002bd2:	0f42      	lsrs	r2, r0, #29
 8002bd4:	00c0      	lsls	r0, r0, #3
 8002bd6:	08c0      	lsrs	r0, r0, #3
 8002bd8:	0752      	lsls	r2, r2, #29
 8002bda:	4302      	orrs	r2, r0
 8002bdc:	e601      	b.n	80027e2 <__aeabi_dsub+0x222>
 8002bde:	4663      	mov	r3, ip
 8002be0:	1a1d      	subs	r5, r3, r0
 8002be2:	45ac      	cmp	ip, r5
 8002be4:	4192      	sbcs	r2, r2
 8002be6:	9b02      	ldr	r3, [sp, #8]
 8002be8:	4252      	negs	r2, r2
 8002bea:	1b1c      	subs	r4, r3, r4
 8002bec:	000e      	movs	r6, r1
 8002bee:	4688      	mov	r8, r1
 8002bf0:	2701      	movs	r7, #1
 8002bf2:	1aa4      	subs	r4, r4, r2
 8002bf4:	e546      	b.n	8002684 <__aeabi_dsub+0xc4>
 8002bf6:	4663      	mov	r3, ip
 8002bf8:	08d9      	lsrs	r1, r3, #3
 8002bfa:	9b02      	ldr	r3, [sp, #8]
 8002bfc:	075a      	lsls	r2, r3, #29
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	08dc      	lsrs	r4, r3, #3
 8002c02:	e5ee      	b.n	80027e2 <__aeabi_dsub+0x222>
 8002c04:	4663      	mov	r3, ip
 8002c06:	9c02      	ldr	r4, [sp, #8]
 8002c08:	9303      	str	r3, [sp, #12]
 8002c0a:	e6c7      	b.n	800299c <__aeabi_dsub+0x3dc>
 8002c0c:	08c0      	lsrs	r0, r0, #3
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d100      	bne.n	8002c14 <__aeabi_dsub+0x654>
 8002c12:	e6aa      	b.n	800296a <__aeabi_dsub+0x3aa>
 8002c14:	0762      	lsls	r2, r4, #29
 8002c16:	4310      	orrs	r0, r2
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	08e4      	lsrs	r4, r4, #3
 8002c1c:	0312      	lsls	r2, r2, #12
 8002c1e:	4214      	tst	r4, r2
 8002c20:	d0d7      	beq.n	8002bd2 <__aeabi_dsub+0x612>
 8002c22:	9f02      	ldr	r7, [sp, #8]
 8002c24:	08fd      	lsrs	r5, r7, #3
 8002c26:	4215      	tst	r5, r2
 8002c28:	d1d3      	bne.n	8002bd2 <__aeabi_dsub+0x612>
 8002c2a:	4663      	mov	r3, ip
 8002c2c:	2601      	movs	r6, #1
 8002c2e:	08d8      	lsrs	r0, r3, #3
 8002c30:	077b      	lsls	r3, r7, #29
 8002c32:	002c      	movs	r4, r5
 8002c34:	4318      	orrs	r0, r3
 8002c36:	400e      	ands	r6, r1
 8002c38:	e7cb      	b.n	8002bd2 <__aeabi_dsub+0x612>
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	0027      	movs	r7, r4
 8002c3e:	3a20      	subs	r2, #32
 8002c40:	40d7      	lsrs	r7, r2
 8002c42:	2920      	cmp	r1, #32
 8002c44:	d005      	beq.n	8002c52 <__aeabi_dsub+0x692>
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	1a52      	subs	r2, r2, r1
 8002c4a:	4094      	lsls	r4, r2
 8002c4c:	0025      	movs	r5, r4
 8002c4e:	4305      	orrs	r5, r0
 8002c50:	9503      	str	r5, [sp, #12]
 8002c52:	9d03      	ldr	r5, [sp, #12]
 8002c54:	1e6a      	subs	r2, r5, #1
 8002c56:	4195      	sbcs	r5, r2
 8002c58:	432f      	orrs	r7, r5
 8002c5a:	e610      	b.n	800287e <__aeabi_dsub+0x2be>
 8002c5c:	0014      	movs	r4, r2
 8002c5e:	2500      	movs	r5, #0
 8002c60:	2200      	movs	r2, #0
 8002c62:	e556      	b.n	8002712 <__aeabi_dsub+0x152>
 8002c64:	9b02      	ldr	r3, [sp, #8]
 8002c66:	4460      	add	r0, ip
 8002c68:	4699      	mov	r9, r3
 8002c6a:	4560      	cmp	r0, ip
 8002c6c:	4192      	sbcs	r2, r2
 8002c6e:	444c      	add	r4, r9
 8002c70:	4252      	negs	r2, r2
 8002c72:	0005      	movs	r5, r0
 8002c74:	18a4      	adds	r4, r4, r2
 8002c76:	e74c      	b.n	8002b12 <__aeabi_dsub+0x552>
 8002c78:	001a      	movs	r2, r3
 8002c7a:	001c      	movs	r4, r3
 8002c7c:	432a      	orrs	r2, r5
 8002c7e:	d000      	beq.n	8002c82 <__aeabi_dsub+0x6c2>
 8002c80:	e6b3      	b.n	80029ea <__aeabi_dsub+0x42a>
 8002c82:	e6c9      	b.n	8002a18 <__aeabi_dsub+0x458>
 8002c84:	2480      	movs	r4, #128	@ 0x80
 8002c86:	2600      	movs	r6, #0
 8002c88:	0324      	lsls	r4, r4, #12
 8002c8a:	e5ae      	b.n	80027ea <__aeabi_dsub+0x22a>
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	2500      	movs	r5, #0
 8002c90:	1a09      	subs	r1, r1, r0
 8002c92:	e517      	b.n	80026c4 <__aeabi_dsub+0x104>
 8002c94:	2200      	movs	r2, #0
 8002c96:	2500      	movs	r5, #0
 8002c98:	4c0b      	ldr	r4, [pc, #44]	@ (8002cc8 <__aeabi_dsub+0x708>)
 8002c9a:	e53a      	b.n	8002712 <__aeabi_dsub+0x152>
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	d100      	bne.n	8002ca2 <__aeabi_dsub+0x6e2>
 8002ca0:	e5f6      	b.n	8002890 <__aeabi_dsub+0x2d0>
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	1bda      	subs	r2, r3, r7
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	2f00      	cmp	r7, #0
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x6ee>
 8002cac:	e66f      	b.n	800298e <__aeabi_dsub+0x3ce>
 8002cae:	2a38      	cmp	r2, #56	@ 0x38
 8002cb0:	dc05      	bgt.n	8002cbe <__aeabi_dsub+0x6fe>
 8002cb2:	2680      	movs	r6, #128	@ 0x80
 8002cb4:	0436      	lsls	r6, r6, #16
 8002cb6:	4334      	orrs	r4, r6
 8002cb8:	4688      	mov	r8, r1
 8002cba:	000e      	movs	r6, r1
 8002cbc:	e6d1      	b.n	8002a62 <__aeabi_dsub+0x4a2>
 8002cbe:	4688      	mov	r8, r1
 8002cc0:	000e      	movs	r6, r1
 8002cc2:	2501      	movs	r5, #1
 8002cc4:	e6de      	b.n	8002a84 <__aeabi_dsub+0x4c4>
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	000007ff 	.word	0x000007ff
 8002ccc:	ff7fffff 	.word	0xff7fffff
 8002cd0:	000007fe 	.word	0x000007fe
 8002cd4:	2d00      	cmp	r5, #0
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x71a>
 8002cd8:	e668      	b.n	80029ac <__aeabi_dsub+0x3ec>
 8002cda:	464b      	mov	r3, r9
 8002cdc:	1bd9      	subs	r1, r3, r7
 8002cde:	2f00      	cmp	r7, #0
 8002ce0:	d101      	bne.n	8002ce6 <__aeabi_dsub+0x726>
 8002ce2:	468a      	mov	sl, r1
 8002ce4:	e5a7      	b.n	8002836 <__aeabi_dsub+0x276>
 8002ce6:	2701      	movs	r7, #1
 8002ce8:	2938      	cmp	r1, #56	@ 0x38
 8002cea:	dd00      	ble.n	8002cee <__aeabi_dsub+0x72e>
 8002cec:	e5c7      	b.n	800287e <__aeabi_dsub+0x2be>
 8002cee:	2280      	movs	r2, #128	@ 0x80
 8002cf0:	0412      	lsls	r2, r2, #16
 8002cf2:	4314      	orrs	r4, r2
 8002cf4:	e5af      	b.n	8002856 <__aeabi_dsub+0x296>
 8002cf6:	46c0      	nop			@ (mov r8, r8)

08002cf8 <__aeabi_dcmpun>:
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	46c6      	mov	lr, r8
 8002cfc:	031e      	lsls	r6, r3, #12
 8002cfe:	0b36      	lsrs	r6, r6, #12
 8002d00:	46b0      	mov	r8, r6
 8002d02:	4e0d      	ldr	r6, [pc, #52]	@ (8002d38 <__aeabi_dcmpun+0x40>)
 8002d04:	030c      	lsls	r4, r1, #12
 8002d06:	004d      	lsls	r5, r1, #1
 8002d08:	005f      	lsls	r7, r3, #1
 8002d0a:	b500      	push	{lr}
 8002d0c:	0b24      	lsrs	r4, r4, #12
 8002d0e:	0d6d      	lsrs	r5, r5, #21
 8002d10:	0d7f      	lsrs	r7, r7, #21
 8002d12:	42b5      	cmp	r5, r6
 8002d14:	d00b      	beq.n	8002d2e <__aeabi_dcmpun+0x36>
 8002d16:	4908      	ldr	r1, [pc, #32]	@ (8002d38 <__aeabi_dcmpun+0x40>)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	428f      	cmp	r7, r1
 8002d1c:	d104      	bne.n	8002d28 <__aeabi_dcmpun+0x30>
 8002d1e:	4646      	mov	r6, r8
 8002d20:	4316      	orrs	r6, r2
 8002d22:	0030      	movs	r0, r6
 8002d24:	1e43      	subs	r3, r0, #1
 8002d26:	4198      	sbcs	r0, r3
 8002d28:	bc80      	pop	{r7}
 8002d2a:	46b8      	mov	r8, r7
 8002d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d2e:	4304      	orrs	r4, r0
 8002d30:	2001      	movs	r0, #1
 8002d32:	2c00      	cmp	r4, #0
 8002d34:	d1f8      	bne.n	8002d28 <__aeabi_dcmpun+0x30>
 8002d36:	e7ee      	b.n	8002d16 <__aeabi_dcmpun+0x1e>
 8002d38:	000007ff 	.word	0x000007ff

08002d3c <__aeabi_d2iz>:
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	0002      	movs	r2, r0
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	4d16      	ldr	r5, [pc, #88]	@ (8002d9c <__aeabi_d2iz+0x60>)
 8002d44:	030c      	lsls	r4, r1, #12
 8002d46:	b082      	sub	sp, #8
 8002d48:	0049      	lsls	r1, r1, #1
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	0b24      	lsrs	r4, r4, #12
 8002d52:	0d49      	lsrs	r1, r1, #21
 8002d54:	0fde      	lsrs	r6, r3, #31
 8002d56:	42a9      	cmp	r1, r5
 8002d58:	dd04      	ble.n	8002d64 <__aeabi_d2iz+0x28>
 8002d5a:	4811      	ldr	r0, [pc, #68]	@ (8002da0 <__aeabi_d2iz+0x64>)
 8002d5c:	4281      	cmp	r1, r0
 8002d5e:	dd03      	ble.n	8002d68 <__aeabi_d2iz+0x2c>
 8002d60:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <__aeabi_d2iz+0x68>)
 8002d62:	18f0      	adds	r0, r6, r3
 8002d64:	b002      	add	sp, #8
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	2080      	movs	r0, #128	@ 0x80
 8002d6a:	0340      	lsls	r0, r0, #13
 8002d6c:	4320      	orrs	r0, r4
 8002d6e:	4c0e      	ldr	r4, [pc, #56]	@ (8002da8 <__aeabi_d2iz+0x6c>)
 8002d70:	1a64      	subs	r4, r4, r1
 8002d72:	2c1f      	cmp	r4, #31
 8002d74:	dd08      	ble.n	8002d88 <__aeabi_d2iz+0x4c>
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <__aeabi_d2iz+0x70>)
 8002d78:	1a5b      	subs	r3, r3, r1
 8002d7a:	40d8      	lsrs	r0, r3
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	4258      	negs	r0, r3
 8002d80:	2e00      	cmp	r6, #0
 8002d82:	d1ef      	bne.n	8002d64 <__aeabi_d2iz+0x28>
 8002d84:	0018      	movs	r0, r3
 8002d86:	e7ed      	b.n	8002d64 <__aeabi_d2iz+0x28>
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <__aeabi_d2iz+0x74>)
 8002d8a:	9a00      	ldr	r2, [sp, #0]
 8002d8c:	469c      	mov	ip, r3
 8002d8e:	0003      	movs	r3, r0
 8002d90:	4461      	add	r1, ip
 8002d92:	408b      	lsls	r3, r1
 8002d94:	40e2      	lsrs	r2, r4
 8002d96:	4313      	orrs	r3, r2
 8002d98:	e7f1      	b.n	8002d7e <__aeabi_d2iz+0x42>
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	000003fe 	.word	0x000003fe
 8002da0:	0000041d 	.word	0x0000041d
 8002da4:	7fffffff 	.word	0x7fffffff
 8002da8:	00000433 	.word	0x00000433
 8002dac:	00000413 	.word	0x00000413
 8002db0:	fffffbed 	.word	0xfffffbed

08002db4 <__aeabi_ui2d>:
 8002db4:	b510      	push	{r4, lr}
 8002db6:	1e04      	subs	r4, r0, #0
 8002db8:	d010      	beq.n	8002ddc <__aeabi_ui2d+0x28>
 8002dba:	f000 f8eb 	bl	8002f94 <__clzsi2>
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <__aeabi_ui2d+0x44>)
 8002dc0:	1a1b      	subs	r3, r3, r0
 8002dc2:	055b      	lsls	r3, r3, #21
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	280a      	cmp	r0, #10
 8002dc8:	dc0f      	bgt.n	8002dea <__aeabi_ui2d+0x36>
 8002dca:	220b      	movs	r2, #11
 8002dcc:	0021      	movs	r1, r4
 8002dce:	1a12      	subs	r2, r2, r0
 8002dd0:	40d1      	lsrs	r1, r2
 8002dd2:	3015      	adds	r0, #21
 8002dd4:	030a      	lsls	r2, r1, #12
 8002dd6:	4084      	lsls	r4, r0
 8002dd8:	0b12      	lsrs	r2, r2, #12
 8002dda:	e001      	b.n	8002de0 <__aeabi_ui2d+0x2c>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	4313      	orrs	r3, r2
 8002de4:	0020      	movs	r0, r4
 8002de6:	0019      	movs	r1, r3
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	0022      	movs	r2, r4
 8002dec:	380b      	subs	r0, #11
 8002dee:	4082      	lsls	r2, r0
 8002df0:	0312      	lsls	r2, r2, #12
 8002df2:	2400      	movs	r4, #0
 8002df4:	0b12      	lsrs	r2, r2, #12
 8002df6:	e7f3      	b.n	8002de0 <__aeabi_ui2d+0x2c>
 8002df8:	0000041e 	.word	0x0000041e

08002dfc <__aeabi_f2d>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	0242      	lsls	r2, r0, #9
 8002e00:	0043      	lsls	r3, r0, #1
 8002e02:	0fc4      	lsrs	r4, r0, #31
 8002e04:	20fe      	movs	r0, #254	@ 0xfe
 8002e06:	0e1b      	lsrs	r3, r3, #24
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	0a55      	lsrs	r5, r2, #9
 8002e0c:	4208      	tst	r0, r1
 8002e0e:	d00c      	beq.n	8002e2a <__aeabi_f2d+0x2e>
 8002e10:	21e0      	movs	r1, #224	@ 0xe0
 8002e12:	0089      	lsls	r1, r1, #2
 8002e14:	468c      	mov	ip, r1
 8002e16:	076d      	lsls	r5, r5, #29
 8002e18:	0b12      	lsrs	r2, r2, #12
 8002e1a:	4463      	add	r3, ip
 8002e1c:	051b      	lsls	r3, r3, #20
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	07e4      	lsls	r4, r4, #31
 8002e22:	4323      	orrs	r3, r4
 8002e24:	0028      	movs	r0, r5
 8002e26:	0019      	movs	r1, r3
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d114      	bne.n	8002e58 <__aeabi_f2d+0x5c>
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	d01b      	beq.n	8002e6a <__aeabi_f2d+0x6e>
 8002e32:	0028      	movs	r0, r5
 8002e34:	f000 f8ae 	bl	8002f94 <__clzsi2>
 8002e38:	280a      	cmp	r0, #10
 8002e3a:	dc1c      	bgt.n	8002e76 <__aeabi_f2d+0x7a>
 8002e3c:	230b      	movs	r3, #11
 8002e3e:	002a      	movs	r2, r5
 8002e40:	1a1b      	subs	r3, r3, r0
 8002e42:	40da      	lsrs	r2, r3
 8002e44:	0003      	movs	r3, r0
 8002e46:	3315      	adds	r3, #21
 8002e48:	409d      	lsls	r5, r3
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <__aeabi_f2d+0x88>)
 8002e4c:	0312      	lsls	r2, r2, #12
 8002e4e:	1a1b      	subs	r3, r3, r0
 8002e50:	055b      	lsls	r3, r3, #21
 8002e52:	0b12      	lsrs	r2, r2, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e7e1      	b.n	8002e1c <__aeabi_f2d+0x20>
 8002e58:	2d00      	cmp	r5, #0
 8002e5a:	d009      	beq.n	8002e70 <__aeabi_f2d+0x74>
 8002e5c:	0b13      	lsrs	r3, r2, #12
 8002e5e:	2280      	movs	r2, #128	@ 0x80
 8002e60:	0312      	lsls	r2, r2, #12
 8002e62:	431a      	orrs	r2, r3
 8002e64:	076d      	lsls	r5, r5, #29
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <__aeabi_f2d+0x8c>)
 8002e68:	e7d8      	b.n	8002e1c <__aeabi_f2d+0x20>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	e7d5      	b.n	8002e1c <__aeabi_f2d+0x20>
 8002e70:	2200      	movs	r2, #0
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <__aeabi_f2d+0x8c>)
 8002e74:	e7d2      	b.n	8002e1c <__aeabi_f2d+0x20>
 8002e76:	0003      	movs	r3, r0
 8002e78:	002a      	movs	r2, r5
 8002e7a:	3b0b      	subs	r3, #11
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	2500      	movs	r5, #0
 8002e80:	e7e3      	b.n	8002e4a <__aeabi_f2d+0x4e>
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	00000389 	.word	0x00000389
 8002e88:	000007ff 	.word	0x000007ff

08002e8c <__aeabi_d2f>:
 8002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8e:	004b      	lsls	r3, r1, #1
 8002e90:	030f      	lsls	r7, r1, #12
 8002e92:	0d5b      	lsrs	r3, r3, #21
 8002e94:	4c3b      	ldr	r4, [pc, #236]	@ (8002f84 <__aeabi_d2f+0xf8>)
 8002e96:	0f45      	lsrs	r5, r0, #29
 8002e98:	b083      	sub	sp, #12
 8002e9a:	0a7f      	lsrs	r7, r7, #9
 8002e9c:	1c5e      	adds	r6, r3, #1
 8002e9e:	432f      	orrs	r7, r5
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	9101      	str	r1, [sp, #4]
 8002ea4:	0fca      	lsrs	r2, r1, #31
 8002ea6:	00c5      	lsls	r5, r0, #3
 8002ea8:	4226      	tst	r6, r4
 8002eaa:	d00b      	beq.n	8002ec4 <__aeabi_d2f+0x38>
 8002eac:	4936      	ldr	r1, [pc, #216]	@ (8002f88 <__aeabi_d2f+0xfc>)
 8002eae:	185c      	adds	r4, r3, r1
 8002eb0:	2cfe      	cmp	r4, #254	@ 0xfe
 8002eb2:	dd13      	ble.n	8002edc <__aeabi_d2f+0x50>
 8002eb4:	20ff      	movs	r0, #255	@ 0xff
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	05c0      	lsls	r0, r0, #23
 8002eba:	4318      	orrs	r0, r3
 8002ebc:	07d2      	lsls	r2, r2, #31
 8002ebe:	4310      	orrs	r0, r2
 8002ec0:	b003      	add	sp, #12
 8002ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <__aeabi_d2f+0x42>
 8002ec8:	2000      	movs	r0, #0
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e7f4      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002ece:	433d      	orrs	r5, r7
 8002ed0:	d0f0      	beq.n	8002eb4 <__aeabi_d2f+0x28>
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	03db      	lsls	r3, r3, #15
 8002ed6:	20ff      	movs	r0, #255	@ 0xff
 8002ed8:	433b      	orrs	r3, r7
 8002eda:	e7ed      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002edc:	2c00      	cmp	r4, #0
 8002ede:	dd14      	ble.n	8002f0a <__aeabi_d2f+0x7e>
 8002ee0:	9b00      	ldr	r3, [sp, #0]
 8002ee2:	00ff      	lsls	r7, r7, #3
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	4183      	sbcs	r3, r0
 8002eea:	0f69      	lsrs	r1, r5, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	0759      	lsls	r1, r3, #29
 8002ef2:	d041      	beq.n	8002f78 <__aeabi_d2f+0xec>
 8002ef4:	210f      	movs	r1, #15
 8002ef6:	4019      	ands	r1, r3
 8002ef8:	2904      	cmp	r1, #4
 8002efa:	d028      	beq.n	8002f4e <__aeabi_d2f+0xc2>
 8002efc:	3304      	adds	r3, #4
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	d525      	bpl.n	8002f4e <__aeabi_d2f+0xc2>
 8002f02:	3401      	adds	r4, #1
 8002f04:	2300      	movs	r3, #0
 8002f06:	b2e0      	uxtb	r0, r4
 8002f08:	e7d6      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002f0a:	0021      	movs	r1, r4
 8002f0c:	3117      	adds	r1, #23
 8002f0e:	dbdb      	blt.n	8002ec8 <__aeabi_d2f+0x3c>
 8002f10:	2180      	movs	r1, #128	@ 0x80
 8002f12:	201e      	movs	r0, #30
 8002f14:	0409      	lsls	r1, r1, #16
 8002f16:	4339      	orrs	r1, r7
 8002f18:	1b00      	subs	r0, r0, r4
 8002f1a:	281f      	cmp	r0, #31
 8002f1c:	dd1b      	ble.n	8002f56 <__aeabi_d2f+0xca>
 8002f1e:	2602      	movs	r6, #2
 8002f20:	4276      	negs	r6, r6
 8002f22:	1b34      	subs	r4, r6, r4
 8002f24:	000e      	movs	r6, r1
 8002f26:	40e6      	lsrs	r6, r4
 8002f28:	0034      	movs	r4, r6
 8002f2a:	2820      	cmp	r0, #32
 8002f2c:	d004      	beq.n	8002f38 <__aeabi_d2f+0xac>
 8002f2e:	4817      	ldr	r0, [pc, #92]	@ (8002f8c <__aeabi_d2f+0x100>)
 8002f30:	4684      	mov	ip, r0
 8002f32:	4463      	add	r3, ip
 8002f34:	4099      	lsls	r1, r3
 8002f36:	430d      	orrs	r5, r1
 8002f38:	002b      	movs	r3, r5
 8002f3a:	1e59      	subs	r1, r3, #1
 8002f3c:	418b      	sbcs	r3, r1
 8002f3e:	4323      	orrs	r3, r4
 8002f40:	0759      	lsls	r1, r3, #29
 8002f42:	d015      	beq.n	8002f70 <__aeabi_d2f+0xe4>
 8002f44:	210f      	movs	r1, #15
 8002f46:	2400      	movs	r4, #0
 8002f48:	4019      	ands	r1, r3
 8002f4a:	2904      	cmp	r1, #4
 8002f4c:	d117      	bne.n	8002f7e <__aeabi_d2f+0xf2>
 8002f4e:	019b      	lsls	r3, r3, #6
 8002f50:	0a5b      	lsrs	r3, r3, #9
 8002f52:	b2e0      	uxtb	r0, r4
 8002f54:	e7b0      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002f56:	4c0e      	ldr	r4, [pc, #56]	@ (8002f90 <__aeabi_d2f+0x104>)
 8002f58:	191c      	adds	r4, r3, r4
 8002f5a:	002b      	movs	r3, r5
 8002f5c:	40a5      	lsls	r5, r4
 8002f5e:	40c3      	lsrs	r3, r0
 8002f60:	40a1      	lsls	r1, r4
 8002f62:	1e68      	subs	r0, r5, #1
 8002f64:	4185      	sbcs	r5, r0
 8002f66:	4329      	orrs	r1, r5
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	2400      	movs	r4, #0
 8002f6c:	0759      	lsls	r1, r3, #29
 8002f6e:	d1c1      	bne.n	8002ef4 <__aeabi_d2f+0x68>
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	2000      	movs	r0, #0
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	e79f      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	b2e0      	uxtb	r0, r4
 8002f7c:	e79c      	b.n	8002eb8 <__aeabi_d2f+0x2c>
 8002f7e:	3304      	adds	r3, #4
 8002f80:	e7e5      	b.n	8002f4e <__aeabi_d2f+0xc2>
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	000007fe 	.word	0x000007fe
 8002f88:	fffffc80 	.word	0xfffffc80
 8002f8c:	fffffca2 	.word	0xfffffca2
 8002f90:	fffffc82 	.word	0xfffffc82

08002f94 <__clzsi2>:
 8002f94:	211c      	movs	r1, #28
 8002f96:	2301      	movs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	4298      	cmp	r0, r3
 8002f9c:	d301      	bcc.n	8002fa2 <__clzsi2+0xe>
 8002f9e:	0c00      	lsrs	r0, r0, #16
 8002fa0:	3910      	subs	r1, #16
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	4298      	cmp	r0, r3
 8002fa6:	d301      	bcc.n	8002fac <__clzsi2+0x18>
 8002fa8:	0a00      	lsrs	r0, r0, #8
 8002faa:	3908      	subs	r1, #8
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	d301      	bcc.n	8002fb6 <__clzsi2+0x22>
 8002fb2:	0900      	lsrs	r0, r0, #4
 8002fb4:	3904      	subs	r1, #4
 8002fb6:	a202      	add	r2, pc, #8	@ (adr r2, 8002fc0 <__clzsi2+0x2c>)
 8002fb8:	5c10      	ldrb	r0, [r2, r0]
 8002fba:	1840      	adds	r0, r0, r1
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	02020304 	.word	0x02020304
 8002fc4:	01010101 	.word	0x01010101
	...

08002fd0 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8002fdc:	230f      	movs	r3, #15
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8002fe4:	210e      	movs	r1, #14
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	222d      	movs	r2, #45	@ 0x2d
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e01a      	b.n	800302a <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8002ff4:	240e      	movs	r4, #14
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b299      	uxth	r1, r3
 8002ffc:	193b      	adds	r3, r7, r4
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	3b2d      	subs	r3, #45	@ 0x2d
 8003002:	4a3e      	ldr	r2, [pc, #248]	@ (80030fc <VL53L1X_SensorInit+0x12c>)
 8003004:	5cd2      	ldrb	r2, [r2, r3]
 8003006:	1dbb      	adds	r3, r7, #6
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0018      	movs	r0, r3
 800300c:	f001 f910 	bl	8004230 <VL53L1_WrByte>
 8003010:	0003      	movs	r3, r0
 8003012:	0019      	movs	r1, r3
 8003014:	220f      	movs	r2, #15
 8003016:	18bb      	adds	r3, r7, r2
 8003018:	18ba      	adds	r2, r7, r2
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003020:	193b      	adds	r3, r7, r4
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	193b      	adds	r3, r7, r4
 8003026:	3201      	adds	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	230e      	movs	r3, #14
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b87      	cmp	r3, #135	@ 0x87
 8003032:	d9df      	bls.n	8002ff4 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f8b3 	bl	80031a4 <VL53L1X_StartRanging>
 800303e:	0003      	movs	r3, r0
 8003040:	0019      	movs	r1, r3
 8003042:	220f      	movs	r2, #15
 8003044:	18bb      	adds	r3, r7, r2
 8003046:	18ba      	adds	r2, r7, r2
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800304e:	230d      	movs	r3, #13
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003056:	e00f      	b.n	8003078 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8003058:	230d      	movs	r3, #13
 800305a:	18fa      	adds	r2, r7, r3
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	0011      	movs	r1, r2
 8003062:	0018      	movs	r0, r3
 8003064:	f000 f8dc 	bl	8003220 <VL53L1X_CheckForDataReady>
 8003068:	0003      	movs	r3, r0
 800306a:	0019      	movs	r1, r3
 800306c:	220f      	movs	r2, #15
 800306e:	18bb      	adds	r3, r7, r2
 8003070:	18ba      	adds	r2, r7, r2
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003078:	230d      	movs	r3, #13
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ea      	beq.n	8003058 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f83a 	bl	8003100 <VL53L1X_ClearInterrupt>
 800308c:	0003      	movs	r3, r0
 800308e:	0019      	movs	r1, r3
 8003090:	240f      	movs	r4, #15
 8003092:	193b      	adds	r3, r7, r4
 8003094:	193a      	adds	r2, r7, r4
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f89e 	bl	80031e2 <VL53L1X_StopRanging>
 80030a6:	0003      	movs	r3, r0
 80030a8:	0019      	movs	r1, r3
 80030aa:	193b      	adds	r3, r7, r4
 80030ac:	193a      	adds	r2, r7, r4
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80030b4:	1dbb      	adds	r3, r7, #6
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2209      	movs	r2, #9
 80030ba:	2108      	movs	r1, #8
 80030bc:	0018      	movs	r0, r3
 80030be:	f001 f8b7 	bl	8004230 <VL53L1_WrByte>
 80030c2:	0003      	movs	r3, r0
 80030c4:	0019      	movs	r1, r3
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	193a      	adds	r2, r7, r4
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80030d0:	1dbb      	adds	r3, r7, #6
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	210b      	movs	r1, #11
 80030d8:	0018      	movs	r0, r3
 80030da:	f001 f8a9 	bl	8004230 <VL53L1_WrByte>
 80030de:	0003      	movs	r3, r0
 80030e0:	0019      	movs	r1, r3
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	193a      	adds	r2, r7, r4
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	701a      	strb	r2, [r3, #0]
	return status;
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b25b      	sxtb	r3, r3
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b005      	add	sp, #20
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	0800717c 	.word	0x0800717c

08003100 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	0002      	movs	r2, r0
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800310c:	240f      	movs	r4, #15
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003114:	1dbb      	adds	r3, r7, #6
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	2186      	movs	r1, #134	@ 0x86
 800311c:	0018      	movs	r0, r3
 800311e:	f001 f887 	bl	8004230 <VL53L1_WrByte>
 8003122:	0003      	movs	r3, r0
 8003124:	0019      	movs	r1, r3
 8003126:	193b      	adds	r3, r7, r4
 8003128:	193a      	adds	r2, r7, r4
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
	return status;
 8003130:	193b      	adds	r3, r7, r4
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b25b      	sxtb	r3, r3
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b005      	add	sp, #20
 800313c:	bd90      	pop	{r4, r7, pc}

0800313e <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800313e:	b5b0      	push	{r4, r5, r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	0002      	movs	r2, r0
 8003146:	6039      	str	r1, [r7, #0]
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800314c:	240f      	movs	r4, #15
 800314e:	193b      	adds	r3, r7, r4
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8003154:	250e      	movs	r5, #14
 8003156:	197a      	adds	r2, r7, r5
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	2130      	movs	r1, #48	@ 0x30
 800315e:	0018      	movs	r0, r3
 8003160:	f000 ffe6 	bl	8004130 <VL53L1_RdByte>
 8003164:	0003      	movs	r3, r0
 8003166:	0019      	movs	r1, r3
 8003168:	0020      	movs	r0, r4
 800316a:	183b      	adds	r3, r7, r0
 800316c:	183a      	adds	r2, r7, r0
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8003174:	197b      	adds	r3, r7, r5
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2210      	movs	r2, #16
 800317a:	4013      	ands	r3, r2
 800317c:	b2da      	uxtb	r2, r3
 800317e:	197b      	adds	r3, r7, r5
 8003180:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003182:	197b      	adds	r3, r7, r5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	b2db      	uxtb	r3, r3
 800318a:	425a      	negs	r2, r3
 800318c:	4153      	adcs	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	001a      	movs	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	701a      	strb	r2, [r3, #0]
	return status;
 8003196:	183b      	adds	r3, r7, r0
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b25b      	sxtb	r3, r3
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bdb0      	pop	{r4, r5, r7, pc}

080031a4 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	0002      	movs	r2, r0
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80031b0:	240f      	movs	r4, #15
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80031b8:	1dbb      	adds	r3, r7, #6
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	2240      	movs	r2, #64	@ 0x40
 80031be:	2187      	movs	r1, #135	@ 0x87
 80031c0:	0018      	movs	r0, r3
 80031c2:	f001 f835 	bl	8004230 <VL53L1_WrByte>
 80031c6:	0003      	movs	r3, r0
 80031c8:	0019      	movs	r1, r3
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	193a      	adds	r2, r7, r4
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	701a      	strb	r2, [r3, #0]
	return status;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b25b      	sxtb	r3, r3
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b005      	add	sp, #20
 80031e0:	bd90      	pop	{r4, r7, pc}

080031e2 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80031e2:	b590      	push	{r4, r7, lr}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	0002      	movs	r2, r0
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80031ee:	240f      	movs	r4, #15
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80031f6:	1dbb      	adds	r3, r7, #6
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2187      	movs	r1, #135	@ 0x87
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 f816 	bl	8004230 <VL53L1_WrByte>
 8003204:	0003      	movs	r3, r0
 8003206:	0019      	movs	r1, r3
 8003208:	193b      	adds	r3, r7, r4
 800320a:	193a      	adds	r2, r7, r4
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	701a      	strb	r2, [r3, #0]
	return status;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b25b      	sxtb	r3, r3
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b005      	add	sp, #20
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	0002      	movs	r2, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	1dbb      	adds	r3, r7, #6
 800322c:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800322e:	240f      	movs	r4, #15
 8003230:	193b      	adds	r3, r7, r4
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8003236:	250d      	movs	r5, #13
 8003238:	197a      	adds	r2, r7, r5
 800323a:	1dbb      	adds	r3, r7, #6
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff7c 	bl	800313e <VL53L1X_GetInterruptPolarity>
 8003246:	0003      	movs	r3, r0
 8003248:	0019      	movs	r1, r3
 800324a:	193b      	adds	r3, r7, r4
 800324c:	193a      	adds	r2, r7, r4
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8003254:	260e      	movs	r6, #14
 8003256:	19ba      	adds	r2, r7, r6
 8003258:	1dbb      	adds	r3, r7, #6
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	2131      	movs	r1, #49	@ 0x31
 800325e:	0018      	movs	r0, r3
 8003260:	f000 ff66 	bl	8004130 <VL53L1_RdByte>
 8003264:	0003      	movs	r3, r0
 8003266:	0019      	movs	r1, r3
 8003268:	193b      	adds	r3, r7, r4
 800326a:	193a      	adds	r2, r7, r4
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8003272:	193b      	adds	r3, r7, r4
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b25b      	sxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 800327c:	19bb      	adds	r3, r7, r6
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	001a      	movs	r2, r3
 8003282:	2301      	movs	r3, #1
 8003284:	4013      	ands	r3, r2
 8003286:	197a      	adds	r2, r7, r5
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	4293      	cmp	r3, r2
 800328c:	d103      	bne.n	8003296 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e002      	b.n	800329c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b25b      	sxtb	r3, r3
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b005      	add	sp, #20
 80032aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ac <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	1dbb      	adds	r3, r7, #6
 80032b6:	801a      	strh	r2, [r3, #0]
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	1c0a      	adds	r2, r1, #0
 80032bc:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80032be:	240f      	movs	r4, #15
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 80032c6:	250c      	movs	r5, #12
 80032c8:	197a      	adds	r2, r7, r5
 80032ca:	1dbb      	adds	r3, r7, #6
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 faa5 	bl	8003820 <VL53L1X_GetDistanceMode>
 80032d6:	0003      	movs	r3, r0
 80032d8:	0019      	movs	r1, r3
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	193a      	adds	r2, r7, r4
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 80032e4:	197b      	adds	r3, r7, r5
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e11a      	b.n	8003526 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 80032f0:	230c      	movs	r3, #12
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d000      	beq.n	80032fc <VL53L1X_SetTimingBudgetInMs+0x50>
 80032fa:	e092      	b.n	8003422 <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	22fa      	movs	r2, #250	@ 0xfa
 8003302:	0052      	lsls	r2, r2, #1
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <VL53L1X_SetTimingBudgetInMs+0x5e>
 8003308:	e077      	b.n	80033fa <VL53L1X_SetTimingBudgetInMs+0x14e>
 800330a:	22fa      	movs	r2, #250	@ 0xfa
 800330c:	0052      	lsls	r2, r2, #1
 800330e:	4293      	cmp	r3, r2
 8003310:	dd00      	ble.n	8003314 <VL53L1X_SetTimingBudgetInMs+0x68>
 8003312:	e081      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003314:	2bc8      	cmp	r3, #200	@ 0xc8
 8003316:	d100      	bne.n	800331a <VL53L1X_SetTimingBudgetInMs+0x6e>
 8003318:	e060      	b.n	80033dc <VL53L1X_SetTimingBudgetInMs+0x130>
 800331a:	dd00      	ble.n	800331e <VL53L1X_SetTimingBudgetInMs+0x72>
 800331c:	e07c      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d04c      	beq.n	80033bc <VL53L1X_SetTimingBudgetInMs+0x110>
 8003322:	dd00      	ble.n	8003326 <VL53L1X_SetTimingBudgetInMs+0x7a>
 8003324:	e078      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003326:	2b32      	cmp	r3, #50	@ 0x32
 8003328:	d037      	beq.n	800339a <VL53L1X_SetTimingBudgetInMs+0xee>
 800332a:	dd00      	ble.n	800332e <VL53L1X_SetTimingBudgetInMs+0x82>
 800332c:	e074      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800332e:	2b21      	cmp	r3, #33	@ 0x21
 8003330:	d024      	beq.n	800337c <VL53L1X_SetTimingBudgetInMs+0xd0>
 8003332:	dd00      	ble.n	8003336 <VL53L1X_SetTimingBudgetInMs+0x8a>
 8003334:	e070      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003336:	2b0f      	cmp	r3, #15
 8003338:	d002      	beq.n	8003340 <VL53L1X_SetTimingBudgetInMs+0x94>
 800333a:	2b14      	cmp	r3, #20
 800333c:	d00f      	beq.n	800335e <VL53L1X_SetTimingBudgetInMs+0xb2>
 800333e:	e06b      	b.n	8003418 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003340:	1dbb      	adds	r3, r7, #6
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	221d      	movs	r2, #29
 8003346:	215e      	movs	r1, #94	@ 0x5e
 8003348:	0018      	movs	r0, r3
 800334a:	f000 ff9b 	bl	8004284 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800334e:	1dbb      	adds	r3, r7, #6
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	2227      	movs	r2, #39	@ 0x27
 8003354:	2161      	movs	r1, #97	@ 0x61
 8003356:	0018      	movs	r0, r3
 8003358:	f000 ff94 	bl	8004284 <VL53L1_WrWord>
					0x0027);
			break;
 800335c:	e0df      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800335e:	1dbb      	adds	r3, r7, #6
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	2251      	movs	r2, #81	@ 0x51
 8003364:	215e      	movs	r1, #94	@ 0x5e
 8003366:	0018      	movs	r0, r3
 8003368:	f000 ff8c 	bl	8004284 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800336c:	1dbb      	adds	r3, r7, #6
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	226e      	movs	r2, #110	@ 0x6e
 8003372:	2161      	movs	r1, #97	@ 0x61
 8003374:	0018      	movs	r0, r3
 8003376:	f000 ff85 	bl	8004284 <VL53L1_WrWord>
					0x006E);
			break;
 800337a:	e0d0      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	22d6      	movs	r2, #214	@ 0xd6
 8003382:	215e      	movs	r1, #94	@ 0x5e
 8003384:	0018      	movs	r0, r3
 8003386:	f000 ff7d 	bl	8004284 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800338a:	1dbb      	adds	r3, r7, #6
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	226e      	movs	r2, #110	@ 0x6e
 8003390:	2161      	movs	r1, #97	@ 0x61
 8003392:	0018      	movs	r0, r3
 8003394:	f000 ff76 	bl	8004284 <VL53L1_WrWord>
					0x006E);
			break;
 8003398:	e0c1      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800339a:	23d7      	movs	r3, #215	@ 0xd7
 800339c:	005a      	lsls	r2, r3, #1
 800339e:	1dbb      	adds	r3, r7, #6
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	215e      	movs	r1, #94	@ 0x5e
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 ff6d 	bl	8004284 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80033aa:	23f4      	movs	r3, #244	@ 0xf4
 80033ac:	005a      	lsls	r2, r3, #1
 80033ae:	1dbb      	adds	r3, r7, #6
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	2161      	movs	r1, #97	@ 0x61
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 ff65 	bl	8004284 <VL53L1_WrWord>
					0x01E8);
			break;
 80033ba:	e0b0      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80033bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003530 <VL53L1X_SetTimingBudgetInMs+0x284>)
 80033be:	1dbb      	adds	r3, r7, #6
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	215e      	movs	r1, #94	@ 0x5e
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 ff5d 	bl	8004284 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80033ca:	23e2      	movs	r3, #226	@ 0xe2
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	2161      	movs	r1, #97	@ 0x61
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 ff55 	bl	8004284 <VL53L1_WrWord>
					0x0388);
			break;
 80033da:	e0a0      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80033dc:	4a55      	ldr	r2, [pc, #340]	@ (8003534 <VL53L1X_SetTimingBudgetInMs+0x288>)
 80033de:	1dbb      	adds	r3, r7, #6
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	215e      	movs	r1, #94	@ 0x5e
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 ff4d 	bl	8004284 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80033ea:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	2161      	movs	r1, #97	@ 0x61
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 ff46 	bl	8004284 <VL53L1_WrWord>
					0x0496);
			break;
 80033f8:	e091      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80033fa:	4a50      	ldr	r2, [pc, #320]	@ (800353c <VL53L1X_SetTimingBudgetInMs+0x290>)
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	215e      	movs	r1, #94	@ 0x5e
 8003402:	0018      	movs	r0, r3
 8003404:	f000 ff3e 	bl	8004284 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003408:	4a4d      	ldr	r2, [pc, #308]	@ (8003540 <VL53L1X_SetTimingBudgetInMs+0x294>)
 800340a:	1dbb      	adds	r3, r7, #6
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	2161      	movs	r1, #97	@ 0x61
 8003410:	0018      	movs	r0, r3
 8003412:	f000 ff37 	bl	8004284 <VL53L1_WrWord>
					0x05C1);
			break;
 8003416:	e082      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003418:	230f      	movs	r3, #15
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
			break;
 8003420:	e07d      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	22fa      	movs	r2, #250	@ 0xfa
 8003428:	0052      	lsls	r2, r2, #1
 800342a:	4293      	cmp	r3, r2
 800342c:	d100      	bne.n	8003430 <VL53L1X_SetTimingBudgetInMs+0x184>
 800342e:	e062      	b.n	80034f6 <VL53L1X_SetTimingBudgetInMs+0x24a>
 8003430:	22fa      	movs	r2, #250	@ 0xfa
 8003432:	0052      	lsls	r2, r2, #1
 8003434:	4293      	cmp	r3, r2
 8003436:	dd00      	ble.n	800343a <VL53L1X_SetTimingBudgetInMs+0x18e>
 8003438:	e06c      	b.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x268>
 800343a:	2bc8      	cmp	r3, #200	@ 0xc8
 800343c:	d04b      	beq.n	80034d6 <VL53L1X_SetTimingBudgetInMs+0x22a>
 800343e:	dd00      	ble.n	8003442 <VL53L1X_SetTimingBudgetInMs+0x196>
 8003440:	e068      	b.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x268>
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d036      	beq.n	80034b4 <VL53L1X_SetTimingBudgetInMs+0x208>
 8003446:	dd00      	ble.n	800344a <VL53L1X_SetTimingBudgetInMs+0x19e>
 8003448:	e064      	b.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x268>
 800344a:	2b32      	cmp	r3, #50	@ 0x32
 800344c:	d023      	beq.n	8003496 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 800344e:	dc61      	bgt.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x268>
 8003450:	2b14      	cmp	r3, #20
 8003452:	d002      	beq.n	800345a <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8003454:	2b21      	cmp	r3, #33	@ 0x21
 8003456:	d00f      	beq.n	8003478 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 8003458:	e05c      	b.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	221e      	movs	r2, #30
 8003460:	215e      	movs	r1, #94	@ 0x5e
 8003462:	0018      	movs	r0, r3
 8003464:	f000 ff0e 	bl	8004284 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003468:	1dbb      	adds	r3, r7, #6
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	2222      	movs	r2, #34	@ 0x22
 800346e:	2161      	movs	r1, #97	@ 0x61
 8003470:	0018      	movs	r0, r3
 8003472:	f000 ff07 	bl	8004284 <VL53L1_WrWord>
					0x0022);
			break;
 8003476:	e052      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003478:	1dbb      	adds	r3, r7, #6
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2260      	movs	r2, #96	@ 0x60
 800347e:	215e      	movs	r1, #94	@ 0x5e
 8003480:	0018      	movs	r0, r3
 8003482:	f000 feff 	bl	8004284 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003486:	1dbb      	adds	r3, r7, #6
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	226e      	movs	r2, #110	@ 0x6e
 800348c:	2161      	movs	r1, #97	@ 0x61
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fef8 	bl	8004284 <VL53L1_WrWord>
					0x006E);
			break;
 8003494:	e043      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003496:	1dbb      	adds	r3, r7, #6
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	22ad      	movs	r2, #173	@ 0xad
 800349c:	215e      	movs	r1, #94	@ 0x5e
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 fef0 	bl	8004284 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80034a4:	1dbb      	adds	r3, r7, #6
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	22c6      	movs	r2, #198	@ 0xc6
 80034aa:	2161      	movs	r1, #97	@ 0x61
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fee9 	bl	8004284 <VL53L1_WrWord>
					0x00C6);
			break;
 80034b2:	e034      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80034b4:	23e6      	movs	r3, #230	@ 0xe6
 80034b6:	005a      	lsls	r2, r3, #1
 80034b8:	1dbb      	adds	r3, r7, #6
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	215e      	movs	r1, #94	@ 0x5e
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 fee0 	bl	8004284 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80034c4:	23f5      	movs	r3, #245	@ 0xf5
 80034c6:	005a      	lsls	r2, r3, #1
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2161      	movs	r1, #97	@ 0x61
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 fed8 	bl	8004284 <VL53L1_WrWord>
					0x01EA);
			break;
 80034d4:	e023      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <VL53L1X_SetTimingBudgetInMs+0x298>)
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	215e      	movs	r1, #94	@ 0x5e
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 fed0 	bl	8004284 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80034e4:	23be      	movs	r3, #190	@ 0xbe
 80034e6:	009a      	lsls	r2, r3, #2
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	2161      	movs	r1, #97	@ 0x61
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fec8 	bl	8004284 <VL53L1_WrWord>
					0x02F8);
			break;
 80034f4:	e013      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80034f6:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 80034f8:	1dbb      	adds	r3, r7, #6
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	215e      	movs	r1, #94	@ 0x5e
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fec0 	bl	8004284 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003504:	4a11      	ldr	r2, [pc, #68]	@ (800354c <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8003506:	1dbb      	adds	r3, r7, #6
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	2161      	movs	r1, #97	@ 0x61
 800350c:	0018      	movs	r0, r3
 800350e:	f000 feb9 	bl	8004284 <VL53L1_WrWord>
					0x04A4);
			break;
 8003512:	e004      	b.n	800351e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
			break;
 800351c:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return status;
 800351e:	230f      	movs	r3, #15
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b25b      	sxtb	r3, r3
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bdb0      	pop	{r4, r5, r7, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	000002e1 	.word	0x000002e1
 8003534:	000003e1 	.word	0x000003e1
 8003538:	00000496 	.word	0x00000496
 800353c:	00000591 	.word	0x00000591
 8003540:	000005c1 	.word	0x000005c1
 8003544:	000002d9 	.word	0x000002d9
 8003548:	0000048f 	.word	0x0000048f
 800354c:	000004a4 	.word	0x000004a4

08003550 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	0002      	movs	r2, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 800355e:	240f      	movs	r4, #15
 8003560:	193b      	adds	r3, r7, r4
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8003566:	250c      	movs	r5, #12
 8003568:	197a      	adds	r2, r7, r5
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	215e      	movs	r1, #94	@ 0x5e
 8003570:	0018      	movs	r0, r3
 8003572:	f000 fe01 	bl	8004178 <VL53L1_RdWord>
 8003576:	0003      	movs	r3, r0
 8003578:	0019      	movs	r1, r3
 800357a:	193b      	adds	r3, r7, r4
 800357c:	193a      	adds	r2, r7, r4
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8003584:	197b      	adds	r3, r7, r5
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	4a37      	ldr	r2, [pc, #220]	@ (8003668 <VL53L1X_GetTimingBudgetInMs+0x118>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d100      	bne.n	8003590 <VL53L1X_GetTimingBudgetInMs+0x40>
 800358e:	e057      	b.n	8003640 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003590:	4a35      	ldr	r2, [pc, #212]	@ (8003668 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8003592:	4293      	cmp	r3, r2
 8003594:	dd00      	ble.n	8003598 <VL53L1X_GetTimingBudgetInMs+0x48>
 8003596:	e058      	b.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003598:	4a34      	ldr	r2, [pc, #208]	@ (800366c <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d100      	bne.n	80035a0 <VL53L1X_GetTimingBudgetInMs+0x50>
 800359e:	e04f      	b.n	8003640 <VL53L1X_GetTimingBudgetInMs+0xf0>
 80035a0:	2292      	movs	r2, #146	@ 0x92
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	4293      	cmp	r3, r2
 80035a6:	db00      	blt.n	80035aa <VL53L1X_GetTimingBudgetInMs+0x5a>
 80035a8:	e04f      	b.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035aa:	4a31      	ldr	r2, [pc, #196]	@ (8003670 <VL53L1X_GetTimingBudgetInMs+0x120>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d043      	beq.n	8003638 <VL53L1X_GetTimingBudgetInMs+0xe8>
 80035b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003670 <VL53L1X_GetTimingBudgetInMs+0x120>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	dc49      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003674 <VL53L1X_GetTimingBudgetInMs+0x124>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d039      	beq.n	8003630 <VL53L1X_GetTimingBudgetInMs+0xe0>
 80035bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003674 <VL53L1X_GetTimingBudgetInMs+0x124>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	dc43      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <VL53L1X_GetTimingBudgetInMs+0x128>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d037      	beq.n	8003638 <VL53L1X_GetTimingBudgetInMs+0xe8>
 80035c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003678 <VL53L1X_GetTimingBudgetInMs+0x128>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	dc3d      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035ce:	22e6      	movs	r2, #230	@ 0xe6
 80035d0:	0052      	lsls	r2, r2, #1
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02c      	beq.n	8003630 <VL53L1X_GetTimingBudgetInMs+0xe0>
 80035d6:	22e6      	movs	r2, #230	@ 0xe6
 80035d8:	0052      	lsls	r2, r2, #1
 80035da:	4293      	cmp	r3, r2
 80035dc:	dc35      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035de:	22d7      	movs	r2, #215	@ 0xd7
 80035e0:	0052      	lsls	r2, r2, #1
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d020      	beq.n	8003628 <VL53L1X_GetTimingBudgetInMs+0xd8>
 80035e6:	22d7      	movs	r2, #215	@ 0xd7
 80035e8:	0052      	lsls	r2, r2, #1
 80035ea:	4293      	cmp	r3, r2
 80035ec:	dc2d      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035ee:	2bd6      	cmp	r3, #214	@ 0xd6
 80035f0:	d016      	beq.n	8003620 <VL53L1X_GetTimingBudgetInMs+0xd0>
 80035f2:	dc2a      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035f4:	2bad      	cmp	r3, #173	@ 0xad
 80035f6:	d017      	beq.n	8003628 <VL53L1X_GetTimingBudgetInMs+0xd8>
 80035f8:	dc27      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80035fa:	2b60      	cmp	r3, #96	@ 0x60
 80035fc:	d010      	beq.n	8003620 <VL53L1X_GetTimingBudgetInMs+0xd0>
 80035fe:	dc24      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003600:	2b51      	cmp	r3, #81	@ 0x51
 8003602:	d009      	beq.n	8003618 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8003604:	dc21      	bgt.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003606:	2b1d      	cmp	r3, #29
 8003608:	d002      	beq.n	8003610 <VL53L1X_GetTimingBudgetInMs+0xc0>
 800360a:	2b1e      	cmp	r3, #30
 800360c:	d004      	beq.n	8003618 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800360e:	e01c      	b.n	800364a <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	220f      	movs	r2, #15
 8003614:	801a      	strh	r2, [r3, #0]
			break;
 8003616:	e01f      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2214      	movs	r2, #20
 800361c:	801a      	strh	r2, [r3, #0]
			break;
 800361e:	e01b      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2221      	movs	r2, #33	@ 0x21
 8003624:	801a      	strh	r2, [r3, #0]
			break;
 8003626:	e017      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2232      	movs	r2, #50	@ 0x32
 800362c:	801a      	strh	r2, [r3, #0]
			break;
 800362e:	e013      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2264      	movs	r2, #100	@ 0x64
 8003634:	801a      	strh	r2, [r3, #0]
			break;
 8003636:	e00f      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	22c8      	movs	r2, #200	@ 0xc8
 800363c:	801a      	strh	r2, [r3, #0]
			break;
 800363e:	e00b      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	22fa      	movs	r2, #250	@ 0xfa
 8003644:	0052      	lsls	r2, r2, #1
 8003646:	801a      	strh	r2, [r3, #0]
			break;
 8003648:	e006      	b.n	8003658 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 800364a:	230f      	movs	r3, #15
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8003658:	230f      	movs	r3, #15
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b25b      	sxtb	r3, r3
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bdb0      	pop	{r4, r5, r7, pc}
 8003668:	00000591 	.word	0x00000591
 800366c:	0000048f 	.word	0x0000048f
 8003670:	000003e1 	.word	0x000003e1
 8003674:	000002e1 	.word	0x000002e1
 8003678:	000002d9 	.word	0x000002d9

0800367c <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	0002      	movs	r2, r0
 8003684:	1dbb      	adds	r3, r7, #6
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	1c0a      	adds	r2, r1, #0
 800368c:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 800368e:	240f      	movs	r4, #15
 8003690:	193b      	adds	r3, r7, r4
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8003696:	230c      	movs	r3, #12
 8003698:	18fa      	adds	r2, r7, r3
 800369a:	1dbb      	adds	r3, r7, #6
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	0011      	movs	r1, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff55 	bl	8003550 <VL53L1X_GetTimingBudgetInMs>
 80036a6:	0003      	movs	r3, r0
 80036a8:	0019      	movs	r1, r3
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	193a      	adds	r2, r7, r4
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <VL53L1X_SetDistanceMode+0x46>
		return 1;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a1      	b.n	8003806 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d002      	beq.n	80036d0 <VL53L1X_SetDistanceMode+0x54>
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d03e      	beq.n	800374c <VL53L1X_SetDistanceMode+0xd0>
 80036ce:	e07b      	b.n	80037c8 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80036d0:	250f      	movs	r5, #15
 80036d2:	197c      	adds	r4, r7, r5
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	2214      	movs	r2, #20
 80036da:	214b      	movs	r1, #75	@ 0x4b
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fda7 	bl	8004230 <VL53L1_WrByte>
 80036e2:	0003      	movs	r3, r0
 80036e4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80036e6:	197c      	adds	r4, r7, r5
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2207      	movs	r2, #7
 80036ee:	2160      	movs	r1, #96	@ 0x60
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 fd9d 	bl	8004230 <VL53L1_WrByte>
 80036f6:	0003      	movs	r3, r0
 80036f8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80036fa:	197c      	adds	r4, r7, r5
 80036fc:	1dbb      	adds	r3, r7, #6
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	2205      	movs	r2, #5
 8003702:	2163      	movs	r1, #99	@ 0x63
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fd93 	bl	8004230 <VL53L1_WrByte>
 800370a:	0003      	movs	r3, r0
 800370c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 800370e:	197c      	adds	r4, r7, r5
 8003710:	1dbb      	adds	r3, r7, #6
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2238      	movs	r2, #56	@ 0x38
 8003716:	2169      	movs	r1, #105	@ 0x69
 8003718:	0018      	movs	r0, r3
 800371a:	f000 fd89 	bl	8004230 <VL53L1_WrByte>
 800371e:	0003      	movs	r3, r0
 8003720:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8003722:	197c      	adds	r4, r7, r5
 8003724:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <VL53L1X_SetDistanceMode+0x194>)
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	2178      	movs	r1, #120	@ 0x78
 800372c:	0018      	movs	r0, r3
 800372e:	f000 fda9 	bl	8004284 <VL53L1_WrWord>
 8003732:	0003      	movs	r3, r0
 8003734:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8003736:	197c      	adds	r4, r7, r5
 8003738:	4a36      	ldr	r2, [pc, #216]	@ (8003814 <VL53L1X_SetDistanceMode+0x198>)
 800373a:	1dbb      	adds	r3, r7, #6
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	217a      	movs	r1, #122	@ 0x7a
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fd9f 	bl	8004284 <VL53L1_WrWord>
 8003746:	0003      	movs	r3, r0
 8003748:	7023      	strb	r3, [r4, #0]
		break;
 800374a:	e042      	b.n	80037d2 <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800374c:	250f      	movs	r5, #15
 800374e:	197c      	adds	r4, r7, r5
 8003750:	1dbb      	adds	r3, r7, #6
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	220a      	movs	r2, #10
 8003756:	214b      	movs	r1, #75	@ 0x4b
 8003758:	0018      	movs	r0, r3
 800375a:	f000 fd69 	bl	8004230 <VL53L1_WrByte>
 800375e:	0003      	movs	r3, r0
 8003760:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8003762:	197c      	adds	r4, r7, r5
 8003764:	1dbb      	adds	r3, r7, #6
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	220f      	movs	r2, #15
 800376a:	2160      	movs	r1, #96	@ 0x60
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fd5f 	bl	8004230 <VL53L1_WrByte>
 8003772:	0003      	movs	r3, r0
 8003774:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8003776:	197c      	adds	r4, r7, r5
 8003778:	1dbb      	adds	r3, r7, #6
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	220d      	movs	r2, #13
 800377e:	2163      	movs	r1, #99	@ 0x63
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fd55 	bl	8004230 <VL53L1_WrByte>
 8003786:	0003      	movs	r3, r0
 8003788:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 800378a:	197c      	adds	r4, r7, r5
 800378c:	1dbb      	adds	r3, r7, #6
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	22b8      	movs	r2, #184	@ 0xb8
 8003792:	2169      	movs	r1, #105	@ 0x69
 8003794:	0018      	movs	r0, r3
 8003796:	f000 fd4b 	bl	8004230 <VL53L1_WrByte>
 800379a:	0003      	movs	r3, r0
 800379c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 800379e:	197c      	adds	r4, r7, r5
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <VL53L1X_SetDistanceMode+0x19c>)
 80037a2:	1dbb      	adds	r3, r7, #6
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2178      	movs	r1, #120	@ 0x78
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fd6b 	bl	8004284 <VL53L1_WrWord>
 80037ae:	0003      	movs	r3, r0
 80037b0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80037b2:	197c      	adds	r4, r7, r5
 80037b4:	4a19      	ldr	r2, [pc, #100]	@ (800381c <VL53L1X_SetDistanceMode+0x1a0>)
 80037b6:	1dbb      	adds	r3, r7, #6
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	217a      	movs	r1, #122	@ 0x7a
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 fd61 	bl	8004284 <VL53L1_WrWord>
 80037c2:	0003      	movs	r3, r0
 80037c4:	7023      	strb	r3, [r4, #0]
		break;
 80037c6:	e004      	b.n	80037d2 <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 80037c8:	230f      	movs	r3, #15
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
		break;
 80037d0:	46c0      	nop			@ (mov r8, r8)
	}

	if (status == 0)
 80037d2:	240f      	movs	r4, #15
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80037de:	230c      	movs	r3, #12
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	1dbb      	adds	r3, r7, #6
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	0011      	movs	r1, r2
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7ff fd5e 	bl	80032ac <VL53L1X_SetTimingBudgetInMs>
 80037f0:	0003      	movs	r3, r0
 80037f2:	0019      	movs	r1, r3
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	193a      	adds	r2, r7, r4
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
	return status;
 80037fe:	230f      	movs	r3, #15
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b25b      	sxtb	r3, r3
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bdb0      	pop	{r4, r5, r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	00000705 	.word	0x00000705
 8003814:	00000606 	.word	0x00000606
 8003818:	00000f0d 	.word	0x00000f0d
 800381c:	00000e0e 	.word	0x00000e0e

08003820 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	0002      	movs	r2, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	1dbb      	adds	r3, r7, #6
 800382c:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 800382e:	240f      	movs	r4, #15
 8003830:	193b      	adds	r3, r7, r4
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8003836:	250e      	movs	r5, #14
 8003838:	197a      	adds	r2, r7, r5
 800383a:	1dbb      	adds	r3, r7, #6
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	214b      	movs	r1, #75	@ 0x4b
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fc75 	bl	8004130 <VL53L1_RdByte>
 8003846:	0003      	movs	r3, r0
 8003848:	001a      	movs	r2, r3
 800384a:	193b      	adds	r3, r7, r4
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b25b      	sxtb	r3, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	b25a      	sxtb	r2, r3
 8003854:	193b      	adds	r3, r7, r4
 8003856:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8003858:	197b      	adds	r3, r7, r5
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b14      	cmp	r3, #20
 800385e:	d102      	bne.n	8003866 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8003866:	230e      	movs	r3, #14
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b0a      	cmp	r3, #10
 800386e:	d102      	bne.n	8003876 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2202      	movs	r2, #2
 8003874:	801a      	strh	r2, [r3, #0]
	return status;
 8003876:	230f      	movs	r3, #15
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b25b      	sxtb	r3, r3
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003888 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	0002      	movs	r2, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8003896:	240f      	movs	r4, #15
 8003898:	193b      	adds	r3, r7, r4
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 800389e:	250c      	movs	r5, #12
 80038a0:	197a      	adds	r2, r7, r5
 80038a2:	1dbb      	adds	r3, r7, #6
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	21de      	movs	r1, #222	@ 0xde
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fc65 	bl	8004178 <VL53L1_RdWord>
 80038ae:	0003      	movs	r3, r0
 80038b0:	0019      	movs	r1, r3
 80038b2:	193b      	adds	r3, r7, r4
 80038b4:	193a      	adds	r2, r7, r4
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 80038bc:	197b      	adds	r3, r7, r5
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	059b      	lsls	r3, r3, #22
 80038c2:	0d9b      	lsrs	r3, r3, #22
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	197b      	adds	r3, r7, r5
 80038c8:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 80038ca:	197b      	adds	r3, r7, r5
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	001a      	movs	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4353      	muls	r3, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff fa6d 	bl	8002db4 <__aeabi_ui2d>
 80038da:	4a0c      	ldr	r2, [pc, #48]	@ (800390c <VL53L1X_SetInterMeasurementInMs+0x84>)
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <VL53L1X_SetInterMeasurementInMs+0x88>)
 80038de:	f7fe fba7 	bl	8002030 <__aeabi_dmul>
 80038e2:	0002      	movs	r2, r0
 80038e4:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 80038e6:	0010      	movs	r0, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	f7fc fdc1 	bl	8000470 <__aeabi_d2uiz>
 80038ee:	0002      	movs	r2, r0
 80038f0:	1dbb      	adds	r3, r7, #6
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	216c      	movs	r1, #108	@ 0x6c
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fcfc 	bl	80042f4 <VL53L1_WrDWord>
	return status;
 80038fc:	193b      	adds	r3, r7, r4
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b25b      	sxtb	r3, r3

}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bdb0      	pop	{r4, r5, r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	33333333 	.word	0x33333333
 8003910:	3ff13333 	.word	0x3ff13333

08003914 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003922:	240f      	movs	r4, #15
 8003924:	193b      	adds	r3, r7, r4
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800392a:	250c      	movs	r5, #12
 800392c:	197a      	adds	r2, r7, r5
 800392e:	1dbb      	adds	r3, r7, #6
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	2196      	movs	r1, #150	@ 0x96
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fc1f 	bl	8004178 <VL53L1_RdWord>
 800393a:	0003      	movs	r3, r0
 800393c:	0019      	movs	r1, r3
 800393e:	0020      	movs	r0, r4
 8003940:	183b      	adds	r3, r7, r0
 8003942:	183a      	adds	r2, r7, r0
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800394a:	197b      	adds	r3, r7, r5
 800394c:	881a      	ldrh	r2, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	801a      	strh	r2, [r3, #0]
	return status;
 8003952:	183b      	adds	r3, r7, r0
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b25b      	sxtb	r3, r3
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bdb0      	pop	{r4, r5, r7, pc}

08003960 <VL53L1X_GetSignalRate>:
	*ambPerSp=(uint16_t) (200.0 * AmbientRate / SpNb);
	return status;
}

VL53L1X_ERROR VL53L1X_GetSignalRate(uint16_t dev, uint16_t *signal)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800396e:	240f      	movs	r4, #15
 8003970:	193b      	adds	r3, r7, r4
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 8003976:	250c      	movs	r5, #12
 8003978:	197a      	adds	r2, r7, r5
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	2198      	movs	r1, #152	@ 0x98
 8003980:	0018      	movs	r0, r3
 8003982:	f000 fbf9 	bl	8004178 <VL53L1_RdWord>
 8003986:	0003      	movs	r3, r0
 8003988:	0019      	movs	r1, r3
 800398a:	0020      	movs	r0, r4
 800398c:	183b      	adds	r3, r7, r0
 800398e:	183a      	adds	r2, r7, r0
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	701a      	strb	r2, [r3, #0]
		VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0, &tmp);
	*signal = tmp*8;
 8003996:	197b      	adds	r3, r7, r5
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	b29a      	uxth	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	801a      	strh	r2, [r3, #0]
	return status;
 80039a2:	183b      	adds	r3, r7, r0
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b25b      	sxtb	r3, r3
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bdb0      	pop	{r4, r5, r7, pc}

080039b0 <VL53L1X_GetAmbientRate>:
	*spNb = tmp >> 8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetAmbientRate(uint16_t dev, uint16_t *ambRate)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	0002      	movs	r2, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	1dbb      	adds	r3, r7, #6
 80039bc:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80039be:	240f      	movs	r4, #15
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev, RESULT__AMBIENT_COUNT_RATE_MCPS_SD, &tmp);
 80039c6:	250c      	movs	r5, #12
 80039c8:	197a      	adds	r2, r7, r5
 80039ca:	1dbb      	adds	r3, r7, #6
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	2190      	movs	r1, #144	@ 0x90
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fbd1 	bl	8004178 <VL53L1_RdWord>
 80039d6:	0003      	movs	r3, r0
 80039d8:	0019      	movs	r1, r3
 80039da:	0020      	movs	r0, r4
 80039dc:	183b      	adds	r3, r7, r0
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]
	*ambRate = tmp*8;
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	801a      	strh	r2, [r3, #0]
	return status;
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b25b      	sxtb	r3, r3
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bdb0      	pop	{r4, r5, r7, pc}

08003a00 <VL53L1X_GetRangeStatus>:

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	0002      	movs	r2, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003a0e:	250f      	movs	r5, #15
 8003a10:	197b      	adds	r3, r7, r5
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
	uint8_t RgSt;

	*rangeStatus = 255;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	22ff      	movs	r2, #255	@ 0xff
 8003a1a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8003a1c:	240e      	movs	r4, #14
 8003a1e:	193a      	adds	r2, r7, r4
 8003a20:	1dbb      	adds	r3, r7, #6
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	2189      	movs	r1, #137	@ 0x89
 8003a26:	0018      	movs	r0, r3
 8003a28:	f000 fb82 	bl	8004130 <VL53L1_RdByte>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	0019      	movs	r1, r3
 8003a30:	197b      	adds	r3, r7, r5
 8003a32:	197a      	adds	r2, r7, r5
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	701a      	strb	r2, [r3, #0]
	RgSt = RgSt & 0x1F;
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	221f      	movs	r2, #31
 8003a40:	4013      	ands	r3, r2
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	701a      	strb	r2, [r3, #0]
	if (RgSt < 24)
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b17      	cmp	r3, #23
 8003a4e:	d806      	bhi.n	8003a5e <VL53L1X_GetRangeStatus+0x5e>
		*rangeStatus = status_rtn[RgSt];
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	001a      	movs	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <VL53L1X_GetRangeStatus+0x70>)
 8003a58:	5c9a      	ldrb	r2, [r3, r2]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	701a      	strb	r2, [r3, #0]
	return status;
 8003a5e:	230f      	movs	r3, #15
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b25b      	sxtb	r3, r3
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	080071d8 	.word	0x080071d8

08003a74 <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	1dbb      	adds	r3, r7, #6
 8003a7e:	801a      	strh	r2, [r3, #0]
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	1c0a      	adds	r2, r1, #0
 8003a84:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003a86:	240f      	movs	r4, #15
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	210c      	movs	r1, #12
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	801a      	strh	r2, [r3, #0]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	211e      	movs	r1, #30
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fbec 	bl	8004284 <VL53L1_WrWord>
 8003aac:	0003      	movs	r3, r0
 8003aae:	0019      	movs	r1, r3
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	193a      	adds	r2, r7, r4
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	701a      	strb	r2, [r3, #0]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8003aba:	1dbb      	adds	r3, r7, #6
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fbde 	bl	8004284 <VL53L1_WrWord>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	0019      	movs	r1, r3
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	193a      	adds	r2, r7, r4
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8003ad6:	1dbb      	adds	r3, r7, #6
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2122      	movs	r1, #34	@ 0x22
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fbd0 	bl	8004284 <VL53L1_WrWord>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	193a      	adds	r2, r7, r4
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
	return status;
 8003af2:	193b      	adds	r3, r7, r4
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b25b      	sxtb	r3, r3
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b005      	add	sp, #20
 8003afe:	bd90      	pop	{r4, r7, pc}

08003b00 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	0002      	movs	r2, r0
 8003b08:	1dbb      	adds	r3, r7, #6
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	1c0a      	adds	r2, r1, #0
 8003b10:	801a      	strh	r2, [r3, #0]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8003b12:	240f      	movs	r4, #15
 8003b14:	193b      	adds	r3, r7, r4
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrWord(dev,
 8003b1a:	1dbb      	adds	r3, r7, #6
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2118      	movs	r1, #24
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fbae 	bl	8004284 <VL53L1_WrWord>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	193a      	adds	r2, r7, r4
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	211a      	movs	r1, #26
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 fba0 	bl	8004284 <VL53L1_WrWord>
 8003b44:	0003      	movs	r3, r0
 8003b46:	0019      	movs	r1, r3
 8003b48:	193b      	adds	r3, r7, r4
 8003b4a:	193a      	adds	r2, r7, r4
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	701a      	strb	r2, [r3, #0]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	025b      	lsls	r3, r3, #9
 8003b58:	22fa      	movs	r2, #250	@ 0xfa
 8003b5a:	0091      	lsls	r1, r2, #2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7fc fb5d 	bl	800021c <__divsi3>
 8003b62:	0003      	movs	r3, r0
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	2116      	movs	r1, #22
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 fb89 	bl	8004284 <VL53L1_WrWord>
 8003b72:	0003      	movs	r3, r0
 8003b74:	0019      	movs	r1, r3
 8003b76:	193b      	adds	r3, r7, r4
 8003b78:	193a      	adds	r2, r7, r4
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	701a      	strb	r2, [r3, #0]
	return status;
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b25b      	sxtb	r3, r3
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b005      	add	sp, #20
 8003b8c:	bd90      	pop	{r4, r7, pc}

08003b8e <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	0005      	movs	r5, r0
 8003b96:	000c      	movs	r4, r1
 8003b98:	0010      	movs	r0, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	1dbb      	adds	r3, r7, #6
 8003b9e:	1c2a      	adds	r2, r5, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	1c22      	adds	r2, r4, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	1c7b      	adds	r3, r7, #1
 8003bb0:	1c0a      	adds	r2, r1, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003bb4:	250f      	movs	r5, #15
 8003bb6:	197b      	adds	r3, r7, r5
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
	uint8_t Temp = 0;
 8003bbc:	240e      	movs	r4, #14
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 8003bc4:	193a      	adds	r2, r7, r4
 8003bc6:	1dbb      	adds	r3, r7, #6
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	2146      	movs	r1, #70	@ 0x46
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 faaf 	bl	8004130 <VL53L1_RdByte>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	0028      	movs	r0, r5
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	183a      	adds	r2, r7, r0
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x47;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2247      	movs	r2, #71	@ 0x47
 8003be8:	4013      	ands	r3, r2
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	701a      	strb	r2, [r3, #0]
	if (IntOnNoTarget == 0) {
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <VL53L1X_SetDistanceThreshold+0x98>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
			       (Temp | (Window & 0x07)));
 8003bfa:	1c7b      	adds	r3, r7, #1
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	2207      	movs	r2, #7
 8003c02:	4013      	ands	r3, r2
 8003c04:	b25a      	sxtb	r2, r3
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	b25b      	sxtb	r3, r3
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	183c      	adds	r4, r7, r0
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	2146      	movs	r1, #70	@ 0x46
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fb08 	bl	8004230 <VL53L1_WrByte>
 8003c20:	0003      	movs	r3, r0
 8003c22:	7023      	strb	r3, [r4, #0]
 8003c24:	e019      	b.n	8003c5a <VL53L1X_SetDistanceThreshold+0xcc>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
			       ((Temp | (Window & 0x07)) | 0x40));
 8003c26:	1c7b      	adds	r3, r7, #1
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b25a      	sxtb	r2, r3
 8003c32:	230e      	movs	r3, #14
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	2240      	movs	r2, #64	@ 0x40
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b25b      	sxtb	r3, r3
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	230f      	movs	r3, #15
 8003c48:	18fc      	adds	r4, r7, r3
 8003c4a:	1dbb      	adds	r3, r7, #6
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	2146      	movs	r1, #70	@ 0x46
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 faed 	bl	8004230 <VL53L1_WrByte>
 8003c56:	0003      	movs	r3, r0
 8003c58:	7023      	strb	r3, [r4, #0]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	2172      	movs	r1, #114	@ 0x72
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 fb0d 	bl	8004284 <VL53L1_WrWord>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	240f      	movs	r4, #15
 8003c70:	193b      	adds	r3, r7, r4
 8003c72:	193a      	adds	r2, r7, r4
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	1dbb      	adds	r3, r7, #6
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	2174      	movs	r1, #116	@ 0x74
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 fafd 	bl	8004284 <VL53L1_WrWord>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	193a      	adds	r2, r7, r4
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	701a      	strb	r2, [r3, #0]
	return status;
 8003c98:	193b      	adds	r3, r7, r4
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b25b      	sxtb	r3, r3
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bdb0      	pop	{r4, r5, r7, pc}

08003ca6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003caa:	f000 fe39 	bl	8004920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cae:	f000 f812 	bl	8003cd6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb2:	f000 f8e3 	bl	8003e7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cb6:	f000 f8b1 	bl	8003e1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003cba:	f000 f86f 	bl	8003d9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(VL53L1__Init())
 8003cbe:	f000 fb43 	bl	8004348 <VL53L1__Init>
 8003cc2:	1e03      	subs	r3, r0, #0
 8003cc4:	d001      	beq.n	8003cca <main+0x24>
	  while(1){};
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	e7fd      	b.n	8003cc6 <main+0x20>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  VL53L1X_StartRanging(VL53L1__ADDR);
 8003cca:	2052      	movs	r0, #82	@ 0x52
 8003ccc:	f7ff fa6a 	bl	80031a4 <VL53L1X_StartRanging>
  while (1)
  {
    /* USER CODE END WHILE */
	  VL53L1__testRanging();
 8003cd0:	f000 fbc4 	bl	800445c <VL53L1__testRanging>
 8003cd4:	e7fc      	b.n	8003cd0 <main+0x2a>

08003cd6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cd6:	b590      	push	{r4, r7, lr}
 8003cd8:	b097      	sub	sp, #92	@ 0x5c
 8003cda:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cdc:	2428      	movs	r4, #40	@ 0x28
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	2330      	movs	r3, #48	@ 0x30
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f003 f89e 	bl	8006e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cec:	2318      	movs	r3, #24
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f003 f896 	bl	8006e28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	0018      	movs	r0, r3
 8003d00:	2314      	movs	r3, #20
 8003d02:	001a      	movs	r2, r3
 8003d04:	2100      	movs	r1, #0
 8003d06:	f003 f88f 	bl	8006e28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d0a:	0021      	movs	r1, r4
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2201      	movs	r2, #1
 8003d16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	2202      	movs	r2, #2
 8003d22:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	0212      	lsls	r2, r2, #8
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	0352      	lsls	r2, r2, #13
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	2200      	movs	r2, #0
 8003d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f001 ff55 	bl	8005bec <HAL_RCC_OscConfig>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d001      	beq.n	8003d4a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003d46:	f000 f911 	bl	8003f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d4a:	2118      	movs	r1, #24
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	2207      	movs	r2, #7
 8003d50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	2202      	movs	r2, #2
 8003d56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	2200      	movs	r2, #0
 8003d62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2101      	movs	r1, #1
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f002 fa5d 	bl	8006228 <HAL_RCC_ClockConfig>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d001      	beq.n	8003d76 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003d72:	f000 f8fb 	bl	8003f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	2220      	movs	r2, #32
 8003d7a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	0018      	movs	r0, r3
 8003d86:	f002 fb95 	bl	80064b4 <HAL_RCCEx_PeriphCLKConfig>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d001      	beq.n	8003d92 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003d8e:	f000 f8ed 	bl	8003f6c <Error_Handler>
  }
}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b017      	add	sp, #92	@ 0x5c
 8003d98:	bd90      	pop	{r4, r7, pc}
	...

08003d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003da2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e14 <MX_I2C1_Init+0x78>)
 8003da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003da8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e18 <MX_I2C1_Init+0x7c>)
 8003daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003dac:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dca:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f001 f86b 	bl	8004eb4 <HAL_I2C_Init>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d001      	beq.n	8003de6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003de2:	f000 f8c3 	bl	8003f6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003de8:	2100      	movs	r1, #0
 8003dea:	0018      	movs	r0, r3
 8003dec:	f001 fe66 	bl	8005abc <HAL_I2CEx_ConfigAnalogFilter>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003df4:	f000 f8ba 	bl	8003f6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <MX_I2C1_Init+0x74>)
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f001 fea9 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 8003e02:	1e03      	subs	r3, r0, #0
 8003e04:	d001      	beq.n	8003e0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003e06:	f000 f8b1 	bl	8003f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000094 	.word	0x20000094
 8003e14:	40005400 	.word	0x40005400
 8003e18:	00201d2b 	.word	0x00201d2b

08003e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e20:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e22:	4a15      	ldr	r2, [pc, #84]	@ (8003e78 <MX_USART2_UART_Init+0x5c>)
 8003e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003e26:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e28:	2296      	movs	r2, #150	@ 0x96
 8003e2a:	0212      	lsls	r2, r2, #8
 8003e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e34:	4b0f      	ldr	r3, [pc, #60]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e42:	220c      	movs	r2, #12
 8003e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e58:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e5e:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <MX_USART2_UART_Init+0x58>)
 8003e60:	0018      	movs	r0, r3
 8003e62:	f002 fc05 	bl	8006670 <HAL_UART_Init>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d001      	beq.n	8003e6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e6a:	f000 f87f 	bl	8003f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200000e8 	.word	0x200000e8
 8003e78:	40004400 	.word	0x40004400

08003e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b08b      	sub	sp, #44	@ 0x2c
 8003e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e82:	2414      	movs	r4, #20
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	0018      	movs	r0, r3
 8003e88:	2314      	movs	r3, #20
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f002 ffcb 	bl	8006e28 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e92:	4b34      	ldr	r3, [pc, #208]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003e98:	2180      	movs	r1, #128	@ 0x80
 8003e9a:	0309      	lsls	r1, r1, #12
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eae:	4b2d      	ldr	r3, [pc, #180]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003eb4:	2180      	movs	r1, #128	@ 0x80
 8003eb6:	03c9      	lsls	r1, r1, #15
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	615a      	str	r2, [r3, #20]
 8003ebc:	4b29      	ldr	r3, [pc, #164]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	2380      	movs	r3, #128	@ 0x80
 8003ec2:	03db      	lsls	r3, r3, #15
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eca:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b25      	ldr	r3, [pc, #148]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ed0:	2180      	movs	r1, #128	@ 0x80
 8003ed2:	0289      	lsls	r1, r1, #10
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003eec:	2180      	movs	r1, #128	@ 0x80
 8003eee:	02c9      	lsls	r1, r1, #11
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	615a      	str	r2, [r3, #20]
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <MX_GPIO_Init+0xe8>)
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	2380      	movs	r3, #128	@ 0x80
 8003efa:	02db      	lsls	r3, r3, #11
 8003efc:	4013      	ands	r3, r2
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f02:	2390      	movs	r3, #144	@ 0x90
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	2200      	movs	r2, #0
 8003f08:	2120      	movs	r1, #32
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 ffb4 	bl	8004e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	0192      	lsls	r2, r2, #6
 8003f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	2284      	movs	r2, #132	@ 0x84
 8003f1c:	0392      	lsls	r2, r2, #14
 8003f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <MX_GPIO_Init+0xec>)
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	f000 fe33 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f32:	0021      	movs	r1, r4
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2220      	movs	r2, #32
 8003f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	187a      	adds	r2, r7, r1
 8003f4e:	2390      	movs	r3, #144	@ 0x90
 8003f50:	05db      	lsls	r3, r3, #23
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 fe1f 	bl	8004b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b00b      	add	sp, #44	@ 0x2c
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	40021000 	.word	0x40021000
 8003f68:	48000800 	.word	0x48000800

08003f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f70:	b672      	cpsid	i
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	e7fd      	b.n	8003f74 <Error_Handler+0x8>

08003f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fbc <HAL_MspInit+0x44>)
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <HAL_MspInit+0x44>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	619a      	str	r2, [r3, #24]
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <HAL_MspInit+0x44>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_MspInit+0x44>)
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <HAL_MspInit+0x44>)
 8003f9c:	2180      	movs	r1, #128	@ 0x80
 8003f9e:	0549      	lsls	r1, r1, #21
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	61da      	str	r2, [r3, #28]
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_MspInit+0x44>)
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	2380      	movs	r3, #128	@ 0x80
 8003faa:	055b      	lsls	r3, r3, #21
 8003fac:	4013      	ands	r3, r2
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b08b      	sub	sp, #44	@ 0x2c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	2414      	movs	r4, #20
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	0018      	movs	r0, r3
 8003fce:	2314      	movs	r3, #20
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f002 ff28 	bl	8006e28 <memset>
  if(hi2c->Instance==I2C1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_I2C_MspInit+0x90>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d132      	bne.n	8004048 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 8003fe8:	2180      	movs	r1, #128	@ 0x80
 8003fea:	02c9      	lsls	r1, r1, #11
 8003fec:	430a      	orrs	r2, r1
 8003fee:	615a      	str	r2, [r3, #20]
 8003ff0:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	02db      	lsls	r3, r3, #11
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8003ffe:	193b      	adds	r3, r7, r4
 8004000:	22c0      	movs	r2, #192	@ 0xc0
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004006:	0021      	movs	r1, r4
 8004008:	187b      	adds	r3, r7, r1
 800400a:	2212      	movs	r2, #18
 800400c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004014:	187b      	adds	r3, r7, r1
 8004016:	2203      	movs	r2, #3
 8004018:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800401a:	187b      	adds	r3, r7, r1
 800401c:	2201      	movs	r2, #1
 800401e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004020:	187b      	adds	r3, r7, r1
 8004022:	4a0d      	ldr	r2, [pc, #52]	@ (8004058 <HAL_I2C_MspInit+0x98>)
 8004024:	0019      	movs	r1, r3
 8004026:	0010      	movs	r0, r2
 8004028:	f000 fdb6 	bl	8004b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	0389      	lsls	r1, r1, #14
 8004036:	430a      	orrs	r2, r1
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_I2C_MspInit+0x94>)
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	039b      	lsls	r3, r3, #14
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b00b      	add	sp, #44	@ 0x2c
 800404e:	bd90      	pop	{r4, r7, pc}
 8004050:	40005400 	.word	0x40005400
 8004054:	40021000 	.word	0x40021000
 8004058:	48000400 	.word	0x48000400

0800405c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b08b      	sub	sp, #44	@ 0x2c
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	2414      	movs	r4, #20
 8004066:	193b      	adds	r3, r7, r4
 8004068:	0018      	movs	r0, r3
 800406a:	2314      	movs	r3, #20
 800406c:	001a      	movs	r2, r3
 800406e:	2100      	movs	r1, #0
 8004070:	f002 feda 	bl	8006e28 <memset>
  if(huart->Instance==USART2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1c      	ldr	r2, [pc, #112]	@ (80040ec <HAL_UART_MspInit+0x90>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d132      	bne.n	80040e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800407e:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 8004084:	2180      	movs	r1, #128	@ 0x80
 8004086:	0289      	lsls	r1, r1, #10
 8004088:	430a      	orrs	r2, r1
 800408a:	61da      	str	r2, [r3, #28]
 800408c:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	0289      	lsls	r1, r1, #10
 80040a4:	430a      	orrs	r2, r1
 80040a6:	615a      	str	r2, [r3, #20]
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <HAL_UART_MspInit+0x94>)
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	2380      	movs	r3, #128	@ 0x80
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040b6:	0021      	movs	r1, r4
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	220c      	movs	r2, #12
 80040bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2202      	movs	r2, #2
 80040c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2203      	movs	r2, #3
 80040ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2201      	movs	r2, #1
 80040d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	187a      	adds	r2, r7, r1
 80040d8:	2390      	movs	r3, #144	@ 0x90
 80040da:	05db      	lsls	r3, r3, #23
 80040dc:	0011      	movs	r1, r2
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fd5a 	bl	8004b98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80040e4:	46c0      	nop			@ (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b00b      	add	sp, #44	@ 0x2c
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	40004400 	.word	0x40004400
 80040f0:	40021000 	.word	0x40021000

080040f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	e7fd      	b.n	80040f8 <NMI_Handler+0x4>

080040fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	e7fd      	b.n	8004100 <HardFault_Handler+0x4>

08004104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800411c:	f000 fc48 	bl	80049b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <VL53L1_RdByte>:
//#include <math.h>

extern I2C_HandleTypeDef VL53L1__PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af04      	add	r7, sp, #16
 8004136:	603a      	str	r2, [r7, #0]
 8004138:	1dbb      	adds	r3, r7, #6
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	1dbb      	adds	r3, r7, #6
 800414a:	8819      	ldrh	r1, [r3, #0]
 800414c:	4809      	ldr	r0, [pc, #36]	@ (8004174 <VL53L1_RdByte+0x44>)
 800414e:	2314      	movs	r3, #20
 8004150:	9302      	str	r3, [sp, #8]
 8004152:	2301      	movs	r3, #1
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2302      	movs	r3, #2
 800415c:	f001 f87e 	bl	800525c <HAL_I2C_Mem_Read>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d002      	beq.n	800416a <VL53L1_RdByte+0x3a>
		return VL53L1__IO_ERROR;
 8004164:	230d      	movs	r3, #13
 8004166:	425b      	negs	r3, r3
 8004168:	e000      	b.n	800416c <VL53L1_RdByte+0x3c>
	else
		return 0;
 800416a:	2300      	movs	r3, #0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000094 	.word	0x20000094

08004178 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af04      	add	r7, sp, #16
 800417e:	603a      	str	r2, [r7, #0]
 8004180:	1dbb      	adds	r3, r7, #6
 8004182:	1c02      	adds	r2, r0, #0
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	1c0a      	adds	r2, r1, #0
 800418a:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	8819      	ldrh	r1, [r3, #0]
 8004194:	4810      	ldr	r0, [pc, #64]	@ (80041d8 <VL53L1_RdWord+0x60>)
 8004196:	2314      	movs	r3, #20
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	2302      	movs	r3, #2
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2302      	movs	r3, #2
 80041a4:	f001 f85a 	bl	800525c <HAL_I2C_Mem_Read>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d002      	beq.n	80041b2 <VL53L1_RdWord+0x3a>
		return VL53L1__IO_ERROR;
 80041ac:	230d      	movs	r3, #13
 80041ae:	425b      	negs	r3, r3
 80041b0:	e00e      	b.n	80041d0 <VL53L1_RdWord+0x58>
	else {
		*data=__REVSH(*data);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b21a      	sxth	r2, r3
 80041b8:	210e      	movs	r1, #14
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	801a      	strh	r2, [r3, #0]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	ba5b      	rev16	r3, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	801a      	strh	r2, [r3, #0]
		return 0;
 80041ce:	2300      	movs	r3, #0
	}
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b004      	add	sp, #16
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000094 	.word	0x20000094

080041dc <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 80041dc:	b5b0      	push	{r4, r5, r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	250e      	movs	r5, #14
 80041e8:	197b      	adds	r3, r7, r5
 80041ea:	1c02      	adds	r2, r0, #0
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	200c      	movs	r0, #12
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	1c0a      	adds	r2, r1, #0
 80041f4:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, I2C_COMM_TIMEOUT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	183a      	adds	r2, r7, r0
 80041fc:	8814      	ldrh	r4, [r2, #0]
 80041fe:	197a      	adds	r2, r7, r5
 8004200:	8811      	ldrh	r1, [r2, #0]
 8004202:	480a      	ldr	r0, [pc, #40]	@ (800422c <VL53L1_ReadMulti+0x50>)
 8004204:	2214      	movs	r2, #20
 8004206:	9202      	str	r2, [sp, #8]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2302      	movs	r3, #2
 8004210:	0022      	movs	r2, r4
 8004212:	f001 f823 	bl	800525c <HAL_I2C_Mem_Read>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d002      	beq.n	8004220 <VL53L1_ReadMulti+0x44>
		return VL53L1__IO_ERROR;
 800421a:	230d      	movs	r3, #13
 800421c:	425b      	negs	r3, r3
 800421e:	e000      	b.n	8004222 <VL53L1_ReadMulti+0x46>
	else
		return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bdb0      	pop	{r4, r5, r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	20000094 	.word	0x20000094

08004230 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af04      	add	r7, sp, #16
 8004236:	0004      	movs	r4, r0
 8004238:	0008      	movs	r0, r1
 800423a:	0011      	movs	r1, r2
 800423c:	1dbb      	adds	r3, r7, #6
 800423e:	1c22      	adds	r2, r4, #0
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	1c02      	adds	r2, r0, #0
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	1cfb      	adds	r3, r7, #3
 800424a:	1c0a      	adds	r2, r1, #0
 800424c:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	1dbb      	adds	r3, r7, #6
 8004254:	8819      	ldrh	r1, [r3, #0]
 8004256:	480a      	ldr	r0, [pc, #40]	@ (8004280 <VL53L1_WrByte+0x50>)
 8004258:	2314      	movs	r3, #20
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	2301      	movs	r3, #1
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	1cfb      	adds	r3, r7, #3
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2302      	movs	r3, #2
 8004266:	f000 fecb 	bl	8005000 <HAL_I2C_Mem_Write>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d002      	beq.n	8004274 <VL53L1_WrByte+0x44>
		return VL53L1__IO_ERROR;
 800426e:	230d      	movs	r3, #13
 8004270:	425b      	negs	r3, r3
 8004272:	e000      	b.n	8004276 <VL53L1_WrByte+0x46>
	else
		return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b003      	add	sp, #12
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	20000094 	.word	0x20000094

08004284 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af04      	add	r7, sp, #16
 800428a:	0004      	movs	r4, r0
 800428c:	0008      	movs	r0, r1
 800428e:	0011      	movs	r1, r2
 8004290:	1dbb      	adds	r3, r7, #6
 8004292:	1c22      	adds	r2, r4, #0
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	1c02      	adds	r2, r0, #0
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	1cbb      	adds	r3, r7, #2
 800429e:	1c0a      	adds	r2, r1, #0
 80042a0:	801a      	strh	r2, [r3, #0]
	data=__REVSH(data);
 80042a2:	1cbb      	adds	r3, r7, #2
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b21a      	sxth	r2, r3
 80042a8:	210e      	movs	r1, #14
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	ba5b      	rev16	r3, r3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	1cbb      	adds	r3, r7, #2
 80042bc:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	1dbb      	adds	r3, r7, #6
 80042c4:	8819      	ldrh	r1, [r3, #0]
 80042c6:	480a      	ldr	r0, [pc, #40]	@ (80042f0 <VL53L1_WrWord+0x6c>)
 80042c8:	2314      	movs	r3, #20
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	2302      	movs	r3, #2
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	1cbb      	adds	r3, r7, #2
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2302      	movs	r3, #2
 80042d6:	f000 fe93 	bl	8005000 <HAL_I2C_Mem_Write>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d002      	beq.n	80042e4 <VL53L1_WrWord+0x60>
		return VL53L1__IO_ERROR;
 80042de:	230d      	movs	r3, #13
 80042e0:	425b      	negs	r3, r3
 80042e2:	e000      	b.n	80042e6 <VL53L1_WrWord+0x62>
	else
		return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b005      	add	sp, #20
 80042ec:	bd90      	pop	{r4, r7, pc}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	20000094 	.word	0x20000094

080042f4 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	603a      	str	r2, [r7, #0]
 80042fc:	1dbb      	adds	r3, r7, #6
 80042fe:	1c02      	adds	r2, r0, #0
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	1c0a      	adds	r2, r1, #0
 8004306:	801a      	strh	r2, [r3, #0]
	data=__REV(data);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	ba1b      	rev	r3, r3
 8004310:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	881a      	ldrh	r2, [r3, #0]
 8004316:	1dbb      	adds	r3, r7, #6
 8004318:	8819      	ldrh	r1, [r3, #0]
 800431a:	480a      	ldr	r0, [pc, #40]	@ (8004344 <VL53L1_WrDWord+0x50>)
 800431c:	2314      	movs	r3, #20
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	2304      	movs	r3, #4
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	003b      	movs	r3, r7
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2302      	movs	r3, #2
 800432a:	f000 fe69 	bl	8005000 <HAL_I2C_Mem_Write>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d002      	beq.n	8004338 <VL53L1_WrDWord+0x44>
		return VL53L1__IO_ERROR;
 8004332:	230d      	movs	r3, #13
 8004334:	425b      	negs	r3, r3
 8004336:	e000      	b.n	800433a <VL53L1_WrDWord+0x46>
	else
		return 0;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	20000094 	.word	0x20000094

08004348 <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af02      	add	r7, sp, #8
	uint8_t refRegs[4] = {0,0,0,0};
 800434e:	003b      	movs	r3, r7
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
	uint8_t status =0;
 8004354:	1dfb      	adds	r3, r7, #7
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(1);
	if (status)
		return (status);
#endif
	HAL_Delay(4);
 800435a:	2004      	movs	r0, #4
 800435c:	f000 fb44 	bl	80049e8 <HAL_Delay>

	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1
	VL53L1_ReadMulti(VL53L1__ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 8004360:	003a      	movs	r2, r7
 8004362:	2310      	movs	r3, #16
 8004364:	33ff      	adds	r3, #255	@ 0xff
 8004366:	0019      	movs	r1, r3
 8004368:	2304      	movs	r3, #4
 800436a:	2052      	movs	r0, #82	@ 0x52
 800436c:	f7ff ff36 	bl	80041dc <VL53L1_ReadMulti>
	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 8004370:	003b      	movs	r3, r7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2bea      	cmp	r3, #234	@ 0xea
 8004376:	d107      	bne.n	8004388 <VL53L1__Init+0x40>
 8004378:	003b      	movs	r3, r7
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2bcc      	cmp	r3, #204	@ 0xcc
 800437e:	d103      	bne.n	8004388 <VL53L1__Init+0x40>
 8004380:	003b      	movs	r3, r7
 8004382:	789b      	ldrb	r3, [r3, #2]
 8004384:	2b10      	cmp	r3, #16
 8004386:	d001      	beq.n	800438c <VL53L1__Init+0x44>
		return (1);
 8004388:	2301      	movs	r3, #1
 800438a:	e061      	b.n	8004450 <VL53L1__Init+0x108>


	// VL53L1X sensor is available
	/* initializing: default setting  */
	status |= VL53L1X_SensorInit(VL53L1__ADDR);
 800438c:	2052      	movs	r0, #82	@ 0x52
 800438e:	f7fe fe1f 	bl	8002fd0 <VL53L1X_SensorInit>
 8004392:	0003      	movs	r3, r0
 8004394:	001a      	movs	r2, r3
 8004396:	1dfb      	adds	r3, r7, #7
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b25b      	sxtb	r3, r3
 800439c:	4313      	orrs	r3, r2
 800439e:	b25a      	sxtb	r2, r3
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	701a      	strb	r2, [r3, #0]
	/* initializing: device calibration settings*/
	status |= VL53L1X_SetOffset(VL53L1__ADDR, VL53L1__CALIB_OFFSET);
 80043a4:	2319      	movs	r3, #25
 80043a6:	425b      	negs	r3, r3
 80043a8:	0019      	movs	r1, r3
 80043aa:	2052      	movs	r0, #82	@ 0x52
 80043ac:	f7ff fb62 	bl	8003a74 <VL53L1X_SetOffset>
 80043b0:	0003      	movs	r3, r0
 80043b2:	001a      	movs	r2, r3
 80043b4:	1dfb      	adds	r3, r7, #7
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b25a      	sxtb	r2, r3
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_SetXtalk(VL53L1__ADDR, VL53L1__CALIB_XTALK);
 80043c2:	2100      	movs	r1, #0
 80043c4:	2052      	movs	r0, #82	@ 0x52
 80043c6:	f7ff fb9b 	bl	8003b00 <VL53L1X_SetXtalk>
 80043ca:	0003      	movs	r3, r0
 80043cc:	001a      	movs	r2, r3
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	4313      	orrs	r3, r2
 80043d6:	b25a      	sxtb	r2, r3
 80043d8:	1dfb      	adds	r3, r7, #7
 80043da:	701a      	strb	r2, [r3, #0]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(VL53L1__ADDR, VL53L1__DISTANCE_MODE);
 80043dc:	2102      	movs	r1, #2
 80043de:	2052      	movs	r0, #82	@ 0x52
 80043e0:	f7ff f94c 	bl	800367c <VL53L1X_SetDistanceMode>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b25a      	sxtb	r2, r3
 80043f2:	1dfb      	adds	r3, r7, #7
 80043f4:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
 80043f6:	2114      	movs	r1, #20
 80043f8:	2052      	movs	r0, #82	@ 0x52
 80043fa:	f7fe ff57 	bl	80032ac <VL53L1X_SetTimingBudgetInMs>
 80043fe:	0003      	movs	r3, r0
 8004400:	001a      	movs	r2, r3
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b25b      	sxtb	r3, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	b25a      	sxtb	r2, r3
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
 8004410:	2119      	movs	r1, #25
 8004412:	2052      	movs	r0, #82	@ 0x52
 8004414:	f7ff fa38 	bl	8003888 <VL53L1X_SetInterMeasurementInMs>
 8004418:	0003      	movs	r3, r0
 800441a:	001a      	movs	r2, r3
 800441c:	1dfb      	adds	r3, r7, #7
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b25b      	sxtb	r3, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	b25a      	sxtb	r2, r3
 8004426:	1dfb      	adds	r3, r7, #7
 8004428:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);
 800442a:	4a0b      	ldr	r2, [pc, #44]	@ (8004458 <VL53L1__Init+0x110>)
 800442c:	490a      	ldr	r1, [pc, #40]	@ (8004458 <VL53L1__Init+0x110>)
 800442e:	2300      	movs	r3, #0
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	2052      	movs	r0, #82	@ 0x52
 8004436:	f7ff fbaa 	bl	8003b8e <VL53L1X_SetDistanceThreshold>
 800443a:	0003      	movs	r3, r0
 800443c:	001a      	movs	r2, r3
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b25b      	sxtb	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b25a      	sxtb	r2, r3
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	701a      	strb	r2, [r3, #0]

	return (status);
 800444c:	1dfb      	adds	r3, r7, #7
 800444e:	781b      	ldrb	r3, [r3, #0]
};
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}
 8004458:	00001388 	.word	0x00001388

0800445c <VL53L1__testRanging>:
/*************************************************************
 * @brief: 	performing one "good" ranging,
 * 			saving results on global variables for
 * 			STM32CubeMonitor
 ************************************************************/
void VL53L1__testRanging(){
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
	static uint16_t curTB=VL53L1__TIMING_BUDGET;
	static uint16_t curDM=VL53L1__DISTANCE_MODE;
	static float DistArray[TESTGESTURE_DIM_ARR];	// storing last DIM_ARR values of "Distance" to compute avg value and std dev.
	static uint16_t posArr=0;			// position in DistArray to store next "Distance" value
	static uint16_t	sampleNum=0;
	float sumArr=0, sumSqArr=0;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
	static uint32_t	ReadingTime=0;
	uint32_t testingTime=HAL_GetTick();
 800446a:	f000 fab3 	bl	80049d4 <HAL_GetTick>
 800446e:	0003      	movs	r3, r0
 8004470:	60bb      	str	r3, [r7, #8]
	uint8_t status=0;
 8004472:	240f      	movs	r4, #15
 8004474:	193b      	adds	r3, r7, r4
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]

	//before starting rangings update sensor, if user changed ranging parameters through CubeMonitor
	if (TimingBudget!=curTB) {		// update TimingBudget if changed in repTB (by CubeMonitor)
 800447a:	4ba6      	ldr	r3, [pc, #664]	@ (8004714 <VL53L1__testRanging+0x2b8>)
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	4ba6      	ldr	r3, [pc, #664]	@ (8004718 <VL53L1__testRanging+0x2bc>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d049      	beq.n	800451a <VL53L1__testRanging+0xbe>
		status |= VL53L1X_StopRanging(VL53L1__ADDR);
 8004486:	2052      	movs	r0, #82	@ 0x52
 8004488:	f7fe feab 	bl	80031e2 <VL53L1X_StopRanging>
 800448c:	0003      	movs	r3, r0
 800448e:	001a      	movs	r2, r3
 8004490:	193b      	adds	r3, r7, r4
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b25b      	sxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b25a      	sxtb	r2, r3
 800449a:	193b      	adds	r3, r7, r4
 800449c:	701a      	strb	r2, [r3, #0]
		status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, TimingBudget);
 800449e:	4b9d      	ldr	r3, [pc, #628]	@ (8004714 <VL53L1__testRanging+0x2b8>)
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	0019      	movs	r1, r3
 80044a4:	2052      	movs	r0, #82	@ 0x52
 80044a6:	f7fe ff01 	bl	80032ac <VL53L1X_SetTimingBudgetInMs>
 80044aa:	0003      	movs	r3, r0
 80044ac:	001a      	movs	r2, r3
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b25a      	sxtb	r2, r3
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	701a      	strb	r2, [r3, #0]
		status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, (TimingBudget+VL53L1__TB_IM_DELTA));
 80044bc:	4b95      	ldr	r3, [pc, #596]	@ (8004714 <VL53L1__testRanging+0x2b8>)
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	3305      	adds	r3, #5
 80044c2:	0019      	movs	r1, r3
 80044c4:	2052      	movs	r0, #82	@ 0x52
 80044c6:	f7ff f9df 	bl	8003888 <VL53L1X_SetInterMeasurementInMs>
 80044ca:	0003      	movs	r3, r0
 80044cc:	001a      	movs	r2, r3
 80044ce:	193b      	adds	r3, r7, r4
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	4313      	orrs	r3, r2
 80044d6:	b25a      	sxtb	r2, r3
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	701a      	strb	r2, [r3, #0]
		curTB = TimingBudget;
 80044dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004714 <VL53L1__testRanging+0x2b8>)
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004718 <VL53L1__testRanging+0x2bc>)
 80044e2:	801a      	strh	r2, [r3, #0]
		status |= VL53L1X_StartRanging(VL53L1__ADDR);
 80044e4:	2052      	movs	r0, #82	@ 0x52
 80044e6:	f7fe fe5d 	bl	80031a4 <VL53L1X_StartRanging>
 80044ea:	0003      	movs	r3, r0
 80044ec:	001a      	movs	r2, r3
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b25a      	sxtb	r2, r3
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	701a      	strb	r2, [r3, #0]
		readCounter=0;
 80044fc:	4b87      	ldr	r3, [pc, #540]	@ (800471c <VL53L1__testRanging+0x2c0>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
		numerrors=0;
 8004502:	4b87      	ldr	r3, [pc, #540]	@ (8004720 <VL53L1__testRanging+0x2c4>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
		ErrorPerc=0;
 8004508:	4b86      	ldr	r3, [pc, #536]	@ (8004724 <VL53L1__testRanging+0x2c8>)
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
		posArr=0;
 800450e:	4b86      	ldr	r3, [pc, #536]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 8004510:	2200      	movs	r2, #0
 8004512:	801a      	strh	r2, [r3, #0]
		sampleNum=0;
 8004514:	4b85      	ldr	r3, [pc, #532]	@ (800472c <VL53L1__testRanging+0x2d0>)
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]
	}

	if (DistanceMode!=curDM) {		// update Distance Mode if changed by CubeMonitor
 800451a:	4b85      	ldr	r3, [pc, #532]	@ (8004730 <VL53L1__testRanging+0x2d4>)
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	4b85      	ldr	r3, [pc, #532]	@ (8004734 <VL53L1__testRanging+0x2d8>)
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d03a      	beq.n	800459c <VL53L1__testRanging+0x140>
		status |= VL53L1X_StopRanging(VL53L1__ADDR);
 8004526:	2052      	movs	r0, #82	@ 0x52
 8004528:	f7fe fe5b 	bl	80031e2 <VL53L1X_StopRanging>
 800452c:	0003      	movs	r3, r0
 800452e:	001a      	movs	r2, r3
 8004530:	240f      	movs	r4, #15
 8004532:	193b      	adds	r3, r7, r4
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b25b      	sxtb	r3, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	b25a      	sxtb	r2, r3
 800453c:	193b      	adds	r3, r7, r4
 800453e:	701a      	strb	r2, [r3, #0]
		status |= VL53L1X_SetDistanceMode(VL53L1__ADDR, DistanceMode);
 8004540:	4b7b      	ldr	r3, [pc, #492]	@ (8004730 <VL53L1__testRanging+0x2d4>)
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	0019      	movs	r1, r3
 8004546:	2052      	movs	r0, #82	@ 0x52
 8004548:	f7ff f898 	bl	800367c <VL53L1X_SetDistanceMode>
 800454c:	0003      	movs	r3, r0
 800454e:	001a      	movs	r2, r3
 8004550:	193b      	adds	r3, r7, r4
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b25b      	sxtb	r3, r3
 8004556:	4313      	orrs	r3, r2
 8004558:	b25a      	sxtb	r2, r3
 800455a:	193b      	adds	r3, r7, r4
 800455c:	701a      	strb	r2, [r3, #0]
		curDM = DistanceMode;
 800455e:	4b74      	ldr	r3, [pc, #464]	@ (8004730 <VL53L1__testRanging+0x2d4>)
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	4b74      	ldr	r3, [pc, #464]	@ (8004734 <VL53L1__testRanging+0x2d8>)
 8004564:	801a      	strh	r2, [r3, #0]
		status |= VL53L1X_StartRanging(VL53L1__ADDR);
 8004566:	2052      	movs	r0, #82	@ 0x52
 8004568:	f7fe fe1c 	bl	80031a4 <VL53L1X_StartRanging>
 800456c:	0003      	movs	r3, r0
 800456e:	001a      	movs	r2, r3
 8004570:	193b      	adds	r3, r7, r4
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b25a      	sxtb	r2, r3
 800457a:	193b      	adds	r3, r7, r4
 800457c:	701a      	strb	r2, [r3, #0]
		readCounter=0;
 800457e:	4b67      	ldr	r3, [pc, #412]	@ (800471c <VL53L1__testRanging+0x2c0>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
		numerrors=0;
 8004584:	4b66      	ldr	r3, [pc, #408]	@ (8004720 <VL53L1__testRanging+0x2c4>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
		ErrorPerc=0;
 800458a:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <VL53L1__testRanging+0x2c8>)
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
		posArr=0;
 8004590:	4b65      	ldr	r3, [pc, #404]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 8004592:	2200      	movs	r2, #0
 8004594:	801a      	strh	r2, [r3, #0]
		sampleNum=0;
 8004596:	4b65      	ldr	r3, [pc, #404]	@ (800472c <VL53L1__testRanging+0x2d0>)
 8004598:	2200      	movs	r2, #0
 800459a:	801a      	strh	r2, [r3, #0]

#ifdef	VL53L1__USING_GPIO
	while ((!HAL_GPIO_ReadPin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin)) && ((HAL_GetTick()-testingTime)<=VL53L1__INTERMEASUREMENT)) {};
	if (HAL_GPIO_ReadPin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin)) {
#else
	uint8_t dataReady=0;
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
	while ((dataReady == 0) && ((HAL_GetTick()-testingTime)<VL53L1__INTERMEASUREMENT) && (!status))
 80045a2:	e00e      	b.n	80045c2 <VL53L1__testRanging+0x166>
		status |= VL53L1X_CheckForDataReady(VL53L1__ADDR, &dataReady);
 80045a4:	1dbb      	adds	r3, r7, #6
 80045a6:	0019      	movs	r1, r3
 80045a8:	2052      	movs	r0, #82	@ 0x52
 80045aa:	f7fe fe39 	bl	8003220 <VL53L1X_CheckForDataReady>
 80045ae:	0003      	movs	r3, r0
 80045b0:	001a      	movs	r2, r3
 80045b2:	210f      	movs	r1, #15
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b25a      	sxtb	r2, r3
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	701a      	strb	r2, [r3, #0]
	while ((dataReady == 0) && ((HAL_GetTick()-testingTime)<VL53L1__INTERMEASUREMENT) && (!status))
 80045c2:	1dbb      	adds	r3, r7, #6
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <VL53L1__testRanging+0x186>
 80045ca:	f000 fa03 	bl	80049d4 <HAL_GetTick>
 80045ce:	0002      	movs	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b18      	cmp	r3, #24
 80045d6:	d804      	bhi.n	80045e2 <VL53L1__testRanging+0x186>
 80045d8:	230f      	movs	r3, #15
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0e0      	beq.n	80045a4 <VL53L1__testRanging+0x148>
	if (dataReady && (!status)) {
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d100      	bne.n	80045ec <VL53L1__testRanging+0x190>
 80045ea:	e13b      	b.n	8004864 <VL53L1__testRanging+0x408>
 80045ec:	240f      	movs	r4, #15
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d000      	beq.n	80045f8 <VL53L1__testRanging+0x19c>
 80045f6:	e135      	b.n	8004864 <VL53L1__testRanging+0x408>
#endif
		// a new ranging data set is available
		readCounter++;
 80045f8:	4b48      	ldr	r3, [pc, #288]	@ (800471c <VL53L1__testRanging+0x2c0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	4b47      	ldr	r3, [pc, #284]	@ (800471c <VL53L1__testRanging+0x2c0>)
 8004600:	601a      	str	r2, [r3, #0]
		ReadingTime=HAL_GetTick();
 8004602:	f000 f9e7 	bl	80049d4 <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	4b4b      	ldr	r3, [pc, #300]	@ (8004738 <VL53L1__testRanging+0x2dc>)
 800460a:	601a      	str	r2, [r3, #0]

		status |= VL53L1X_GetRangeStatus(VL53L1__ADDR, &RangeStatus);
 800460c:	4b4b      	ldr	r3, [pc, #300]	@ (800473c <VL53L1__testRanging+0x2e0>)
 800460e:	0019      	movs	r1, r3
 8004610:	2052      	movs	r0, #82	@ 0x52
 8004612:	f7ff f9f5 	bl	8003a00 <VL53L1X_GetRangeStatus>
 8004616:	0003      	movs	r3, r0
 8004618:	001a      	movs	r2, r3
 800461a:	193b      	adds	r3, r7, r4
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b25a      	sxtb	r2, r3
 8004624:	193b      	adds	r3, r7, r4
 8004626:	701a      	strb	r2, [r3, #0]
		if (RangeStatus>VL53L1__RANGE_STATUS_THRESH){	//non acceptable range status
 8004628:	4b44      	ldr	r3, [pc, #272]	@ (800473c <VL53L1__testRanging+0x2e0>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d911      	bls.n	8004654 <VL53L1__testRanging+0x1f8>
			numerrors++;
 8004630:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <VL53L1__testRanging+0x2c4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	4b3a      	ldr	r3, [pc, #232]	@ (8004720 <VL53L1__testRanging+0x2c4>)
 8004638:	601a      	str	r2, [r3, #0]
			status |= VL53L1X_ClearInterrupt(VL53L1__ADDR); // reset for a new ranging notification
 800463a:	2052      	movs	r0, #82	@ 0x52
 800463c:	f7fe fd60 	bl	8003100 <VL53L1X_ClearInterrupt>
 8004640:	0003      	movs	r3, r0
 8004642:	001a      	movs	r2, r3
 8004644:	193b      	adds	r3, r7, r4
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b25b      	sxtb	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	b25a      	sxtb	r2, r3
 800464e:	193b      	adds	r3, r7, r4
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e0f0      	b.n	8004836 <VL53L1__testRanging+0x3da>
		} else {					//here is available a "no error" reading. Proceed getting all values
			status |= VL53L1X_GetDistance(VL53L1__ADDR, &Distance);
 8004654:	4b3a      	ldr	r3, [pc, #232]	@ (8004740 <VL53L1__testRanging+0x2e4>)
 8004656:	0019      	movs	r1, r3
 8004658:	2052      	movs	r0, #82	@ 0x52
 800465a:	f7ff f95b 	bl	8003914 <VL53L1X_GetDistance>
 800465e:	0003      	movs	r3, r0
 8004660:	001a      	movs	r2, r3
 8004662:	240f      	movs	r4, #15
 8004664:	193b      	adds	r3, r7, r4
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b25b      	sxtb	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b25a      	sxtb	r2, r3
 800466e:	193b      	adds	r3, r7, r4
 8004670:	701a      	strb	r2, [r3, #0]
			status |= VL53L1X_GetSignalRate(VL53L1__ADDR, &SignalRate);
 8004672:	4b34      	ldr	r3, [pc, #208]	@ (8004744 <VL53L1__testRanging+0x2e8>)
 8004674:	0019      	movs	r1, r3
 8004676:	2052      	movs	r0, #82	@ 0x52
 8004678:	f7ff f972 	bl	8003960 <VL53L1X_GetSignalRate>
 800467c:	0003      	movs	r3, r0
 800467e:	001a      	movs	r2, r3
 8004680:	193b      	adds	r3, r7, r4
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b25b      	sxtb	r3, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	b25a      	sxtb	r2, r3
 800468a:	193b      	adds	r3, r7, r4
 800468c:	701a      	strb	r2, [r3, #0]
			status |= VL53L1X_GetAmbientRate(VL53L1__ADDR, &AmbientRate);
 800468e:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <VL53L1__testRanging+0x2ec>)
 8004690:	0019      	movs	r1, r3
 8004692:	2052      	movs	r0, #82	@ 0x52
 8004694:	f7ff f98c 	bl	80039b0 <VL53L1X_GetAmbientRate>
 8004698:	0003      	movs	r3, r0
 800469a:	001a      	movs	r2, r3
 800469c:	193b      	adds	r3, r7, r4
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b25a      	sxtb	r2, r3
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	701a      	strb	r2, [r3, #0]
			status |= VL53L1X_ClearInterrupt(VL53L1__ADDR); // Everything read. Restart interrupt
 80046aa:	2052      	movs	r0, #82	@ 0x52
 80046ac:	f7fe fd28 	bl	8003100 <VL53L1X_ClearInterrupt>
 80046b0:	0003      	movs	r3, r0
 80046b2:	001a      	movs	r2, r3
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b25a      	sxtb	r2, r3
 80046be:	193b      	adds	r3, r7, r4
 80046c0:	701a      	strb	r2, [r3, #0]

			// Calculate distance average value and standard deviation over last TESTGESTURE_DIM_ARR readings
			DistArray[posArr]=Distance;		//store Distance into array to compute avg value and std dev.
 80046c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <VL53L1__testRanging+0x2e4>)
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	4b18      	ldr	r3, [pc, #96]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	001c      	movs	r4, r3
 80046cc:	0010      	movs	r0, r2
 80046ce:	f7fc fcc5 	bl	800105c <__aeabi_ui2f>
 80046d2:	1c01      	adds	r1, r0, #0
 80046d4:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <VL53L1__testRanging+0x2f0>)
 80046d6:	00a2      	lsls	r2, r4, #2
 80046d8:	50d1      	str	r1, [r2, r3]
			if ((posArr+1) > sampleNum)
 80046da:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	4b13      	ldr	r3, [pc, #76]	@ (800472c <VL53L1__testRanging+0x2d0>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d305      	bcc.n	80046f2 <VL53L1__testRanging+0x296>
				sampleNum = (posArr+1); 	//that's the number of samples available in DistArray
 80046e6:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <VL53L1__testRanging+0x2d0>)
 80046f0:	801a      	strh	r2, [r3, #0]
			posArr = (posArr+1) % TESTGESTURE_DIM_ARR;
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	2164      	movs	r1, #100	@ 0x64
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fb fe74 	bl	80003e8 <__aeabi_idivmod>
 8004700:	000b      	movs	r3, r1
 8004702:	b29a      	uxth	r2, r3
 8004704:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <VL53L1__testRanging+0x2cc>)
 8004706:	801a      	strh	r2, [r3, #0]
			for (uint16_t k=0; k<sampleNum; k++){
 8004708:	230c      	movs	r3, #12
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	e043      	b.n	800479a <VL53L1__testRanging+0x33e>
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	20000004 	.word	0x20000004
 8004718:	20000008 	.word	0x20000008
 800471c:	20000180 	.word	0x20000180
 8004720:	2000017c 	.word	0x2000017c
 8004724:	20000178 	.word	0x20000178
 8004728:	2000018c 	.word	0x2000018c
 800472c:	2000018e 	.word	0x2000018e
 8004730:	20000006 	.word	0x20000006
 8004734:	2000000a 	.word	0x2000000a
 8004738:	20000190 	.word	0x20000190
 800473c:	20000172 	.word	0x20000172
 8004740:	20000170 	.word	0x20000170
 8004744:	20000174 	.word	0x20000174
 8004748:	20000176 	.word	0x20000176
 800474c:	20000194 	.word	0x20000194
				sumArr+=DistArray[k];
 8004750:	240c      	movs	r4, #12
 8004752:	193b      	adds	r3, r7, r4
 8004754:	881a      	ldrh	r2, [r3, #0]
 8004756:	4b53      	ldr	r3, [pc, #332]	@ (80048a4 <VL53L1__testRanging+0x448>)
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	58d3      	ldr	r3, [r2, r3]
 800475c:	1c19      	adds	r1, r3, #0
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7fb fea4 	bl	80004ac <__aeabi_fadd>
 8004764:	1c03      	adds	r3, r0, #0
 8004766:	617b      	str	r3, [r7, #20]
				sumSqArr+=(DistArray[k]*DistArray[k]);
 8004768:	193b      	adds	r3, r7, r4
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	4b4d      	ldr	r3, [pc, #308]	@ (80048a4 <VL53L1__testRanging+0x448>)
 800476e:	0092      	lsls	r2, r2, #2
 8004770:	58d0      	ldr	r0, [r2, r3]
 8004772:	193b      	adds	r3, r7, r4
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	4b4b      	ldr	r3, [pc, #300]	@ (80048a4 <VL53L1__testRanging+0x448>)
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	58d3      	ldr	r3, [r2, r3]
 800477c:	1c19      	adds	r1, r3, #0
 800477e:	f7fc f93f 	bl	8000a00 <__aeabi_fmul>
 8004782:	1c03      	adds	r3, r0, #0
 8004784:	1c19      	adds	r1, r3, #0
 8004786:	6938      	ldr	r0, [r7, #16]
 8004788:	f7fb fe90 	bl	80004ac <__aeabi_fadd>
 800478c:	1c03      	adds	r3, r0, #0
 800478e:	613b      	str	r3, [r7, #16]
			for (uint16_t k=0; k<sampleNum; k++){
 8004790:	193b      	adds	r3, r7, r4
 8004792:	881a      	ldrh	r2, [r3, #0]
 8004794:	193b      	adds	r3, r7, r4
 8004796:	3201      	adds	r2, #1
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <VL53L1__testRanging+0x44c>)
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	220c      	movs	r2, #12
 80047a0:	18ba      	adds	r2, r7, r2
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3d3      	bcc.n	8004750 <VL53L1__testRanging+0x2f4>
			}
			avgDist=sumArr/((float)sampleNum);									// that's average value
 80047a8:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <VL53L1__testRanging+0x44c>)
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fc fc55 	bl	800105c <__aeabi_ui2f>
 80047b2:	1c03      	adds	r3, r0, #0
 80047b4:	1c19      	adds	r1, r3, #0
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7fc f802 	bl	80007c0 <__aeabi_fdiv>
 80047bc:	1c03      	adds	r3, r0, #0
 80047be:	1c1a      	adds	r2, r3, #0
 80047c0:	4b3a      	ldr	r3, [pc, #232]	@ (80048ac <VL53L1__testRanging+0x450>)
 80047c2:	601a      	str	r2, [r3, #0]
			StdDev=sqrt(sampleNum*sumSqArr - sumArr*sumArr)/((float)sampleNum); // that's the standard deviation
 80047c4:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <VL53L1__testRanging+0x44c>)
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7fc fbfb 	bl	8000fc4 <__aeabi_i2f>
 80047ce:	1c03      	adds	r3, r0, #0
 80047d0:	6939      	ldr	r1, [r7, #16]
 80047d2:	1c18      	adds	r0, r3, #0
 80047d4:	f7fc f914 	bl	8000a00 <__aeabi_fmul>
 80047d8:	1c03      	adds	r3, r0, #0
 80047da:	1c1c      	adds	r4, r3, #0
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	6978      	ldr	r0, [r7, #20]
 80047e0:	f7fc f90e 	bl	8000a00 <__aeabi_fmul>
 80047e4:	1c03      	adds	r3, r0, #0
 80047e6:	1c19      	adds	r1, r3, #0
 80047e8:	1c20      	adds	r0, r4, #0
 80047ea:	f7fc fa47 	bl	8000c7c <__aeabi_fsub>
 80047ee:	1c03      	adds	r3, r0, #0
 80047f0:	1c18      	adds	r0, r3, #0
 80047f2:	f7fe fb03 	bl	8002dfc <__aeabi_f2d>
 80047f6:	0002      	movs	r2, r0
 80047f8:	000b      	movs	r3, r1
 80047fa:	0010      	movs	r0, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	f002 fb45 	bl	8006e8c <sqrt>
 8004802:	0004      	movs	r4, r0
 8004804:	000d      	movs	r5, r1
 8004806:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <VL53L1__testRanging+0x44c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	0018      	movs	r0, r3
 800480c:	f7fc fc26 	bl	800105c <__aeabi_ui2f>
 8004810:	1c03      	adds	r3, r0, #0
 8004812:	1c18      	adds	r0, r3, #0
 8004814:	f7fe faf2 	bl	8002dfc <__aeabi_f2d>
 8004818:	0002      	movs	r2, r0
 800481a:	000b      	movs	r3, r1
 800481c:	0020      	movs	r0, r4
 800481e:	0029      	movs	r1, r5
 8004820:	f7fc ffc2 	bl	80017a8 <__aeabi_ddiv>
 8004824:	0002      	movs	r2, r0
 8004826:	000b      	movs	r3, r1
 8004828:	0010      	movs	r0, r2
 800482a:	0019      	movs	r1, r3
 800482c:	f7fe fb2e 	bl	8002e8c <__aeabi_d2f>
 8004830:	1c02      	adds	r2, r0, #0
 8004832:	4b1f      	ldr	r3, [pc, #124]	@ (80048b0 <VL53L1__testRanging+0x454>)
 8004834:	601a      	str	r2, [r3, #0]
			// end of "Calculate distance average value and ...
		}
		uint8_t currperc =((numerrors*100)+readCounter-1)/readCounter;
 8004836:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <VL53L1__testRanging+0x458>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2264      	movs	r2, #100	@ 0x64
 800483c:	435a      	muls	r2, r3
 800483e:	4b1e      	ldr	r3, [pc, #120]	@ (80048b8 <VL53L1__testRanging+0x45c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	18d3      	adds	r3, r2, r3
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <VL53L1__testRanging+0x45c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0019      	movs	r1, r3
 800484c:	0010      	movs	r0, r2
 800484e:	f7fb fc5b 	bl	8000108 <__udivsi3>
 8004852:	0003      	movs	r3, r0
 8004854:	001a      	movs	r2, r3
 8004856:	1dfb      	adds	r3, r7, #7
 8004858:	701a      	strb	r2, [r3, #0]
		ErrorPerc=currperc;
 800485a:	4b18      	ldr	r3, [pc, #96]	@ (80048bc <VL53L1__testRanging+0x460>)
 800485c:	1dfa      	adds	r2, r7, #7
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	701a      	strb	r2, [r3, #0]
	if (dataReady && (!status)) {
 8004862:	e00d      	b.n	8004880 <VL53L1__testRanging+0x424>
	} else {
		if ((HAL_GetTick()-ReadingTime)>(TimingBudget+VL53L1__TB_IM_DELTA)) 	// if data is not available
 8004864:	f000 f8b6 	bl	80049d4 <HAL_GetTick>
 8004868:	0002      	movs	r2, r0
 800486a:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <VL53L1__testRanging+0x464>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <VL53L1__testRanging+0x468>)
 8004872:	8812      	ldrh	r2, [r2, #0]
 8004874:	3205      	adds	r2, #5
 8004876:	4293      	cmp	r3, r2
 8004878:	d902      	bls.n	8004880 <VL53L1__testRanging+0x424>
			RangeStatus=255;										// mark RangeStatus
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <VL53L1__testRanging+0x46c>)
 800487c:	22ff      	movs	r2, #255	@ 0xff
 800487e:	701a      	strb	r2, [r3, #0]
	}

	// setting RangeStatus variable if I2C communication went wrong
	if (status) {
 8004880:	230f      	movs	r3, #15
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <VL53L1__testRanging+0x43e>
		RangeStatus=99;
 800488a:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <VL53L1__testRanging+0x46c>)
 800488c:	2263      	movs	r2, #99	@ 0x63
 800488e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8004890:	23fa      	movs	r3, #250	@ 0xfa
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f8a7 	bl	80049e8 <HAL_Delay>
	}
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b006      	add	sp, #24
 80048a0:	bdb0      	pop	{r4, r5, r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	20000194 	.word	0x20000194
 80048a8:	2000018e 	.word	0x2000018e
 80048ac:	20000184 	.word	0x20000184
 80048b0:	20000188 	.word	0x20000188
 80048b4:	2000017c 	.word	0x2000017c
 80048b8:	20000180 	.word	0x20000180
 80048bc:	20000178 	.word	0x20000178
 80048c0:	20000190 	.word	0x20000190
 80048c4:	20000004 	.word	0x20000004
 80048c8:	20000172 	.word	0x20000172

080048cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048cc:	480d      	ldr	r0, [pc, #52]	@ (8004904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80048d0:	f7ff fc29 	bl	8004126 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048d4:	480c      	ldr	r0, [pc, #48]	@ (8004908 <LoopForever+0x6>)
  ldr r1, =_edata
 80048d6:	490d      	ldr	r1, [pc, #52]	@ (800490c <LoopForever+0xa>)
  ldr r2, =_sidata
 80048d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <LoopForever+0xe>)
  movs r3, #0
 80048da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048dc:	e002      	b.n	80048e4 <LoopCopyDataInit>

080048de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048e2:	3304      	adds	r3, #4

080048e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048e8:	d3f9      	bcc.n	80048de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004918 <LoopForever+0x16>)
  movs r3, #0
 80048ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f0:	e001      	b.n	80048f6 <LoopFillZerobss>

080048f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f4:	3204      	adds	r2, #4

080048f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048f8:	d3fb      	bcc.n	80048f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048fa:	f002 faa3 	bl	8006e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048fe:	f7ff f9d2 	bl	8003ca6 <main>

08004902 <LoopForever>:

LoopForever:
    b LoopForever
 8004902:	e7fe      	b.n	8004902 <LoopForever>
  ldr   r0, =_estack
 8004904:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800490c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004910:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8004914:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004918:	20000460 	.word	0x20000460

0800491c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800491c:	e7fe      	b.n	800491c <ADC1_IRQHandler>
	...

08004920 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <HAL_Init+0x24>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_Init+0x24>)
 800492a:	2110      	movs	r1, #16
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004930:	2000      	movs	r0, #0
 8004932:	f000 f809 	bl	8004948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004936:	f7ff fb1f 	bl	8003f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	40022000 	.word	0x40022000

08004948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004950:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <HAL_InitTick+0x5c>)
 8004952:	681c      	ldr	r4, [r3, #0]
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <HAL_InitTick+0x60>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	0019      	movs	r1, r3
 800495a:	23fa      	movs	r3, #250	@ 0xfa
 800495c:	0098      	lsls	r0, r3, #2
 800495e:	f7fb fbd3 	bl	8000108 <__udivsi3>
 8004962:	0003      	movs	r3, r0
 8004964:	0019      	movs	r1, r3
 8004966:	0020      	movs	r0, r4
 8004968:	f7fb fbce 	bl	8000108 <__udivsi3>
 800496c:	0003      	movs	r3, r0
 800496e:	0018      	movs	r0, r3
 8004970:	f000 f905 	bl	8004b7e <HAL_SYSTICK_Config>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d001      	beq.n	800497c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e00f      	b.n	800499c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d80b      	bhi.n	800499a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	2301      	movs	r3, #1
 8004986:	425b      	negs	r3, r3
 8004988:	2200      	movs	r2, #0
 800498a:	0018      	movs	r0, r3
 800498c:	f000 f8e2 	bl	8004b54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_InitTick+0x64>)
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b003      	add	sp, #12
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000010 	.word	0x20000010
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_IncTick+0x1c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	001a      	movs	r2, r3
 80049ba:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_IncTick+0x20>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	18d2      	adds	r2, r2, r3
 80049c0:	4b03      	ldr	r3, [pc, #12]	@ (80049d0 <HAL_IncTick+0x20>)
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	20000010 	.word	0x20000010
 80049d0:	20000324 	.word	0x20000324

080049d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  return uwTick;
 80049d8:	4b02      	ldr	r3, [pc, #8]	@ (80049e4 <HAL_GetTick+0x10>)
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	0018      	movs	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	20000324 	.word	0x20000324

080049e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f0:	f7ff fff0 	bl	80049d4 <HAL_GetTick>
 80049f4:	0003      	movs	r3, r0
 80049f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	d005      	beq.n	8004a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <HAL_Delay+0x44>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	001a      	movs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	f7ff ffe0 	bl	80049d4 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d8f7      	bhi.n	8004a10 <HAL_Delay+0x28>
  {
  }
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	20000010 	.word	0x20000010

08004a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	0002      	movs	r2, r0
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	1dfb      	adds	r3, r7, #7
 8004a3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a44:	d828      	bhi.n	8004a98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a46:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <__NVIC_SetPriority+0xd4>)
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	33c0      	adds	r3, #192	@ 0xc0
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	589b      	ldr	r3, [r3, r2]
 8004a56:	1dfa      	adds	r2, r7, #7
 8004a58:	7812      	ldrb	r2, [r2, #0]
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	400a      	ands	r2, r1
 8004a60:	00d2      	lsls	r2, r2, #3
 8004a62:	21ff      	movs	r1, #255	@ 0xff
 8004a64:	4091      	lsls	r1, r2
 8004a66:	000a      	movs	r2, r1
 8004a68:	43d2      	mvns	r2, r2
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	22ff      	movs	r2, #255	@ 0xff
 8004a74:	401a      	ands	r2, r3
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	4003      	ands	r3, r0
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a84:	481f      	ldr	r0, [pc, #124]	@ (8004b04 <__NVIC_SetPriority+0xd4>)
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	33c0      	adds	r3, #192	@ 0xc0
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a96:	e031      	b.n	8004afc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a98:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <__NVIC_SetPriority+0xd8>)
 8004a9a:	1dfb      	adds	r3, r7, #7
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	400b      	ands	r3, r1
 8004aa4:	3b08      	subs	r3, #8
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	3306      	adds	r3, #6
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	18d3      	adds	r3, r2, r3
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1dfa      	adds	r2, r7, #7
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	0011      	movs	r1, r2
 8004ab8:	2203      	movs	r2, #3
 8004aba:	400a      	ands	r2, r1
 8004abc:	00d2      	lsls	r2, r2, #3
 8004abe:	21ff      	movs	r1, #255	@ 0xff
 8004ac0:	4091      	lsls	r1, r2
 8004ac2:	000a      	movs	r2, r1
 8004ac4:	43d2      	mvns	r2, r2
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	22ff      	movs	r2, #255	@ 0xff
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	2303      	movs	r3, #3
 8004ada:	4003      	ands	r3, r0
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ae0:	4809      	ldr	r0, [pc, #36]	@ (8004b08 <__NVIC_SetPriority+0xd8>)
 8004ae2:	1dfb      	adds	r3, r7, #7
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	001c      	movs	r4, r3
 8004ae8:	230f      	movs	r3, #15
 8004aea:	4023      	ands	r3, r4
 8004aec:	3b08      	subs	r3, #8
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	430a      	orrs	r2, r1
 8004af2:	3306      	adds	r3, #6
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	18c3      	adds	r3, r0, r3
 8004af8:	3304      	adds	r3, #4
 8004afa:	601a      	str	r2, [r3, #0]
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b003      	add	sp, #12
 8004b02:	bd90      	pop	{r4, r7, pc}
 8004b04:	e000e100 	.word	0xe000e100
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	045b      	lsls	r3, r3, #17
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d301      	bcc.n	8004b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b20:	2301      	movs	r3, #1
 8004b22:	e010      	b.n	8004b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <SysTick_Config+0x44>)
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	425b      	negs	r3, r3
 8004b30:	2103      	movs	r1, #3
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7ff ff7c 	bl	8004a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <SysTick_Config+0x44>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3e:	4b04      	ldr	r3, [pc, #16]	@ (8004b50 <SysTick_Config+0x44>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	e000e010 	.word	0xe000e010

08004b54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	210f      	movs	r1, #15
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	1c02      	adds	r2, r0, #0
 8004b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	0011      	movs	r1, r2
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff ff5d 	bl	8004a30 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b004      	add	sp, #16
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff ffbf 	bl	8004b0c <SysTick_Config>
 8004b8e:	0003      	movs	r3, r0
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba6:	e14f      	b.n	8004e48 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4091      	lsls	r1, r2
 8004bb2:	000a      	movs	r2, r1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d100      	bne.n	8004bc0 <HAL_GPIO_Init+0x28>
 8004bbe:	e140      	b.n	8004e42 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d005      	beq.n	8004bd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d130      	bne.n	8004c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	409a      	lsls	r2, r3
 8004be6:	0013      	movs	r3, r2
 8004be8:	43da      	mvns	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	0013      	movs	r3, r2
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	409a      	lsls	r2, r3
 8004c14:	0013      	movs	r3, r2
 8004c16:	43da      	mvns	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	2201      	movs	r2, #1
 8004c26:	401a      	ands	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	0013      	movs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d017      	beq.n	8004c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	409a      	lsls	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	43da      	mvns	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	0013      	movs	r3, r2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d123      	bne.n	8004cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	08da      	lsrs	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3208      	adds	r2, #8
 8004c8a:	0092      	lsls	r2, r2, #2
 8004c8c:	58d3      	ldr	r3, [r2, r3]
 8004c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2207      	movs	r2, #7
 8004c94:	4013      	ands	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	220f      	movs	r2, #15
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2107      	movs	r1, #7
 8004cae:	400b      	ands	r3, r1
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	0092      	lsls	r2, r2, #2
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	0013      	movs	r3, r2
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	401a      	ands	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	23c0      	movs	r3, #192	@ 0xc0
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	4013      	ands	r3, r2
 8004d08:	d100      	bne.n	8004d0c <HAL_GPIO_Init+0x174>
 8004d0a:	e09a      	b.n	8004e42 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	4b54      	ldr	r3, [pc, #336]	@ (8004e60 <HAL_GPIO_Init+0x2c8>)
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	4b53      	ldr	r3, [pc, #332]	@ (8004e60 <HAL_GPIO_Init+0x2c8>)
 8004d12:	2101      	movs	r1, #1
 8004d14:	430a      	orrs	r2, r1
 8004d16:	619a      	str	r2, [r3, #24]
 8004d18:	4b51      	ldr	r3, [pc, #324]	@ (8004e60 <HAL_GPIO_Init+0x2c8>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d24:	4a4f      	ldr	r2, [pc, #316]	@ (8004e64 <HAL_GPIO_Init+0x2cc>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	589b      	ldr	r3, [r3, r2]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2203      	movs	r2, #3
 8004d36:	4013      	ands	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	220f      	movs	r2, #15
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	0013      	movs	r3, r2
 8004d40:	43da      	mvns	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	2390      	movs	r3, #144	@ 0x90
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0x1e2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a44      	ldr	r2, [pc, #272]	@ (8004e68 <HAL_GPIO_Init+0x2d0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00d      	beq.n	8004d76 <HAL_GPIO_Init+0x1de>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a43      	ldr	r2, [pc, #268]	@ (8004e6c <HAL_GPIO_Init+0x2d4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <HAL_GPIO_Init+0x1da>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a42      	ldr	r2, [pc, #264]	@ (8004e70 <HAL_GPIO_Init+0x2d8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_GPIO_Init+0x1d6>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e006      	b.n	8004d7c <HAL_GPIO_Init+0x1e4>
 8004d6e:	2305      	movs	r3, #5
 8004d70:	e004      	b.n	8004d7c <HAL_GPIO_Init+0x1e4>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e002      	b.n	8004d7c <HAL_GPIO_Init+0x1e4>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_GPIO_Init+0x1e4>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	2103      	movs	r1, #3
 8004d80:	400a      	ands	r2, r1
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	4093      	lsls	r3, r2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d8c:	4935      	ldr	r1, [pc, #212]	@ (8004e64 <HAL_GPIO_Init+0x2cc>)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	3302      	adds	r3, #2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d9a:	4b36      	ldr	r3, [pc, #216]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43da      	mvns	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	035b      	lsls	r3, r3, #13
 8004db2:	4013      	ands	r3, r2
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	039b      	lsls	r3, r3, #14
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d003      	beq.n	8004de8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004dee:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	029b      	lsls	r3, r3, #10
 8004e06:	4013      	ands	r3, r2
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	43da      	mvns	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	025b      	lsls	r3, r3, #9
 8004e30:	4013      	ands	r3, r2
 8004e32:	d003      	beq.n	8004e3c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <HAL_GPIO_Init+0x2dc>)
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3301      	adds	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	40da      	lsrs	r2, r3
 8004e50:	1e13      	subs	r3, r2, #0
 8004e52:	d000      	beq.n	8004e56 <HAL_GPIO_Init+0x2be>
 8004e54:	e6a8      	b.n	8004ba8 <HAL_GPIO_Init+0x10>
  } 
}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	46c0      	nop			@ (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b006      	add	sp, #24
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010000 	.word	0x40010000
 8004e68:	48000400 	.word	0x48000400
 8004e6c:	48000800 	.word	0x48000800
 8004e70:	48000c00 	.word	0x48000c00
 8004e74:	40010400 	.word	0x40010400

08004e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	0008      	movs	r0, r1
 8004e82:	0011      	movs	r1, r2
 8004e84:	1cbb      	adds	r3, r7, #2
 8004e86:	1c02      	adds	r2, r0, #0
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	1c7b      	adds	r3, r7, #1
 8004e8c:	1c0a      	adds	r2, r1, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e90:	1c7b      	adds	r3, r7, #1
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e98:	1cbb      	adds	r3, r7, #2
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ea0:	e003      	b.n	8004eaa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ea2:	1cbb      	adds	r3, r7, #2
 8004ea4:	881a      	ldrh	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e08f      	b.n	8004fe6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2241      	movs	r2, #65	@ 0x41
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2240      	movs	r2, #64	@ 0x40
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7ff f86f 	bl	8003fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2241      	movs	r2, #65	@ 0x41
 8004ee6:	2124      	movs	r1, #36	@ 0x24
 8004ee8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	493b      	ldr	r1, [pc, #236]	@ (8004ff0 <HAL_I2C_Init+0x13c>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4938      	ldr	r1, [pc, #224]	@ (8004ff4 <HAL_I2C_Init+0x140>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d108      	bne.n	8004f32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2180      	movs	r1, #128	@ 0x80
 8004f2a:	0209      	lsls	r1, r1, #8
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	e007      	b.n	8004f42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2184      	movs	r1, #132	@ 0x84
 8004f3c:	0209      	lsls	r1, r1, #8
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d109      	bne.n	8004f5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2180      	movs	r1, #128	@ 0x80
 8004f56:	0109      	lsls	r1, r1, #4
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	e007      	b.n	8004f6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4923      	ldr	r1, [pc, #140]	@ (8004ff8 <HAL_I2C_Init+0x144>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4920      	ldr	r1, [pc, #128]	@ (8004ffc <HAL_I2C_Init+0x148>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	491a      	ldr	r1, [pc, #104]	@ (8004ff4 <HAL_I2C_Init+0x140>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2241      	movs	r2, #65	@ 0x41
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2242      	movs	r2, #66	@ 0x42
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	f0ffffff 	.word	0xf0ffffff
 8004ff4:	ffff7fff 	.word	0xffff7fff
 8004ff8:	fffff7ff 	.word	0xfffff7ff
 8004ffc:	02008000 	.word	0x02008000

08005000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b089      	sub	sp, #36	@ 0x24
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	000c      	movs	r4, r1
 800500a:	0010      	movs	r0, r2
 800500c:	0019      	movs	r1, r3
 800500e:	230a      	movs	r3, #10
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	1c22      	adds	r2, r4, #0
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	2308      	movs	r3, #8
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	1c02      	adds	r2, r0, #0
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	1dbb      	adds	r3, r7, #6
 8005020:	1c0a      	adds	r2, r1, #0
 8005022:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2241      	movs	r2, #65	@ 0x41
 8005028:	5c9b      	ldrb	r3, [r3, r2]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b20      	cmp	r3, #32
 800502e:	d000      	beq.n	8005032 <HAL_I2C_Mem_Write+0x32>
 8005030:	e10c      	b.n	800524c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_I2C_Mem_Write+0x42>
 8005038:	232c      	movs	r3, #44	@ 0x2c
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2280      	movs	r2, #128	@ 0x80
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0ff      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2240      	movs	r2, #64	@ 0x40
 8005052:	5c9b      	ldrb	r3, [r3, r2]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_Mem_Write+0x5c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0f8      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2240      	movs	r2, #64	@ 0x40
 8005060:	2101      	movs	r1, #1
 8005062:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005064:	f7ff fcb6 	bl	80049d4 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	0219      	lsls	r1, r3, #8
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2319      	movs	r3, #25
 8005078:	2201      	movs	r2, #1
 800507a:	f000 fb0b 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0e3      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2241      	movs	r2, #65	@ 0x41
 800508a:	2121      	movs	r1, #33	@ 0x21
 800508c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2242      	movs	r2, #66	@ 0x42
 8005092:	2140      	movs	r1, #64	@ 0x40
 8005094:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	222c      	movs	r2, #44	@ 0x2c
 80050a6:	18ba      	adds	r2, r7, r2
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b2:	1dbb      	adds	r3, r7, #6
 80050b4:	881c      	ldrh	r4, [r3, #0]
 80050b6:	2308      	movs	r3, #8
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	881a      	ldrh	r2, [r3, #0]
 80050bc:	230a      	movs	r3, #10
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	8819      	ldrh	r1, [r3, #0]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	0023      	movs	r3, r4
 80050ce:	f000 f9f9 	bl	80054c4 <I2C_RequestMemoryWrite>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2240      	movs	r2, #64	@ 0x40
 80050da:	2100      	movs	r1, #0
 80050dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0b5      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2bff      	cmp	r3, #255	@ 0xff
 80050ea:	d911      	bls.n	8005110 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	22ff      	movs	r2, #255	@ 0xff
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	045c      	lsls	r4, r3, #17
 80050fc:	230a      	movs	r3, #10
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	8819      	ldrh	r1, [r3, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	0023      	movs	r3, r4
 800510a:	f000 fc9d 	bl	8005a48 <I2C_TransferConfig>
 800510e:	e012      	b.n	8005136 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	b2da      	uxtb	r2, r3
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	049c      	lsls	r4, r3, #18
 8005124:	230a      	movs	r3, #10
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	8819      	ldrh	r1, [r3, #0]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	0023      	movs	r3, r4
 8005132:	f000 fc89 	bl	8005a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fb01 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e081      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03a      	beq.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d136      	bne.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800518c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	0013      	movs	r3, r2
 8005196:	2200      	movs	r2, #0
 8005198:	2180      	movs	r1, #128	@ 0x80
 800519a:	f000 fa7b 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e053      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2bff      	cmp	r3, #255	@ 0xff
 80051ae:	d911      	bls.n	80051d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	22ff      	movs	r2, #255	@ 0xff
 80051b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	045c      	lsls	r4, r3, #17
 80051c0:	230a      	movs	r3, #10
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	8819      	ldrh	r1, [r3, #0]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	2300      	movs	r3, #0
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	0023      	movs	r3, r4
 80051ce:	f000 fc3b 	bl	8005a48 <I2C_TransferConfig>
 80051d2:	e012      	b.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	049c      	lsls	r4, r3, #18
 80051e8:	230a      	movs	r3, #10
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	8819      	ldrh	r1, [r3, #0]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0023      	movs	r3, r4
 80051f6:	f000 fc27 	bl	8005a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d198      	bne.n	8005136 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 fae0 	bl	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01a      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	490b      	ldr	r1, [pc, #44]	@ (8005258 <HAL_I2C_Mem_Write+0x258>)
 800522c:	400a      	ands	r2, r1
 800522e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2241      	movs	r2, #65	@ 0x41
 8005234:	2120      	movs	r1, #32
 8005236:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2242      	movs	r2, #66	@ 0x42
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2240      	movs	r2, #64	@ 0x40
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b007      	add	sp, #28
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b089      	sub	sp, #36	@ 0x24
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	000c      	movs	r4, r1
 8005266:	0010      	movs	r0, r2
 8005268:	0019      	movs	r1, r3
 800526a:	230a      	movs	r3, #10
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	1c22      	adds	r2, r4, #0
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	2308      	movs	r3, #8
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	1c02      	adds	r2, r0, #0
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	1c0a      	adds	r2, r1, #0
 800527e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2241      	movs	r2, #65	@ 0x41
 8005284:	5c9b      	ldrb	r3, [r3, r2]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	d000      	beq.n	800528e <HAL_I2C_Mem_Read+0x32>
 800528c:	e110      	b.n	80054b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <HAL_I2C_Mem_Read+0x42>
 8005294:	232c      	movs	r3, #44	@ 0x2c
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	0092      	lsls	r2, r2, #2
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e103      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	5c9b      	ldrb	r3, [r3, r2]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2C_Mem_Read+0x5c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0fc      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	2101      	movs	r1, #1
 80052be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052c0:	f7ff fb88 	bl	80049d4 <HAL_GetTick>
 80052c4:	0003      	movs	r3, r0
 80052c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	0219      	lsls	r1, r3, #8
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2319      	movs	r3, #25
 80052d4:	2201      	movs	r2, #1
 80052d6:	f000 f9dd 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0e7      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	2122      	movs	r1, #34	@ 0x22
 80052e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2242      	movs	r2, #66	@ 0x42
 80052ee:	2140      	movs	r1, #64	@ 0x40
 80052f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	222c      	movs	r2, #44	@ 0x2c
 8005302:	18ba      	adds	r2, r7, r2
 8005304:	8812      	ldrh	r2, [r2, #0]
 8005306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530e:	1dbb      	adds	r3, r7, #6
 8005310:	881c      	ldrh	r4, [r3, #0]
 8005312:	2308      	movs	r3, #8
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	230a      	movs	r3, #10
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	8819      	ldrh	r1, [r3, #0]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	0023      	movs	r3, r4
 800532a:	f000 f92f 	bl	800558c <I2C_RequestMemoryRead>
 800532e:	1e03      	subs	r3, r0, #0
 8005330:	d005      	beq.n	800533e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	2100      	movs	r1, #0
 8005338:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0b9      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005342:	b29b      	uxth	r3, r3
 8005344:	2bff      	cmp	r3, #255	@ 0xff
 8005346:	d911      	bls.n	800536c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	045c      	lsls	r4, r3, #17
 8005358:	230a      	movs	r3, #10
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	8819      	ldrh	r1, [r3, #0]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	4b56      	ldr	r3, [pc, #344]	@ (80054bc <HAL_I2C_Mem_Read+0x260>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	0023      	movs	r3, r4
 8005366:	f000 fb6f 	bl	8005a48 <I2C_TransferConfig>
 800536a:	e012      	b.n	8005392 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	049c      	lsls	r4, r3, #18
 8005380:	230a      	movs	r3, #10
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	8819      	ldrh	r1, [r3, #0]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	4b4c      	ldr	r3, [pc, #304]	@ (80054bc <HAL_I2C_Mem_Read+0x260>)
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	0023      	movs	r3, r4
 800538e:	f000 fb5b 	bl	8005a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	0013      	movs	r3, r2
 800539c:	2200      	movs	r2, #0
 800539e:	2104      	movs	r1, #4
 80053a0:	f000 f978 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e082      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03a      	beq.n	800545e <HAL_I2C_Mem_Read+0x202>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d136      	bne.n	800545e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	0013      	movs	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	f000 f949 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e053      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2bff      	cmp	r3, #255	@ 0xff
 8005412:	d911      	bls.n	8005438 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	b2da      	uxtb	r2, r3
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	045c      	lsls	r4, r3, #17
 8005424:	230a      	movs	r3, #10
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	8819      	ldrh	r1, [r3, #0]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	0023      	movs	r3, r4
 8005432:	f000 fb09 	bl	8005a48 <I2C_TransferConfig>
 8005436:	e012      	b.n	800545e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005446:	b2da      	uxtb	r2, r3
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	049c      	lsls	r4, r3, #18
 800544c:	230a      	movs	r3, #10
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	8819      	ldrh	r1, [r3, #0]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	2300      	movs	r3, #0
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	0023      	movs	r3, r4
 800545a:	f000 faf5 	bl	8005a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d194      	bne.n	8005392 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f9ae 	bl	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e01a      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	490c      	ldr	r1, [pc, #48]	@ (80054c0 <HAL_I2C_Mem_Read+0x264>)
 8005490:	400a      	ands	r2, r1
 8005492:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2241      	movs	r2, #65	@ 0x41
 8005498:	2120      	movs	r1, #32
 800549a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2242      	movs	r2, #66	@ 0x42
 80054a0:	2100      	movs	r1, #0
 80054a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2240      	movs	r2, #64	@ 0x40
 80054a8:	2100      	movs	r1, #0
 80054aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b007      	add	sp, #28
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	80002400 	.word	0x80002400
 80054c0:	fe00e800 	.word	0xfe00e800

080054c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	000c      	movs	r4, r1
 80054ce:	0010      	movs	r0, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	250a      	movs	r5, #10
 80054d4:	197b      	adds	r3, r7, r5
 80054d6:	1c22      	adds	r2, r4, #0
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	2308      	movs	r3, #8
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	1c02      	adds	r2, r0, #0
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	1dbb      	adds	r3, r7, #6
 80054e4:	1c0a      	adds	r2, r1, #0
 80054e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054e8:	1dbb      	adds	r3, r7, #6
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	045c      	lsls	r4, r3, #17
 80054f2:	197b      	adds	r3, r7, r5
 80054f4:	8819      	ldrh	r1, [r3, #0]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	4b23      	ldr	r3, [pc, #140]	@ (8005588 <I2C_RequestMemoryWrite+0xc4>)
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	0023      	movs	r3, r4
 80054fe:	f000 faa3 	bl	8005a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	0018      	movs	r0, r3
 800550a:	f000 f91b 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d001      	beq.n	8005516 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e033      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005516:	1dbb      	adds	r3, r7, #6
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800551e:	2308      	movs	r3, #8
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
 800552c:	e019      	b.n	8005562 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800552e:	2308      	movs	r3, #8
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	b29b      	uxth	r3, r3
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	6a39      	ldr	r1, [r7, #32]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 f8fc 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d001      	beq.n	8005554 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e014      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005554:	2308      	movs	r3, #8
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	0013      	movs	r3, r2
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	@ 0x80
 8005570:	f000 f890 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d001      	beq.n	800557c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b004      	add	sp, #16
 8005584:	bdb0      	pop	{r4, r5, r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	80002000 	.word	0x80002000

0800558c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	000c      	movs	r4, r1
 8005596:	0010      	movs	r0, r2
 8005598:	0019      	movs	r1, r3
 800559a:	250a      	movs	r5, #10
 800559c:	197b      	adds	r3, r7, r5
 800559e:	1c22      	adds	r2, r4, #0
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	2308      	movs	r3, #8
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	1c02      	adds	r2, r0, #0
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	1dbb      	adds	r3, r7, #6
 80055ac:	1c0a      	adds	r2, r1, #0
 80055ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055b0:	1dbb      	adds	r3, r7, #6
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	197b      	adds	r3, r7, r5
 80055b8:	8819      	ldrh	r1, [r3, #0]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	4b23      	ldr	r3, [pc, #140]	@ (800564c <I2C_RequestMemoryRead+0xc0>)
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f000 fa41 	bl	8005a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c8:	6a39      	ldr	r1, [r7, #32]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 f8b9 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 80055d2:	1e03      	subs	r3, r0, #0
 80055d4:	d001      	beq.n	80055da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e033      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055e2:	2308      	movs	r3, #8
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80055f0:	e019      	b.n	8005626 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f2:	2308      	movs	r3, #8
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005606:	6a39      	ldr	r1, [r7, #32]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 f89a 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d001      	beq.n	8005618 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e014      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005618:	2308      	movs	r3, #8
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	0013      	movs	r3, r2
 8005630:	2200      	movs	r2, #0
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	f000 f82e 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005638:	1e03      	subs	r3, r0, #0
 800563a:	d001      	beq.n	8005640 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b004      	add	sp, #16
 8005648:	bdb0      	pop	{r4, r5, r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	80002000 	.word	0x80002000

08005650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2202      	movs	r2, #2
 8005660:	4013      	ands	r3, r2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d103      	bne.n	800566e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2201      	movs	r2, #1
 8005676:	4013      	ands	r3, r2
 8005678:	2b01      	cmp	r3, #1
 800567a:	d007      	beq.n	800568c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]
  }
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	1dfb      	adds	r3, r7, #7
 80056a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a4:	e03a      	b.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f8d3 	bl	8005858 <I2C_IsErrorOccurred>
 80056b2:	1e03      	subs	r3, r0, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e040      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	d02d      	beq.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7ff f988 	bl	80049d4 <HAL_GetTick>
 80056c4:	0002      	movs	r2, r0
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d122      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	425a      	negs	r2, r3
 80056e6:	4153      	adcs	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	001a      	movs	r2, r3
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d113      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	2220      	movs	r2, #32
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2241      	movs	r2, #65	@ 0x41
 8005704:	2120      	movs	r1, #32
 8005706:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2242      	movs	r2, #66	@ 0x42
 800570c:	2100      	movs	r1, #0
 800570e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2240      	movs	r2, #64	@ 0x40
 8005714:	2100      	movs	r1, #0
 8005716:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e00f      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	425a      	negs	r2, r3
 800572c:	4153      	adcs	r3, r2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	001a      	movs	r2, r3
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d0b5      	beq.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b004      	add	sp, #16
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005750:	e032      	b.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f87d 	bl	8005858 <I2C_IsErrorOccurred>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e030      	b.n	80057c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3301      	adds	r3, #1
 800576a:	d025      	beq.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7ff f932 	bl	80049d4 <HAL_GetTick>
 8005770:	0002      	movs	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11a      	bne.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d013      	beq.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005794:	2220      	movs	r2, #32
 8005796:	431a      	orrs	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2241      	movs	r2, #65	@ 0x41
 80057a0:	2120      	movs	r1, #32
 80057a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2242      	movs	r2, #66	@ 0x42
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2240      	movs	r2, #64	@ 0x40
 80057b0:	2100      	movs	r1, #0
 80057b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e007      	b.n	80057c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d1c5      	bne.n	8005752 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057dc:	e02f      	b.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 f837 	bl	8005858 <I2C_IsErrorOccurred>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e02d      	b.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7ff f8ef 	bl	80049d4 <HAL_GetTick>
 80057f6:	0002      	movs	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2220      	movs	r2, #32
 8005810:	4013      	ands	r3, r2
 8005812:	2b20      	cmp	r3, #32
 8005814:	d013      	beq.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	2220      	movs	r2, #32
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2241      	movs	r2, #65	@ 0x41
 8005826:	2120      	movs	r1, #32
 8005828:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2242      	movs	r2, #66	@ 0x42
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2240      	movs	r2, #64	@ 0x40
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e007      	b.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2220      	movs	r2, #32
 8005846:	4013      	ands	r3, r2
 8005848:	2b20      	cmp	r3, #32
 800584a:	d1c8      	bne.n	80057de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2327      	movs	r3, #39	@ 0x27
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2210      	movs	r2, #16
 8005880:	4013      	ands	r3, r2
 8005882:	d100      	bne.n	8005886 <I2C_IsErrorOccurred+0x2e>
 8005884:	e079      	b.n	800597a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800588e:	e057      	b.n	8005940 <I2C_IsErrorOccurred+0xe8>
 8005890:	2227      	movs	r2, #39	@ 0x27
 8005892:	18bb      	adds	r3, r7, r2
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	d04f      	beq.n	8005940 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058a0:	f7ff f898 	bl	80049d4 <HAL_GetTick>
 80058a4:	0002      	movs	r2, r0
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <I2C_IsErrorOccurred+0x5e>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d144      	bne.n	8005940 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	4013      	ands	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058c4:	2013      	movs	r0, #19
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	2142      	movs	r1, #66	@ 0x42
 80058cc:	5c52      	ldrb	r2, [r2, r1]
 80058ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	401a      	ands	r2, r3
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d126      	bne.n	8005932 <I2C_IsErrorOccurred+0xda>
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	2380      	movs	r3, #128	@ 0x80
 80058e8:	01db      	lsls	r3, r3, #7
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d021      	beq.n	8005932 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80058ee:	183b      	adds	r3, r7, r0
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d01d      	beq.n	8005932 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2180      	movs	r1, #128	@ 0x80
 8005902:	01c9      	lsls	r1, r1, #7
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005908:	f7ff f864 	bl	80049d4 <HAL_GetTick>
 800590c:	0003      	movs	r3, r0
 800590e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005910:	e00f      	b.n	8005932 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005912:	f7ff f85f 	bl	80049d4 <HAL_GetTick>
 8005916:	0002      	movs	r2, r0
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b19      	cmp	r3, #25
 800591e:	d908      	bls.n	8005932 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2220      	movs	r2, #32
 8005924:	4313      	orrs	r3, r2
 8005926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005928:	2327      	movs	r3, #39	@ 0x27
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]

              break;
 8005930:	e006      	b.n	8005940 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2220      	movs	r2, #32
 800593a:	4013      	ands	r3, r2
 800593c:	2b20      	cmp	r3, #32
 800593e:	d1e8      	bne.n	8005912 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2220      	movs	r2, #32
 8005948:	4013      	ands	r3, r2
 800594a:	2b20      	cmp	r3, #32
 800594c:	d004      	beq.n	8005958 <I2C_IsErrorOccurred+0x100>
 800594e:	2327      	movs	r3, #39	@ 0x27
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d09b      	beq.n	8005890 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005958:	2327      	movs	r3, #39	@ 0x27
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2220      	movs	r2, #32
 8005968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	2204      	movs	r2, #4
 800596e:	4313      	orrs	r3, r2
 8005970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005972:	2327      	movs	r3, #39	@ 0x27
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4013      	ands	r3, r2
 800598a:	d00c      	beq.n	80059a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2201      	movs	r2, #1
 8005990:	4313      	orrs	r3, r2
 8005992:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2280      	movs	r2, #128	@ 0x80
 800599a:	0052      	lsls	r2, r2, #1
 800599c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800599e:	2327      	movs	r3, #39	@ 0x27
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4013      	ands	r3, r2
 80059ae:	d00c      	beq.n	80059ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2208      	movs	r2, #8
 80059b4:	4313      	orrs	r3, r2
 80059b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2280      	movs	r2, #128	@ 0x80
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059c2:	2327      	movs	r3, #39	@ 0x27
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	2380      	movs	r3, #128	@ 0x80
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00c      	beq.n	80059ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	2202      	movs	r2, #2
 80059d8:	4313      	orrs	r3, r2
 80059da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2280      	movs	r2, #128	@ 0x80
 80059e2:	0092      	lsls	r2, r2, #2
 80059e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059e6:	2327      	movs	r3, #39	@ 0x27
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80059ee:	2327      	movs	r3, #39	@ 0x27
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01d      	beq.n	8005a34 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff fe28 	bl	8005650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	490e      	ldr	r1, [pc, #56]	@ (8005a44 <I2C_IsErrorOccurred+0x1ec>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2241      	movs	r2, #65	@ 0x41
 8005a20:	2120      	movs	r1, #32
 8005a22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2242      	movs	r2, #66	@ 0x42
 8005a28:	2100      	movs	r1, #0
 8005a2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005a34:	2327      	movs	r3, #39	@ 0x27
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	781b      	ldrb	r3, [r3, #0]
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b00a      	add	sp, #40	@ 0x28
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	fe00e800 	.word	0xfe00e800

08005a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	0008      	movs	r0, r1
 8005a52:	0011      	movs	r1, r2
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	240a      	movs	r4, #10
 8005a58:	193b      	adds	r3, r7, r4
 8005a5a:	1c02      	adds	r2, r0, #0
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	2009      	movs	r0, #9
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	1c0a      	adds	r2, r1, #0
 8005a64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	059b      	lsls	r3, r3, #22
 8005a6c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a6e:	183b      	adds	r3, r7, r0
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	0419      	lsls	r1, r3, #16
 8005a74:	23ff      	movs	r3, #255	@ 0xff
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a7a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	4313      	orrs	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a92:	0d51      	lsrs	r1, r2, #21
 8005a94:	2280      	movs	r2, #128	@ 0x80
 8005a96:	00d2      	lsls	r2, r2, #3
 8005a98:	400a      	ands	r2, r1
 8005a9a:	4907      	ldr	r1, [pc, #28]	@ (8005ab8 <I2C_TransferConfig+0x70>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	43d2      	mvns	r2, r2
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b007      	add	sp, #28
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	03ff63ff 	.word	0x03ff63ff

08005abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2241      	movs	r2, #65	@ 0x41
 8005aca:	5c9b      	ldrb	r3, [r3, r2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d138      	bne.n	8005b44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2240      	movs	r2, #64	@ 0x40
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e032      	b.n	8005b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2240      	movs	r2, #64	@ 0x40
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2241      	movs	r2, #65	@ 0x41
 8005aec:	2124      	movs	r1, #36	@ 0x24
 8005aee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2101      	movs	r1, #1
 8005afc:	438a      	bics	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4911      	ldr	r1, [pc, #68]	@ (8005b50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2241      	movs	r2, #65	@ 0x41
 8005b34:	2120      	movs	r1, #32
 8005b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2240      	movs	r2, #64	@ 0x40
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	ffffefff 	.word	0xffffefff

08005b54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2241      	movs	r2, #65	@ 0x41
 8005b62:	5c9b      	ldrb	r3, [r3, r2]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d139      	bne.n	8005bde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2240      	movs	r2, #64	@ 0x40
 8005b6e:	5c9b      	ldrb	r3, [r3, r2]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e033      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2240      	movs	r2, #64	@ 0x40
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2241      	movs	r2, #65	@ 0x41
 8005b84:	2124      	movs	r1, #36	@ 0x24
 8005b86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2101      	movs	r1, #1
 8005b94:	438a      	bics	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a11      	ldr	r2, [pc, #68]	@ (8005be8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2241      	movs	r2, #65	@ 0x41
 8005bce:	2120      	movs	r1, #32
 8005bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2240      	movs	r2, #64	@ 0x40
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	fffff0ff 	.word	0xfffff0ff

08005bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e305      	b.n	800620a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2201      	movs	r2, #1
 8005c04:	4013      	ands	r3, r2
 8005c06:	d100      	bne.n	8005c0a <HAL_RCC_OscConfig+0x1e>
 8005c08:	e08d      	b.n	8005d26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005c0a:	4bc5      	ldr	r3, [pc, #788]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	220c      	movs	r2, #12
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d00e      	beq.n	8005c34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c16:	4bc2      	ldr	r3, [pc, #776]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	220c      	movs	r2, #12
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d116      	bne.n	8005c50 <HAL_RCC_OscConfig+0x64>
 8005c22:	4bbf      	ldr	r3, [pc, #764]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	23c0      	movs	r3, #192	@ 0xc0
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	401a      	ands	r2, r3
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	025b      	lsls	r3, r3, #9
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	4bba      	ldr	r3, [pc, #744]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	2380      	movs	r3, #128	@ 0x80
 8005c3a:	029b      	lsls	r3, r3, #10
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d100      	bne.n	8005c42 <HAL_RCC_OscConfig+0x56>
 8005c40:	e070      	b.n	8005d24 <HAL_RCC_OscConfig+0x138>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d000      	beq.n	8005c4c <HAL_RCC_OscConfig+0x60>
 8005c4a:	e06b      	b.n	8005d24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e2dc      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_OscConfig+0x7c>
 8005c58:	4bb1      	ldr	r3, [pc, #708]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4bb0      	ldr	r3, [pc, #704]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	0249      	lsls	r1, r1, #9
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e02f      	b.n	8005cc8 <HAL_RCC_OscConfig+0xdc>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCC_OscConfig+0x9e>
 8005c70:	4bab      	ldr	r3, [pc, #684]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4baa      	ldr	r3, [pc, #680]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c76:	49ab      	ldr	r1, [pc, #684]	@ (8005f24 <HAL_RCC_OscConfig+0x338>)
 8005c78:	400a      	ands	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	4ba8      	ldr	r3, [pc, #672]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4ba7      	ldr	r3, [pc, #668]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c82:	49a9      	ldr	r1, [pc, #676]	@ (8005f28 <HAL_RCC_OscConfig+0x33c>)
 8005c84:	400a      	ands	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e01e      	b.n	8005cc8 <HAL_RCC_OscConfig+0xdc>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d10e      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xc4>
 8005c92:	4ba3      	ldr	r3, [pc, #652]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4ba2      	ldr	r3, [pc, #648]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005c98:	2180      	movs	r1, #128	@ 0x80
 8005c9a:	02c9      	lsls	r1, r1, #11
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	4b9f      	ldr	r3, [pc, #636]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4b9e      	ldr	r3, [pc, #632]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	0249      	lsls	r1, r1, #9
 8005caa:	430a      	orrs	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCC_OscConfig+0xdc>
 8005cb0:	4b9b      	ldr	r3, [pc, #620]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b9a      	ldr	r3, [pc, #616]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005cb6:	499b      	ldr	r1, [pc, #620]	@ (8005f24 <HAL_RCC_OscConfig+0x338>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	4b98      	ldr	r3, [pc, #608]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b97      	ldr	r3, [pc, #604]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005cc2:	4999      	ldr	r1, [pc, #612]	@ (8005f28 <HAL_RCC_OscConfig+0x33c>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d014      	beq.n	8005cfa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fe fe80 	bl	80049d4 <HAL_GetTick>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cda:	f7fe fe7b 	bl	80049d4 <HAL_GetTick>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b64      	cmp	r3, #100	@ 0x64
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e28e      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cec:	4b8c      	ldr	r3, [pc, #560]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0xee>
 8005cf8:	e015      	b.n	8005d26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7fe fe6b 	bl	80049d4 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fe fe66 	bl	80049d4 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	@ 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e279      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d16:	4b82      	ldr	r3, [pc, #520]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	2380      	movs	r3, #128	@ 0x80
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x118>
 8005d22:	e000      	b.n	8005d26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d24:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <HAL_RCC_OscConfig+0x146>
 8005d30:	e06c      	b.n	8005e0c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d32:	4b7b      	ldr	r3, [pc, #492]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	220c      	movs	r2, #12
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d3c:	4b78      	ldr	r3, [pc, #480]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	220c      	movs	r2, #12
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d11f      	bne.n	8005d88 <HAL_RCC_OscConfig+0x19c>
 8005d48:	4b75      	ldr	r3, [pc, #468]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	23c0      	movs	r3, #192	@ 0xc0
 8005d4e:	025b      	lsls	r3, r3, #9
 8005d50:	401a      	ands	r2, r3
 8005d52:	2380      	movs	r3, #128	@ 0x80
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d116      	bne.n	8005d88 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5a:	4b71      	ldr	r3, [pc, #452]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	4013      	ands	r3, r2
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_OscConfig+0x184>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e24c      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d70:	4b6b      	ldr	r3, [pc, #428]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	22f8      	movs	r2, #248	@ 0xf8
 8005d76:	4393      	bics	r3, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00da      	lsls	r2, r3, #3
 8005d80:	4b67      	ldr	r3, [pc, #412]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	e041      	b.n	8005e0c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d024      	beq.n	8005dda <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d90:	4b63      	ldr	r3, [pc, #396]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b62      	ldr	r3, [pc, #392]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005d96:	2101      	movs	r1, #1
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fe fe1a 	bl	80049d4 <HAL_GetTick>
 8005da0:	0003      	movs	r3, r0
 8005da2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da6:	f7fe fe15 	bl	80049d4 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e228      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db8:	4b59      	ldr	r3, [pc, #356]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d0f1      	beq.n	8005da6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc2:	4b57      	ldr	r3, [pc, #348]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	22f8      	movs	r2, #248	@ 0xf8
 8005dc8:	4393      	bics	r3, r2
 8005dca:	0019      	movs	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	00da      	lsls	r2, r3, #3
 8005dd2:	4b53      	ldr	r3, [pc, #332]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e018      	b.n	8005e0c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dda:	4b51      	ldr	r3, [pc, #324]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b50      	ldr	r3, [pc, #320]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005de0:	2101      	movs	r1, #1
 8005de2:	438a      	bics	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de6:	f7fe fdf5 	bl	80049d4 <HAL_GetTick>
 8005dea:	0003      	movs	r3, r0
 8005dec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fe fdf0 	bl	80049d4 <HAL_GetTick>
 8005df4:	0002      	movs	r2, r0
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e203      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b47      	ldr	r3, [pc, #284]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2202      	movs	r2, #2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d1f1      	bne.n	8005df0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4013      	ands	r3, r2
 8005e14:	d036      	beq.n	8005e84 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d019      	beq.n	8005e52 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1e:	4b40      	ldr	r3, [pc, #256]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e22:	4b3f      	ldr	r3, [pc, #252]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e24:	2101      	movs	r1, #1
 8005e26:	430a      	orrs	r2, r1
 8005e28:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2a:	f7fe fdd3 	bl	80049d4 <HAL_GetTick>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e34:	f7fe fdce 	bl	80049d4 <HAL_GetTick>
 8005e38:	0002      	movs	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e1e1      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e46:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d0f1      	beq.n	8005e34 <HAL_RCC_OscConfig+0x248>
 8005e50:	e018      	b.n	8005e84 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e52:	4b33      	ldr	r3, [pc, #204]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e56:	4b32      	ldr	r3, [pc, #200]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e58:	2101      	movs	r1, #1
 8005e5a:	438a      	bics	r2, r1
 8005e5c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5e:	f7fe fdb9 	bl	80049d4 <HAL_GetTick>
 8005e62:	0003      	movs	r3, r0
 8005e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e68:	f7fe fdb4 	bl	80049d4 <HAL_GetTick>
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1c7      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7a:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	2202      	movs	r2, #2
 8005e80:	4013      	ands	r3, r2
 8005e82:	d1f1      	bne.n	8005e68 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d100      	bne.n	8005e90 <HAL_RCC_OscConfig+0x2a4>
 8005e8e:	e0b5      	b.n	8005ffc <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e90:	201f      	movs	r0, #31
 8005e92:	183b      	adds	r3, r7, r0
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e98:	4b21      	ldr	r3, [pc, #132]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	2380      	movs	r3, #128	@ 0x80
 8005e9e:	055b      	lsls	r3, r3, #21
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d110      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005eaa:	2180      	movs	r1, #128	@ 0x80
 8005eac:	0549      	lsls	r1, r1, #21
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	61da      	str	r2, [r3, #28]
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	2380      	movs	r3, #128	@ 0x80
 8005eb8:	055b      	lsls	r3, r3, #21
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ec0:	183b      	adds	r3, r7, r0
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <HAL_RCC_OscConfig+0x340>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d11a      	bne.n	8005f08 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed2:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <HAL_RCC_OscConfig+0x340>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b15      	ldr	r3, [pc, #84]	@ (8005f2c <HAL_RCC_OscConfig+0x340>)
 8005ed8:	2180      	movs	r1, #128	@ 0x80
 8005eda:	0049      	lsls	r1, r1, #1
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee0:	f7fe fd78 	bl	80049d4 <HAL_GetTick>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eea:	f7fe fd73 	bl	80049d4 <HAL_GetTick>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b64      	cmp	r3, #100	@ 0x64
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e186      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <HAL_RCC_OscConfig+0x340>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4013      	ands	r3, r2
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10f      	bne.n	8005f30 <HAL_RCC_OscConfig+0x344>
 8005f10:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	4b02      	ldr	r3, [pc, #8]	@ (8005f20 <HAL_RCC_OscConfig+0x334>)
 8005f16:	2101      	movs	r1, #1
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	621a      	str	r2, [r3, #32]
 8005f1c:	e036      	b.n	8005f8c <HAL_RCC_OscConfig+0x3a0>
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	40021000 	.word	0x40021000
 8005f24:	fffeffff 	.word	0xfffeffff
 8005f28:	fffbffff 	.word	0xfffbffff
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10c      	bne.n	8005f52 <HAL_RCC_OscConfig+0x366>
 8005f38:	4bb6      	ldr	r3, [pc, #728]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	4bb5      	ldr	r3, [pc, #724]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f3e:	2101      	movs	r1, #1
 8005f40:	438a      	bics	r2, r1
 8005f42:	621a      	str	r2, [r3, #32]
 8005f44:	4bb3      	ldr	r3, [pc, #716]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	4bb2      	ldr	r3, [pc, #712]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	621a      	str	r2, [r3, #32]
 8005f50:	e01c      	b.n	8005f8c <HAL_RCC_OscConfig+0x3a0>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x388>
 8005f5a:	4bae      	ldr	r3, [pc, #696]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	4bad      	ldr	r3, [pc, #692]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f60:	2104      	movs	r1, #4
 8005f62:	430a      	orrs	r2, r1
 8005f64:	621a      	str	r2, [r3, #32]
 8005f66:	4bab      	ldr	r3, [pc, #684]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	4baa      	ldr	r3, [pc, #680]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	621a      	str	r2, [r3, #32]
 8005f72:	e00b      	b.n	8005f8c <HAL_RCC_OscConfig+0x3a0>
 8005f74:	4ba7      	ldr	r3, [pc, #668]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	4ba6      	ldr	r3, [pc, #664]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	438a      	bics	r2, r1
 8005f7e:	621a      	str	r2, [r3, #32]
 8005f80:	4ba4      	ldr	r3, [pc, #656]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	4ba3      	ldr	r3, [pc, #652]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005f86:	2104      	movs	r1, #4
 8005f88:	438a      	bics	r2, r1
 8005f8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d014      	beq.n	8005fbe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f94:	f7fe fd1e 	bl	80049d4 <HAL_GetTick>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9c:	e009      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fe fd19 	bl	80049d4 <HAL_GetTick>
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	4a9b      	ldr	r2, [pc, #620]	@ (8006218 <HAL_RCC_OscConfig+0x62c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e12b      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb2:	4b98      	ldr	r3, [pc, #608]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0x3b2>
 8005fbc:	e013      	b.n	8005fe6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbe:	f7fe fd09 	bl	80049d4 <HAL_GetTick>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc6:	e009      	b.n	8005fdc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc8:	f7fe fd04 	bl	80049d4 <HAL_GetTick>
 8005fcc:	0002      	movs	r2, r0
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a91      	ldr	r2, [pc, #580]	@ (8006218 <HAL_RCC_OscConfig+0x62c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e116      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fe6:	231f      	movs	r3, #31
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d105      	bne.n	8005ffc <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff0:	4b88      	ldr	r3, [pc, #544]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	4b87      	ldr	r3, [pc, #540]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8005ff6:	4989      	ldr	r1, [pc, #548]	@ (800621c <HAL_RCC_OscConfig+0x630>)
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2210      	movs	r2, #16
 8006002:	4013      	ands	r3, r2
 8006004:	d063      	beq.n	80060ce <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d12a      	bne.n	8006064 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800600e:	4b81      	ldr	r3, [pc, #516]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006012:	4b80      	ldr	r3, [pc, #512]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006014:	2104      	movs	r1, #4
 8006016:	430a      	orrs	r2, r1
 8006018:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800601a:	4b7e      	ldr	r3, [pc, #504]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800601c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800601e:	4b7d      	ldr	r3, [pc, #500]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006020:	2101      	movs	r1, #1
 8006022:	430a      	orrs	r2, r1
 8006024:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006026:	f7fe fcd5 	bl	80049d4 <HAL_GetTick>
 800602a:	0003      	movs	r3, r0
 800602c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006030:	f7fe fcd0 	bl	80049d4 <HAL_GetTick>
 8006034:	0002      	movs	r2, r0
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e0e3      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006042:	4b74      	ldr	r3, [pc, #464]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2202      	movs	r2, #2
 8006048:	4013      	ands	r3, r2
 800604a:	d0f1      	beq.n	8006030 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800604c:	4b71      	ldr	r3, [pc, #452]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800604e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006050:	22f8      	movs	r2, #248	@ 0xf8
 8006052:	4393      	bics	r3, r2
 8006054:	0019      	movs	r1, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	00da      	lsls	r2, r3, #3
 800605c:	4b6d      	ldr	r3, [pc, #436]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800605e:	430a      	orrs	r2, r1
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34
 8006062:	e034      	b.n	80060ce <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	3305      	adds	r3, #5
 800606a:	d111      	bne.n	8006090 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800606c:	4b69      	ldr	r3, [pc, #420]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800606e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006070:	4b68      	ldr	r3, [pc, #416]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006072:	2104      	movs	r1, #4
 8006074:	438a      	bics	r2, r1
 8006076:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006078:	4b66      	ldr	r3, [pc, #408]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800607a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607c:	22f8      	movs	r2, #248	@ 0xf8
 800607e:	4393      	bics	r3, r2
 8006080:	0019      	movs	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	00da      	lsls	r2, r3, #3
 8006088:	4b62      	ldr	r3, [pc, #392]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800608a:	430a      	orrs	r2, r1
 800608c:	635a      	str	r2, [r3, #52]	@ 0x34
 800608e:	e01e      	b.n	80060ce <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006090:	4b60      	ldr	r3, [pc, #384]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006094:	4b5f      	ldr	r3, [pc, #380]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006096:	2104      	movs	r1, #4
 8006098:	430a      	orrs	r2, r1
 800609a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800609c:	4b5d      	ldr	r3, [pc, #372]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800609e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80060a2:	2101      	movs	r1, #1
 80060a4:	438a      	bics	r2, r1
 80060a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a8:	f7fe fc94 	bl	80049d4 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80060b2:	f7fe fc8f 	bl	80049d4 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e0a2      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80060c4:	4b53      	ldr	r3, [pc, #332]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80060c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c8:	2202      	movs	r2, #2
 80060ca:	4013      	ands	r3, r2
 80060cc:	d1f1      	bne.n	80060b2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d100      	bne.n	80060d8 <HAL_RCC_OscConfig+0x4ec>
 80060d6:	e097      	b.n	8006208 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	220c      	movs	r2, #12
 80060de:	4013      	ands	r3, r2
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d100      	bne.n	80060e6 <HAL_RCC_OscConfig+0x4fa>
 80060e4:	e06b      	b.n	80061be <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d14c      	bne.n	8006188 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b49      	ldr	r3, [pc, #292]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b48      	ldr	r3, [pc, #288]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80060f4:	494a      	ldr	r1, [pc, #296]	@ (8006220 <HAL_RCC_OscConfig+0x634>)
 80060f6:	400a      	ands	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fa:	f7fe fc6b 	bl	80049d4 <HAL_GetTick>
 80060fe:	0003      	movs	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fe fc66 	bl	80049d4 <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e079      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006116:	4b3f      	ldr	r3, [pc, #252]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	2380      	movs	r3, #128	@ 0x80
 800611c:	049b      	lsls	r3, r3, #18
 800611e:	4013      	ands	r3, r2
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006122:	4b3c      	ldr	r3, [pc, #240]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	220f      	movs	r2, #15
 8006128:	4393      	bics	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006130:	4b38      	ldr	r3, [pc, #224]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006132:	430a      	orrs	r2, r1
 8006134:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006136:	4b37      	ldr	r3, [pc, #220]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4a3a      	ldr	r2, [pc, #232]	@ (8006224 <HAL_RCC_OscConfig+0x638>)
 800613c:	4013      	ands	r3, r2
 800613e:	0019      	movs	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	431a      	orrs	r2, r3
 800614a:	4b32      	ldr	r3, [pc, #200]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006150:	4b30      	ldr	r3, [pc, #192]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b2f      	ldr	r3, [pc, #188]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 8006156:	2180      	movs	r1, #128	@ 0x80
 8006158:	0449      	lsls	r1, r1, #17
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fe fc39 	bl	80049d4 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006168:	f7fe fc34 	bl	80049d4 <HAL_GetTick>
 800616c:	0002      	movs	r2, r0
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e047      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800617a:	4b26      	ldr	r3, [pc, #152]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	2380      	movs	r3, #128	@ 0x80
 8006180:	049b      	lsls	r3, r3, #18
 8006182:	4013      	ands	r3, r2
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x57c>
 8006186:	e03f      	b.n	8006208 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006188:	4b22      	ldr	r3, [pc, #136]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 800618e:	4924      	ldr	r1, [pc, #144]	@ (8006220 <HAL_RCC_OscConfig+0x634>)
 8006190:	400a      	ands	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fe fc1e 	bl	80049d4 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619e:	f7fe fc19 	bl	80049d4 <HAL_GetTick>
 80061a2:	0002      	movs	r2, r0
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e02c      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b0:	4b18      	ldr	r3, [pc, #96]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	049b      	lsls	r3, r3, #18
 80061b8:	4013      	ands	r3, r2
 80061ba:	d1f0      	bne.n	800619e <HAL_RCC_OscConfig+0x5b2>
 80061bc:	e024      	b.n	8006208 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e01f      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80061ca:	4b12      	ldr	r3, [pc, #72]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80061d0:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <HAL_RCC_OscConfig+0x628>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	23c0      	movs	r3, #192	@ 0xc0
 80061da:	025b      	lsls	r3, r3, #9
 80061dc:	401a      	ands	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d10e      	bne.n	8006204 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	220f      	movs	r2, #15
 80061ea:	401a      	ands	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	23f0      	movs	r3, #240	@ 0xf0
 80061f8:	039b      	lsls	r3, r3, #14
 80061fa:	401a      	ands	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b008      	add	sp, #32
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	40021000 	.word	0x40021000
 8006218:	00001388 	.word	0x00001388
 800621c:	efffffff 	.word	0xefffffff
 8006220:	feffffff 	.word	0xfeffffff
 8006224:	ffc27fff 	.word	0xffc27fff

08006228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0b3      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800623c:	4b5b      	ldr	r3, [pc, #364]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2201      	movs	r2, #1
 8006242:	4013      	ands	r3, r2
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d911      	bls.n	800626e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b58      	ldr	r3, [pc, #352]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	4393      	bics	r3, r2
 8006252:	0019      	movs	r1, r3
 8006254:	4b55      	ldr	r3, [pc, #340]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625c:	4b53      	ldr	r3, [pc, #332]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2201      	movs	r2, #1
 8006262:	4013      	ands	r3, r2
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d001      	beq.n	800626e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e09a      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2202      	movs	r2, #2
 8006274:	4013      	ands	r3, r2
 8006276:	d015      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2204      	movs	r2, #4
 800627e:	4013      	ands	r3, r2
 8006280:	d006      	beq.n	8006290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006282:	4b4b      	ldr	r3, [pc, #300]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	4b4a      	ldr	r3, [pc, #296]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 8006288:	21e0      	movs	r1, #224	@ 0xe0
 800628a:	00c9      	lsls	r1, r1, #3
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006290:	4b47      	ldr	r3, [pc, #284]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	22f0      	movs	r2, #240	@ 0xf0
 8006296:	4393      	bics	r3, r2
 8006298:	0019      	movs	r1, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	4b44      	ldr	r3, [pc, #272]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d040      	beq.n	8006330 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	4b3e      	ldr	r3, [pc, #248]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	2380      	movs	r3, #128	@ 0x80
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	4013      	ands	r3, r2
 80062c0:	d114      	bne.n	80062ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06e      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	4b38      	ldr	r3, [pc, #224]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	2380      	movs	r3, #128	@ 0x80
 80062d4:	049b      	lsls	r3, r3, #18
 80062d6:	4013      	ands	r3, r2
 80062d8:	d108      	bne.n	80062ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e062      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062de:	4b34      	ldr	r3, [pc, #208]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2202      	movs	r2, #2
 80062e4:	4013      	ands	r3, r2
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e05b      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ec:	4b30      	ldr	r3, [pc, #192]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2203      	movs	r2, #3
 80062f2:	4393      	bics	r3, r2
 80062f4:	0019      	movs	r1, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4b2d      	ldr	r3, [pc, #180]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006300:	f7fe fb68 	bl	80049d4 <HAL_GetTick>
 8006304:	0003      	movs	r3, r0
 8006306:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006308:	e009      	b.n	800631e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630a:	f7fe fb63 	bl	80049d4 <HAL_GetTick>
 800630e:	0002      	movs	r2, r0
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	4a27      	ldr	r2, [pc, #156]	@ (80063b4 <HAL_RCC_ClockConfig+0x18c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e042      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631e:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	220c      	movs	r2, #12
 8006324:	401a      	ands	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d1ec      	bne.n	800630a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006330:	4b1e      	ldr	r3, [pc, #120]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	4013      	ands	r3, r2
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d211      	bcs.n	8006362 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b1b      	ldr	r3, [pc, #108]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2201      	movs	r2, #1
 8006344:	4393      	bics	r3, r2
 8006346:	0019      	movs	r1, r3
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006350:	4b16      	ldr	r3, [pc, #88]	@ (80063ac <HAL_RCC_ClockConfig+0x184>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	4013      	ands	r3, r2
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d001      	beq.n	8006362 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e020      	b.n	80063a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2204      	movs	r2, #4
 8006368:	4013      	ands	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800636c:	4b10      	ldr	r3, [pc, #64]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a11      	ldr	r2, [pc, #68]	@ (80063b8 <HAL_RCC_ClockConfig+0x190>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006380:	f000 f820 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006384:	0001      	movs	r1, r0
 8006386:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <HAL_RCC_ClockConfig+0x188>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	220f      	movs	r2, #15
 800638e:	4013      	ands	r3, r2
 8006390:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <HAL_RCC_ClockConfig+0x194>)
 8006392:	5cd3      	ldrb	r3, [r2, r3]
 8006394:	000a      	movs	r2, r1
 8006396:	40da      	lsrs	r2, r3
 8006398:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <HAL_RCC_ClockConfig+0x198>)
 800639a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800639c:	2000      	movs	r0, #0
 800639e:	f7fe fad3 	bl	8004948 <HAL_InitTick>
  
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b004      	add	sp, #16
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40022000 	.word	0x40022000
 80063b0:	40021000 	.word	0x40021000
 80063b4:	00001388 	.word	0x00001388
 80063b8:	fffff8ff 	.word	0xfffff8ff
 80063bc:	080071f0 	.word	0x080071f0
 80063c0:	20000000 	.word	0x20000000

080063c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	2300      	movs	r3, #0
 80063d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80063de:	4b21      	ldr	r3, [pc, #132]	@ (8006464 <HAL_RCC_GetSysClockFreq+0xa0>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	220c      	movs	r2, #12
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d002      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x30>
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d003      	beq.n	80063fa <HAL_RCC_GetSysClockFreq+0x36>
 80063f2:	e02e      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <HAL_RCC_GetSysClockFreq+0xa4>)
 80063f6:	613b      	str	r3, [r7, #16]
      break;
 80063f8:	e02e      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	0c9b      	lsrs	r3, r3, #18
 80063fe:	220f      	movs	r2, #15
 8006400:	4013      	ands	r3, r2
 8006402:	4a1a      	ldr	r2, [pc, #104]	@ (800646c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006408:	4b16      	ldr	r3, [pc, #88]	@ (8006464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	220f      	movs	r2, #15
 800640e:	4013      	ands	r3, r2
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_RCC_GetSysClockFreq+0xac>)
 8006412:	5cd3      	ldrb	r3, [r2, r3]
 8006414:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	23c0      	movs	r3, #192	@ 0xc0
 800641a:	025b      	lsls	r3, r3, #9
 800641c:	401a      	ands	r2, r3
 800641e:	2380      	movs	r3, #128	@ 0x80
 8006420:	025b      	lsls	r3, r3, #9
 8006422:	429a      	cmp	r2, r3
 8006424:	d109      	bne.n	800643a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	480f      	ldr	r0, [pc, #60]	@ (8006468 <HAL_RCC_GetSysClockFreq+0xa4>)
 800642a:	f7f9 fe6d 	bl	8000108 <__udivsi3>
 800642e:	0003      	movs	r3, r0
 8006430:	001a      	movs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4353      	muls	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e008      	b.n	800644c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	480a      	ldr	r0, [pc, #40]	@ (8006468 <HAL_RCC_GetSysClockFreq+0xa4>)
 800643e:	f7f9 fe63 	bl	8000108 <__udivsi3>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4353      	muls	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	613b      	str	r3, [r7, #16]
      break;
 8006450:	e002      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006452:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006454:	613b      	str	r3, [r7, #16]
      break;
 8006456:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006458:	693b      	ldr	r3, [r7, #16]
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b006      	add	sp, #24
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	40021000 	.word	0x40021000
 8006468:	007a1200 	.word	0x007a1200
 800646c:	08007208 	.word	0x08007208
 8006470:	08007218 	.word	0x08007218

08006474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006478:	4b02      	ldr	r3, [pc, #8]	@ (8006484 <HAL_RCC_GetHCLKFreq+0x10>)
 800647a:	681b      	ldr	r3, [r3, #0]
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	20000000 	.word	0x20000000

08006488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800648c:	f7ff fff2 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 8006490:	0001      	movs	r1, r0
 8006492:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	2207      	movs	r2, #7
 800649a:	4013      	ands	r3, r2
 800649c:	4a04      	ldr	r2, [pc, #16]	@ (80064b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800649e:	5cd3      	ldrb	r3, [r2, r3]
 80064a0:	40d9      	lsrs	r1, r3
 80064a2:	000b      	movs	r3, r1
}    
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	40021000 	.word	0x40021000
 80064b0:	08007200 	.word	0x08007200

080064b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2380      	movs	r3, #128	@ 0x80
 80064ca:	025b      	lsls	r3, r3, #9
 80064cc:	4013      	ands	r3, r2
 80064ce:	d100      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80064d0:	e08e      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80064d2:	2017      	movs	r0, #23
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064da:	4b5f      	ldr	r3, [pc, #380]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064dc:	69da      	ldr	r2, [r3, #28]
 80064de:	2380      	movs	r3, #128	@ 0x80
 80064e0:	055b      	lsls	r3, r3, #21
 80064e2:	4013      	ands	r3, r2
 80064e4:	d110      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	0549      	lsls	r1, r1, #21
 80064f0:	430a      	orrs	r2, r1
 80064f2:	61da      	str	r2, [r3, #28]
 80064f4:	4b58      	ldr	r3, [pc, #352]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	055b      	lsls	r3, r3, #21
 80064fc:	4013      	ands	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006502:	183b      	adds	r3, r7, r0
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	4b54      	ldr	r3, [pc, #336]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4013      	ands	r3, r2
 8006512:	d11a      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006514:	4b51      	ldr	r3, [pc, #324]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b50      	ldr	r3, [pc, #320]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800651a:	2180      	movs	r1, #128	@ 0x80
 800651c:	0049      	lsls	r1, r1, #1
 800651e:	430a      	orrs	r2, r1
 8006520:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006522:	f7fe fa57 	bl	80049d4 <HAL_GetTick>
 8006526:	0003      	movs	r3, r0
 8006528:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652a:	e008      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652c:	f7fe fa52 	bl	80049d4 <HAL_GetTick>
 8006530:	0002      	movs	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	@ 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e087      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653e:	4b47      	ldr	r3, [pc, #284]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2380      	movs	r3, #128	@ 0x80
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	4013      	ands	r3, r2
 8006548:	d0f0      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800654a:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	23c0      	movs	r3, #192	@ 0xc0
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d034      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	23c0      	movs	r3, #192	@ 0xc0
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4013      	ands	r3, r2
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d02c      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800656c:	4b3a      	ldr	r3, [pc, #232]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	4a3b      	ldr	r2, [pc, #236]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006572:	4013      	ands	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006576:	4b38      	ldr	r3, [pc, #224]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006578:	6a1a      	ldr	r2, [r3, #32]
 800657a:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800657c:	2180      	movs	r1, #128	@ 0x80
 800657e:	0249      	lsls	r1, r1, #9
 8006580:	430a      	orrs	r2, r1
 8006582:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006584:	4b34      	ldr	r3, [pc, #208]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800658a:	4936      	ldr	r1, [pc, #216]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800658c:	400a      	ands	r2, r1
 800658e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006590:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	4013      	ands	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7fe fa19 	bl	80049d4 <HAL_GetTick>
 80065a2:	0003      	movs	r3, r0
 80065a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a6:	e009      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a8:	f7fe fa14 	bl	80049d4 <HAL_GetTick>
 80065ac:	0002      	movs	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d901      	bls.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e048      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065bc:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	2202      	movs	r2, #2
 80065c2:	4013      	ands	r3, r2
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065c6:	4b24      	ldr	r3, [pc, #144]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	4a25      	ldr	r2, [pc, #148]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	0019      	movs	r1, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	4b20      	ldr	r3, [pc, #128]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065d6:	430a      	orrs	r2, r1
 80065d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065da:	2317      	movs	r3, #23
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065ea:	4920      	ldr	r1, [pc, #128]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ec:	400a      	ands	r2, r1
 80065ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	4013      	ands	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065fa:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	2203      	movs	r2, #3
 8006600:	4393      	bics	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800660a:	430a      	orrs	r2, r1
 800660c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2220      	movs	r2, #32
 8006614:	4013      	ands	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006618:	4b0f      	ldr	r3, [pc, #60]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	2210      	movs	r2, #16
 800661e:	4393      	bics	r3, r2
 8006620:	0019      	movs	r1, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006628:	430a      	orrs	r2, r1
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	2380      	movs	r3, #128	@ 0x80
 8006632:	029b      	lsls	r3, r3, #10
 8006634:	4013      	ands	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006638:	4b07      	ldr	r3, [pc, #28]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	2280      	movs	r2, #128	@ 0x80
 800663e:	4393      	bics	r3, r2
 8006640:	0019      	movs	r1, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	4b04      	ldr	r3, [pc, #16]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006648:	430a      	orrs	r2, r1
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	0018      	movs	r0, r3
 8006650:	46bd      	mov	sp, r7
 8006652:	b006      	add	sp, #24
 8006654:	bd80      	pop	{r7, pc}
 8006656:	46c0      	nop			@ (mov r8, r8)
 8006658:	40021000 	.word	0x40021000
 800665c:	40007000 	.word	0x40007000
 8006660:	fffffcff 	.word	0xfffffcff
 8006664:	fffeffff 	.word	0xfffeffff
 8006668:	00001388 	.word	0x00001388
 800666c:	efffffff 	.word	0xefffffff

08006670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e044      	b.n	800670c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2278      	movs	r2, #120	@ 0x78
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	0018      	movs	r0, r3
 8006696:	f7fd fce1 	bl	800405c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2224      	movs	r2, #36	@ 0x24
 800669e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2101      	movs	r1, #1
 80066ac:	438a      	bics	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	0018      	movs	r0, r3
 80066bc:	f000 f984 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 f828 	bl	8006718 <UART_SetConfig>
 80066c8:	0003      	movs	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e01c      	b.n	800670c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	490d      	ldr	r1, [pc, #52]	@ (8006714 <HAL_UART_Init+0xa4>)
 80066de:	400a      	ands	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2108      	movs	r1, #8
 80066ee:	438a      	bics	r2, r1
 80066f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2101      	movs	r1, #1
 80066fe:	430a      	orrs	r2, r1
 8006700:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fa13 	bl	8006b30 <UART_CheckIdleState>
 800670a:	0003      	movs	r3, r0
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}
 8006714:	fffff7ff 	.word	0xfffff7ff

08006718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006720:	231e      	movs	r3, #30
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a97      	ldr	r2, [pc, #604]	@ (80069a4 <UART_SetConfig+0x28c>)
 8006748:	4013      	ands	r3, r2
 800674a:	0019      	movs	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a92      	ldr	r2, [pc, #584]	@ (80069a8 <UART_SetConfig+0x290>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a89      	ldr	r2, [pc, #548]	@ (80069ac <UART_SetConfig+0x294>)
 8006786:	4013      	ands	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a85      	ldr	r2, [pc, #532]	@ (80069b0 <UART_SetConfig+0x298>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d127      	bne.n	80067ee <UART_SetConfig+0xd6>
 800679e:	4b85      	ldr	r3, [pc, #532]	@ (80069b4 <UART_SetConfig+0x29c>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	2203      	movs	r2, #3
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d00d      	beq.n	80067c6 <UART_SetConfig+0xae>
 80067aa:	d81b      	bhi.n	80067e4 <UART_SetConfig+0xcc>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d014      	beq.n	80067da <UART_SetConfig+0xc2>
 80067b0:	d818      	bhi.n	80067e4 <UART_SetConfig+0xcc>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <UART_SetConfig+0xa4>
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d00a      	beq.n	80067d0 <UART_SetConfig+0xb8>
 80067ba:	e013      	b.n	80067e4 <UART_SetConfig+0xcc>
 80067bc:	231f      	movs	r3, #31
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e035      	b.n	8006832 <UART_SetConfig+0x11a>
 80067c6:	231f      	movs	r3, #31
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e030      	b.n	8006832 <UART_SetConfig+0x11a>
 80067d0:	231f      	movs	r3, #31
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	2204      	movs	r2, #4
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e02b      	b.n	8006832 <UART_SetConfig+0x11a>
 80067da:	231f      	movs	r3, #31
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	2208      	movs	r2, #8
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e026      	b.n	8006832 <UART_SetConfig+0x11a>
 80067e4:	231f      	movs	r3, #31
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2210      	movs	r2, #16
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e021      	b.n	8006832 <UART_SetConfig+0x11a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a71      	ldr	r2, [pc, #452]	@ (80069b8 <UART_SetConfig+0x2a0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d104      	bne.n	8006802 <UART_SetConfig+0xea>
 80067f8:	231f      	movs	r3, #31
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e017      	b.n	8006832 <UART_SetConfig+0x11a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6d      	ldr	r2, [pc, #436]	@ (80069bc <UART_SetConfig+0x2a4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d104      	bne.n	8006816 <UART_SetConfig+0xfe>
 800680c:	231f      	movs	r3, #31
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e00d      	b.n	8006832 <UART_SetConfig+0x11a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a69      	ldr	r2, [pc, #420]	@ (80069c0 <UART_SetConfig+0x2a8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d104      	bne.n	800682a <UART_SetConfig+0x112>
 8006820:	231f      	movs	r3, #31
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	e003      	b.n	8006832 <UART_SetConfig+0x11a>
 800682a:	231f      	movs	r3, #31
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	2210      	movs	r2, #16
 8006830:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	2380      	movs	r3, #128	@ 0x80
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	429a      	cmp	r2, r3
 800683c:	d15c      	bne.n	80068f8 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 800683e:	231f      	movs	r3, #31
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d015      	beq.n	8006874 <UART_SetConfig+0x15c>
 8006848:	dc18      	bgt.n	800687c <UART_SetConfig+0x164>
 800684a:	2b04      	cmp	r3, #4
 800684c:	d00d      	beq.n	800686a <UART_SetConfig+0x152>
 800684e:	dc15      	bgt.n	800687c <UART_SetConfig+0x164>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <UART_SetConfig+0x142>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d005      	beq.n	8006864 <UART_SetConfig+0x14c>
 8006858:	e010      	b.n	800687c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685a:	f7ff fe15 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 800685e:	0003      	movs	r3, r0
 8006860:	61bb      	str	r3, [r7, #24]
        break;
 8006862:	e012      	b.n	800688a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006864:	4b57      	ldr	r3, [pc, #348]	@ (80069c4 <UART_SetConfig+0x2ac>)
 8006866:	61bb      	str	r3, [r7, #24]
        break;
 8006868:	e00f      	b.n	800688a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686a:	f7ff fdab 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 800686e:	0003      	movs	r3, r0
 8006870:	61bb      	str	r3, [r7, #24]
        break;
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	61bb      	str	r3, [r7, #24]
        break;
 800687a:	e006      	b.n	800688a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006880:	231e      	movs	r3, #30
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	2201      	movs	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
        break;
 8006888:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d100      	bne.n	8006892 <UART_SetConfig+0x17a>
 8006890:	e07a      	b.n	8006988 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	005a      	lsls	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	18d2      	adds	r2, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	0019      	movs	r1, r3
 80068a4:	0010      	movs	r0, r2
 80068a6:	f7f9 fc2f 	bl	8000108 <__udivsi3>
 80068aa:	0003      	movs	r3, r0
 80068ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d91c      	bls.n	80068ee <UART_SetConfig+0x1d6>
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	2380      	movs	r3, #128	@ 0x80
 80068b8:	025b      	lsls	r3, r3, #9
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d217      	bcs.n	80068ee <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	200e      	movs	r0, #14
 80068c4:	183b      	adds	r3, r7, r0
 80068c6:	210f      	movs	r1, #15
 80068c8:	438a      	bics	r2, r1
 80068ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2207      	movs	r2, #7
 80068d4:	4013      	ands	r3, r2
 80068d6:	b299      	uxth	r1, r3
 80068d8:	183b      	adds	r3, r7, r0
 80068da:	183a      	adds	r2, r7, r0
 80068dc:	8812      	ldrh	r2, [r2, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	183a      	adds	r2, r7, r0
 80068e8:	8812      	ldrh	r2, [r2, #0]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e04c      	b.n	8006988 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80068ee:	231e      	movs	r3, #30
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e047      	b.n	8006988 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f8:	231f      	movs	r3, #31
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d015      	beq.n	800692e <UART_SetConfig+0x216>
 8006902:	dc18      	bgt.n	8006936 <UART_SetConfig+0x21e>
 8006904:	2b04      	cmp	r3, #4
 8006906:	d00d      	beq.n	8006924 <UART_SetConfig+0x20c>
 8006908:	dc15      	bgt.n	8006936 <UART_SetConfig+0x21e>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <UART_SetConfig+0x1fc>
 800690e:	2b02      	cmp	r3, #2
 8006910:	d005      	beq.n	800691e <UART_SetConfig+0x206>
 8006912:	e010      	b.n	8006936 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006914:	f7ff fdb8 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8006918:	0003      	movs	r3, r0
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e012      	b.n	8006944 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691e:	4b29      	ldr	r3, [pc, #164]	@ (80069c4 <UART_SetConfig+0x2ac>)
 8006920:	61bb      	str	r3, [r7, #24]
        break;
 8006922:	e00f      	b.n	8006944 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006924:	f7ff fd4e 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006928:	0003      	movs	r3, r0
 800692a:	61bb      	str	r3, [r7, #24]
        break;
 800692c:	e00a      	b.n	8006944 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	2380      	movs	r3, #128	@ 0x80
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	61bb      	str	r3, [r7, #24]
        break;
 8006934:	e006      	b.n	8006944 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800693a:	231e      	movs	r3, #30
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
        break;
 8006942:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01e      	beq.n	8006988 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085a      	lsrs	r2, r3, #1
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	18d2      	adds	r2, r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	0019      	movs	r1, r3
 800695a:	0010      	movs	r0, r2
 800695c:	f7f9 fbd4 	bl	8000108 <__udivsi3>
 8006960:	0003      	movs	r3, r0
 8006962:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d90a      	bls.n	8006980 <UART_SetConfig+0x268>
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	025b      	lsls	r3, r3, #9
 8006970:	429a      	cmp	r2, r3
 8006972:	d205      	bcs.n	8006980 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	e003      	b.n	8006988 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8006980:	231e      	movs	r3, #30
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006994:	231e      	movs	r3, #30
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b008      	add	sp, #32
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	efff69f3 	.word	0xefff69f3
 80069a8:	ffffcfff 	.word	0xffffcfff
 80069ac:	fffff4ff 	.word	0xfffff4ff
 80069b0:	40013800 	.word	0x40013800
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40004400 	.word	0x40004400
 80069bc:	40004800 	.word	0x40004800
 80069c0:	40004c00 	.word	0x40004c00
 80069c4:	007a1200 	.word	0x007a1200

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	2208      	movs	r2, #8
 80069d6:	4013      	ands	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a4a      	ldr	r2, [pc, #296]	@ (8006b0c <UART_AdvFeatureConfig+0x144>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	0019      	movs	r1, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	2201      	movs	r2, #1
 80069f8:	4013      	ands	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a43      	ldr	r2, [pc, #268]	@ (8006b10 <UART_AdvFeatureConfig+0x148>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d00b      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a3b      	ldr	r2, [pc, #236]	@ (8006b14 <UART_AdvFeatureConfig+0x14c>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	0019      	movs	r1, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4a34      	ldr	r2, [pc, #208]	@ (8006b18 <UART_AdvFeatureConfig+0x150>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	@ (8006b1c <UART_AdvFeatureConfig+0x154>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	2220      	movs	r2, #32
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	4a25      	ldr	r2, [pc, #148]	@ (8006b20 <UART_AdvFeatureConfig+0x158>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	0019      	movs	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	2240      	movs	r2, #64	@ 0x40
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <UART_AdvFeatureConfig+0x15c>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ac2:	2380      	movs	r3, #128	@ 0x80
 8006ac4:	035b      	lsls	r3, r3, #13
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d10b      	bne.n	8006ae2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <UART_AdvFeatureConfig+0x160>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	2280      	movs	r2, #128	@ 0x80
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b2c <UART_AdvFeatureConfig+0x164>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	0019      	movs	r1, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	ffff7fff 	.word	0xffff7fff
 8006b10:	fffdffff 	.word	0xfffdffff
 8006b14:	fffeffff 	.word	0xfffeffff
 8006b18:	fffbffff 	.word	0xfffbffff
 8006b1c:	ffffefff 	.word	0xffffefff
 8006b20:	ffffdfff 	.word	0xffffdfff
 8006b24:	ffefffff 	.word	0xffefffff
 8006b28:	ff9fffff 	.word	0xff9fffff
 8006b2c:	fff7ffff 	.word	0xfff7ffff

08006b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b092      	sub	sp, #72	@ 0x48
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2284      	movs	r2, #132	@ 0x84
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b40:	f7fd ff48 	bl	80049d4 <HAL_GetTick>
 8006b44:	0003      	movs	r3, r0
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d12c      	bne.n	8006bb0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	2280      	movs	r2, #128	@ 0x80
 8006b5a:	0391      	lsls	r1, r2, #14
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4a46      	ldr	r2, [pc, #280]	@ (8006c78 <UART_CheckIdleState+0x148>)
 8006b60:	9200      	str	r2, [sp, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f88c 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006b68:	1e03      	subs	r3, r0, #0
 8006b6a:	d021      	beq.n	8006bb0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b76:	2301      	movs	r3, #1
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			@ (mov r8, r8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2180      	movs	r1, #128	@ 0x80
 8006b8e:	438a      	bics	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2278      	movs	r2, #120	@ 0x78
 8006ba8:	2100      	movs	r1, #0
 8006baa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e05f      	b.n	8006c70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d146      	bne.n	8006c4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc0:	2280      	movs	r2, #128	@ 0x80
 8006bc2:	03d1      	lsls	r1, r2, #15
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006c78 <UART_CheckIdleState+0x148>)
 8006bc8:	9200      	str	r2, [sp, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f000 f858 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006bd0:	1e03      	subs	r3, r0, #0
 8006bd2:	d03b      	beq.n	8006c4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bda:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bde:	2301      	movs	r3, #1
 8006be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f383 8810 	msr	PRIMASK, r3
}
 8006be8:	46c0      	nop			@ (mov r8, r8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4921      	ldr	r1, [pc, #132]	@ (8006c7c <UART_CheckIdleState+0x14c>)
 8006bf6:	400a      	ands	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c06:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	2301      	movs	r3, #1
 8006c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	f383 8810 	msr	PRIMASK, r3
}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2101      	movs	r1, #1
 8006c28:	438a      	bics	r2, r1
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	f383 8810 	msr	PRIMASK, r3
}
 8006c36:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2280      	movs	r2, #128	@ 0x80
 8006c3c:	2120      	movs	r1, #32
 8006c3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2278      	movs	r2, #120	@ 0x78
 8006c44:	2100      	movs	r1, #0
 8006c46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e011      	b.n	8006c70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2280      	movs	r2, #128	@ 0x80
 8006c56:	2120      	movs	r1, #32
 8006c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2278      	movs	r2, #120	@ 0x78
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	0018      	movs	r0, r3
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b010      	add	sp, #64	@ 0x40
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	01ffffff 	.word	0x01ffffff
 8006c7c:	fffffedf 	.word	0xfffffedf

08006c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	1dfb      	adds	r3, r7, #7
 8006c8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	e051      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	3301      	adds	r3, #1
 8006c96:	d04e      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c98:	f7fd fe9c 	bl	80049d4 <HAL_GetTick>
 8006c9c:	0002      	movs	r2, r0
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e051      	b.n	8006d56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d03b      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b80      	cmp	r3, #128	@ 0x80
 8006cc2:	d038      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b40      	cmp	r3, #64	@ 0x40
 8006cc8:	d035      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d111      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2208      	movs	r2, #8
 8006cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 f83c 	bl	8006d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2284      	movs	r2, #132	@ 0x84
 8006cec:	2108      	movs	r1, #8
 8006cee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2278      	movs	r2, #120	@ 0x78
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e02c      	b.n	8006d56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69da      	ldr	r2, [r3, #28]
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	401a      	ands	r2, r3
 8006d08:	2380      	movs	r3, #128	@ 0x80
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d112      	bne.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2280      	movs	r2, #128	@ 0x80
 8006d16:	0112      	lsls	r2, r2, #4
 8006d18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f000 f81f 	bl	8006d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2284      	movs	r2, #132	@ 0x84
 8006d26:	2120      	movs	r1, #32
 8006d28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2278      	movs	r2, #120	@ 0x78
 8006d2e:	2100      	movs	r1, #0
 8006d30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e00f      	b.n	8006d56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	425a      	negs	r2, r3
 8006d46:	4153      	adcs	r3, r2
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	1dfb      	adds	r3, r7, #7
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d09e      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	0018      	movs	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	@ 0x38
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d68:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006d6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d72:	2301      	movs	r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	f383 8810 	msr	PRIMASK, r3
}
 8006d7c:	46c0      	nop			@ (mov r8, r8)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4926      	ldr	r1, [pc, #152]	@ (8006e24 <UART_EndRxTransfer+0xc4>)
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d9e:	623b      	str	r3, [r7, #32]
  return(result);
 8006da0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006da4:	2301      	movs	r3, #1
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	46c0      	nop			@ (mov r8, r8)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2101      	movs	r1, #1
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	f383 8810 	msr	PRIMASK, r3
}
 8006dca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d118      	bne.n	8006e06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dde:	2301      	movs	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f383 8810 	msr	PRIMASK, r3
}
 8006de8:	46c0      	nop			@ (mov r8, r8)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2110      	movs	r1, #16
 8006df6:	438a      	bics	r2, r1
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f383 8810 	msr	PRIMASK, r3
}
 8006e04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2280      	movs	r2, #128	@ 0x80
 8006e0a:	2120      	movs	r1, #32
 8006e0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b00e      	add	sp, #56	@ 0x38
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	fffffedf 	.word	0xfffffedf

08006e28 <memset>:
 8006e28:	0003      	movs	r3, r0
 8006e2a:	1882      	adds	r2, r0, r2
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d100      	bne.n	8006e32 <memset+0xa>
 8006e30:	4770      	bx	lr
 8006e32:	7019      	strb	r1, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	e7f9      	b.n	8006e2c <memset+0x4>

08006e38 <__errno>:
 8006e38:	4b01      	ldr	r3, [pc, #4]	@ (8006e40 <__errno+0x8>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	4770      	bx	lr
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	20000014 	.word	0x20000014

08006e44 <__libc_init_array>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	2600      	movs	r6, #0
 8006e48:	4c0c      	ldr	r4, [pc, #48]	@ (8006e7c <__libc_init_array+0x38>)
 8006e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e80 <__libc_init_array+0x3c>)
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	42a6      	cmp	r6, r4
 8006e52:	d109      	bne.n	8006e68 <__libc_init_array+0x24>
 8006e54:	2600      	movs	r6, #0
 8006e56:	f000 f927 	bl	80070a8 <_init>
 8006e5a:	4c0a      	ldr	r4, [pc, #40]	@ (8006e84 <__libc_init_array+0x40>)
 8006e5c:	4d0a      	ldr	r5, [pc, #40]	@ (8006e88 <__libc_init_array+0x44>)
 8006e5e:	1b64      	subs	r4, r4, r5
 8006e60:	10a4      	asrs	r4, r4, #2
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	d105      	bne.n	8006e72 <__libc_init_array+0x2e>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	00b3      	lsls	r3, r6, #2
 8006e6a:	58eb      	ldr	r3, [r5, r3]
 8006e6c:	4798      	blx	r3
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7ee      	b.n	8006e50 <__libc_init_array+0xc>
 8006e72:	00b3      	lsls	r3, r6, #2
 8006e74:	58eb      	ldr	r3, [r5, r3]
 8006e76:	4798      	blx	r3
 8006e78:	3601      	adds	r6, #1
 8006e7a:	e7f2      	b.n	8006e62 <__libc_init_array+0x1e>
 8006e7c:	08007228 	.word	0x08007228
 8006e80:	08007228 	.word	0x08007228
 8006e84:	0800722c 	.word	0x0800722c
 8006e88:	08007228 	.word	0x08007228

08006e8c <sqrt>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	0004      	movs	r4, r0
 8006e90:	000d      	movs	r5, r1
 8006e92:	f000 f821 	bl	8006ed8 <__ieee754_sqrt>
 8006e96:	0022      	movs	r2, r4
 8006e98:	0006      	movs	r6, r0
 8006e9a:	000f      	movs	r7, r1
 8006e9c:	002b      	movs	r3, r5
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	0029      	movs	r1, r5
 8006ea2:	f7fb ff29 	bl	8002cf8 <__aeabi_dcmpun>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d113      	bne.n	8006ed2 <sqrt+0x46>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	0020      	movs	r0, r4
 8006eb0:	0029      	movs	r1, r5
 8006eb2:	f7f9 fab5 	bl	8000420 <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d00b      	beq.n	8006ed2 <sqrt+0x46>
 8006eba:	f7ff ffbd 	bl	8006e38 <__errno>
 8006ebe:	2321      	movs	r3, #33	@ 0x21
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	0010      	movs	r0, r2
 8006ec8:	0019      	movs	r1, r3
 8006eca:	f7fa fc6d 	bl	80017a8 <__aeabi_ddiv>
 8006ece:	0006      	movs	r6, r0
 8006ed0:	000f      	movs	r7, r1
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	0039      	movs	r1, r7
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ed8 <__ieee754_sqrt>:
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	000a      	movs	r2, r1
 8006edc:	000d      	movs	r5, r1
 8006ede:	496d      	ldr	r1, [pc, #436]	@ (8007094 <__ieee754_sqrt+0x1bc>)
 8006ee0:	0004      	movs	r4, r0
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	0008      	movs	r0, r1
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	4028      	ands	r0, r5
 8006eea:	4288      	cmp	r0, r1
 8006eec:	d111      	bne.n	8006f12 <__ieee754_sqrt+0x3a>
 8006eee:	0022      	movs	r2, r4
 8006ef0:	002b      	movs	r3, r5
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	0029      	movs	r1, r5
 8006ef6:	f7fb f89b 	bl	8002030 <__aeabi_dmul>
 8006efa:	0002      	movs	r2, r0
 8006efc:	000b      	movs	r3, r1
 8006efe:	0020      	movs	r0, r4
 8006f00:	0029      	movs	r1, r5
 8006f02:	f7fa f8ed 	bl	80010e0 <__aeabi_dadd>
 8006f06:	0004      	movs	r4, r0
 8006f08:	000d      	movs	r5, r1
 8006f0a:	0020      	movs	r0, r4
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	b007      	add	sp, #28
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	dc11      	bgt.n	8006f3a <__ieee754_sqrt+0x62>
 8006f16:	0069      	lsls	r1, r5, #1
 8006f18:	0849      	lsrs	r1, r1, #1
 8006f1a:	4321      	orrs	r1, r4
 8006f1c:	d0f5      	beq.n	8006f0a <__ieee754_sqrt+0x32>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	4285      	cmp	r5, r0
 8006f22:	d010      	beq.n	8006f46 <__ieee754_sqrt+0x6e>
 8006f24:	0022      	movs	r2, r4
 8006f26:	002b      	movs	r3, r5
 8006f28:	0020      	movs	r0, r4
 8006f2a:	0029      	movs	r1, r5
 8006f2c:	f7fb fb48 	bl	80025c0 <__aeabi_dsub>
 8006f30:	0002      	movs	r2, r0
 8006f32:	000b      	movs	r3, r1
 8006f34:	f7fa fc38 	bl	80017a8 <__aeabi_ddiv>
 8006f38:	e7e5      	b.n	8006f06 <__ieee754_sqrt+0x2e>
 8006f3a:	1528      	asrs	r0, r5, #20
 8006f3c:	d115      	bne.n	8006f6a <__ieee754_sqrt+0x92>
 8006f3e:	2480      	movs	r4, #128	@ 0x80
 8006f40:	2100      	movs	r1, #0
 8006f42:	0364      	lsls	r4, r4, #13
 8006f44:	e007      	b.n	8006f56 <__ieee754_sqrt+0x7e>
 8006f46:	0ada      	lsrs	r2, r3, #11
 8006f48:	3815      	subs	r0, #21
 8006f4a:	055b      	lsls	r3, r3, #21
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	d0fa      	beq.n	8006f46 <__ieee754_sqrt+0x6e>
 8006f50:	e7f5      	b.n	8006f3e <__ieee754_sqrt+0x66>
 8006f52:	0052      	lsls	r2, r2, #1
 8006f54:	3101      	adds	r1, #1
 8006f56:	4222      	tst	r2, r4
 8006f58:	d0fb      	beq.n	8006f52 <__ieee754_sqrt+0x7a>
 8006f5a:	1e4c      	subs	r4, r1, #1
 8006f5c:	1b00      	subs	r0, r0, r4
 8006f5e:	2420      	movs	r4, #32
 8006f60:	001d      	movs	r5, r3
 8006f62:	1a64      	subs	r4, r4, r1
 8006f64:	40e5      	lsrs	r5, r4
 8006f66:	408b      	lsls	r3, r1
 8006f68:	432a      	orrs	r2, r5
 8006f6a:	494b      	ldr	r1, [pc, #300]	@ (8007098 <__ieee754_sqrt+0x1c0>)
 8006f6c:	0312      	lsls	r2, r2, #12
 8006f6e:	1844      	adds	r4, r0, r1
 8006f70:	2180      	movs	r1, #128	@ 0x80
 8006f72:	0b12      	lsrs	r2, r2, #12
 8006f74:	0349      	lsls	r1, r1, #13
 8006f76:	4311      	orrs	r1, r2
 8006f78:	07c0      	lsls	r0, r0, #31
 8006f7a:	d403      	bmi.n	8006f84 <__ieee754_sqrt+0xac>
 8006f7c:	0fda      	lsrs	r2, r3, #31
 8006f7e:	0049      	lsls	r1, r1, #1
 8006f80:	1851      	adds	r1, r2, r1
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	2500      	movs	r5, #0
 8006f86:	1062      	asrs	r2, r4, #1
 8006f88:	0049      	lsls	r1, r1, #1
 8006f8a:	2480      	movs	r4, #128	@ 0x80
 8006f8c:	9205      	str	r2, [sp, #20]
 8006f8e:	0fda      	lsrs	r2, r3, #31
 8006f90:	1852      	adds	r2, r2, r1
 8006f92:	2016      	movs	r0, #22
 8006f94:	0029      	movs	r1, r5
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	03a4      	lsls	r4, r4, #14
 8006f9a:	190e      	adds	r6, r1, r4
 8006f9c:	4296      	cmp	r6, r2
 8006f9e:	dc02      	bgt.n	8006fa6 <__ieee754_sqrt+0xce>
 8006fa0:	1931      	adds	r1, r6, r4
 8006fa2:	1b92      	subs	r2, r2, r6
 8006fa4:	192d      	adds	r5, r5, r4
 8006fa6:	0fde      	lsrs	r6, r3, #31
 8006fa8:	0052      	lsls	r2, r2, #1
 8006faa:	3801      	subs	r0, #1
 8006fac:	1992      	adds	r2, r2, r6
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	0864      	lsrs	r4, r4, #1
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d1f1      	bne.n	8006f9a <__ieee754_sqrt+0xc2>
 8006fb6:	2620      	movs	r6, #32
 8006fb8:	2780      	movs	r7, #128	@ 0x80
 8006fba:	0004      	movs	r4, r0
 8006fbc:	9604      	str	r6, [sp, #16]
 8006fbe:	063f      	lsls	r7, r7, #24
 8006fc0:	19c6      	adds	r6, r0, r7
 8006fc2:	46b4      	mov	ip, r6
 8006fc4:	4291      	cmp	r1, r2
 8006fc6:	db02      	blt.n	8006fce <__ieee754_sqrt+0xf6>
 8006fc8:	d114      	bne.n	8006ff4 <__ieee754_sqrt+0x11c>
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	d812      	bhi.n	8006ff4 <__ieee754_sqrt+0x11c>
 8006fce:	4660      	mov	r0, ip
 8006fd0:	4666      	mov	r6, ip
 8006fd2:	19c0      	adds	r0, r0, r7
 8006fd4:	9100      	str	r1, [sp, #0]
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	da03      	bge.n	8006fe2 <__ieee754_sqrt+0x10a>
 8006fda:	43c6      	mvns	r6, r0
 8006fdc:	0ff6      	lsrs	r6, r6, #31
 8006fde:	198e      	adds	r6, r1, r6
 8006fe0:	9600      	str	r6, [sp, #0]
 8006fe2:	1a52      	subs	r2, r2, r1
 8006fe4:	4563      	cmp	r3, ip
 8006fe6:	4189      	sbcs	r1, r1
 8006fe8:	4249      	negs	r1, r1
 8006fea:	1a52      	subs	r2, r2, r1
 8006fec:	4661      	mov	r1, ip
 8006fee:	1a5b      	subs	r3, r3, r1
 8006ff0:	9900      	ldr	r1, [sp, #0]
 8006ff2:	19e4      	adds	r4, r4, r7
 8006ff4:	0fde      	lsrs	r6, r3, #31
 8006ff6:	0052      	lsls	r2, r2, #1
 8006ff8:	1992      	adds	r2, r2, r6
 8006ffa:	9e04      	ldr	r6, [sp, #16]
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	3e01      	subs	r6, #1
 8007000:	087f      	lsrs	r7, r7, #1
 8007002:	9604      	str	r6, [sp, #16]
 8007004:	2e00      	cmp	r6, #0
 8007006:	d1db      	bne.n	8006fc0 <__ieee754_sqrt+0xe8>
 8007008:	431a      	orrs	r2, r3
 800700a:	d01f      	beq.n	800704c <__ieee754_sqrt+0x174>
 800700c:	4e23      	ldr	r6, [pc, #140]	@ (800709c <__ieee754_sqrt+0x1c4>)
 800700e:	4f24      	ldr	r7, [pc, #144]	@ (80070a0 <__ieee754_sqrt+0x1c8>)
 8007010:	6830      	ldr	r0, [r6, #0]
 8007012:	6871      	ldr	r1, [r6, #4]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9200      	str	r2, [sp, #0]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	6832      	ldr	r2, [r6, #0]
 800701e:	6873      	ldr	r3, [r6, #4]
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	9303      	str	r3, [sp, #12]
 8007024:	9a00      	ldr	r2, [sp, #0]
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	f7fb faca 	bl	80025c0 <__aeabi_dsub>
 800702c:	0002      	movs	r2, r0
 800702e:	000b      	movs	r3, r1
 8007030:	9802      	ldr	r0, [sp, #8]
 8007032:	9903      	ldr	r1, [sp, #12]
 8007034:	f7f9 f9fe 	bl	8000434 <__aeabi_dcmple>
 8007038:	2800      	cmp	r0, #0
 800703a:	d007      	beq.n	800704c <__ieee754_sqrt+0x174>
 800703c:	6830      	ldr	r0, [r6, #0]
 800703e:	6871      	ldr	r1, [r6, #4]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1c67      	adds	r7, r4, #1
 8007046:	d10f      	bne.n	8007068 <__ieee754_sqrt+0x190>
 8007048:	9c04      	ldr	r4, [sp, #16]
 800704a:	3501      	adds	r5, #1
 800704c:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <__ieee754_sqrt+0x1cc>)
 800704e:	106a      	asrs	r2, r5, #1
 8007050:	18d2      	adds	r2, r2, r3
 8007052:	0863      	lsrs	r3, r4, #1
 8007054:	07ed      	lsls	r5, r5, #31
 8007056:	d502      	bpl.n	800705e <__ieee754_sqrt+0x186>
 8007058:	2180      	movs	r1, #128	@ 0x80
 800705a:	0609      	lsls	r1, r1, #24
 800705c:	430b      	orrs	r3, r1
 800705e:	9905      	ldr	r1, [sp, #20]
 8007060:	001c      	movs	r4, r3
 8007062:	0509      	lsls	r1, r1, #20
 8007064:	188d      	adds	r5, r1, r2
 8007066:	e750      	b.n	8006f0a <__ieee754_sqrt+0x32>
 8007068:	f7fa f83a 	bl	80010e0 <__aeabi_dadd>
 800706c:	6877      	ldr	r7, [r6, #4]
 800706e:	6836      	ldr	r6, [r6, #0]
 8007070:	0002      	movs	r2, r0
 8007072:	000b      	movs	r3, r1
 8007074:	0030      	movs	r0, r6
 8007076:	0039      	movs	r1, r7
 8007078:	f7f9 f9d2 	bl	8000420 <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	d004      	beq.n	800708a <__ieee754_sqrt+0x1b2>
 8007080:	3402      	adds	r4, #2
 8007082:	4263      	negs	r3, r4
 8007084:	4163      	adcs	r3, r4
 8007086:	18ed      	adds	r5, r5, r3
 8007088:	e7e0      	b.n	800704c <__ieee754_sqrt+0x174>
 800708a:	2301      	movs	r3, #1
 800708c:	3401      	adds	r4, #1
 800708e:	439c      	bics	r4, r3
 8007090:	e7dc      	b.n	800704c <__ieee754_sqrt+0x174>
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	7ff00000 	.word	0x7ff00000
 8007098:	fffffc01 	.word	0xfffffc01
 800709c:	20000070 	.word	0x20000070
 80070a0:	20000068 	.word	0x20000068
 80070a4:	3fe00000 	.word	0x3fe00000

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
